
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD ARROW BFS CLOSURE COLOR CYCLE DELETE1 DFS DIRECTED EDGE FIND FROM GRAPH GREATER IDENTIFIER IF IN IS LOAD LOOP MST NODE NOT NUMBER OF PATH REFLEXIVE SAVE STRING SYMMETRIC THAN THEN TO TRANSITIVE VISUALIZE WEIGHTstatement : NODE IDENTIFIER IN IDENTIFIERstatement : GRAPH IDENTIFIER DIRECTEDstatement : GRAPH IDENTIFIERstatement : EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIERstatement : EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIERstatement : VISUALIZE IDENTIFIERstatement : FIND CYCLE IN IDENTIFIERstatement : FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIERstatement : FIND BFS FROM IDENTIFIER IN IDENTIFIERstatement : FIND DFS FROM IDENTIFIER IN IDENTIFIERstatement : FIND MST IN IDENTIFIERstatement : COLOR NODE IDENTIFIER STRINGstatement : DELETE1 NODE IDENTIFIER FROM IDENTIFIERstatement : SAVE GRAPH IDENTIFIER TO STRINGstatement : LOAD GRAPH IDENTIFIER FROM STRINGstatement : IF NODE IDENTIFIER IN IDENTIFIER THEN statementstatement : IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statementstatement : IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statementstatement : IF FIND CYCLE IN IDENTIFIER THEN statementstatement : IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statementstatement : IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statementstatement : IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statementstatement : IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statementstatement : IF NOT FIND CYCLE IN IDENTIFIER THEN statementstatement : CLOSURE closure_type IN IDENTIFIERclosure_type : REFLEXIVE\n                    | SYMMETRIC\n                    | TRANSITIVEstatement : LOOP NODE IDENTIFIER IN IDENTIFIER blockstatement : LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER blockstatement : LOOP FROM NUMBER TO NUMBER blockstatement : LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER blockstatement : LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER blockstatement : ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIERblock : statement blockblock : statement'
    
_lr_action_items = {'NODE':([0,7,8,11,13,16,18,33,44,70,72,76,77,90,101,102,103,113,116,119,121,122,123,126,132,133,137,140,141,144,146,149,150,152,155,156,157,159,162,163,164,167,168,170,171,172,176,177,181,182,184,186,187,],[2,24,25,28,38,-3,-6,60,-2,-1,-7,-11,-12,-25,-13,-14,-15,2,2,-5,-9,-10,2,2,-29,2,-31,-8,-16,-19,2,2,-35,2,-4,2,2,-21,-24,2,-30,-17,-18,2,2,-32,-22,-23,2,-34,-33,2,-20,]),'GRAPH':([0,9,10,16,18,44,70,72,76,77,90,101,102,103,113,116,119,121,122,123,126,132,133,137,140,141,144,146,149,150,152,155,156,157,159,162,163,164,167,168,170,171,172,176,177,181,182,184,186,187,],[3,26,27,-3,-6,-2,-1,-7,-11,-12,-25,-13,-14,-15,3,3,-5,-9,-10,3,3,-29,3,-31,-8,-16,-19,3,3,-35,3,-4,3,3,-21,-24,3,-30,-17,-18,3,3,-32,-22,-23,3,-34,-33,3,-20,]),'EDGE':([0,11,13,16,18,33,44,59,70,72,76,77,90,101,102,103,113,116,117,119,121,122,123,126,132,133,137,140,141,144,146,149,150,152,155,156,157,159,162,163,164,167,168,170,171,172,176,177,181,182,184,186,187,],[4,29,40,-3,-6,61,-2,85,-1,-7,-11,-12,-25,-13,-14,-15,4,4,138,-5,-9,-10,4,4,-29,4,-31,-8,-16,-19,4,4,-35,4,-4,4,4,-21,-24,4,-30,-17,-18,4,4,-32,-22,-23,4,-34,-33,4,-20,]),'VISUALIZE':([0,16,18,44,70,72,76,77,90,101,102,103,113,116,119,121,122,123,126,132,133,137,140,141,144,146,149,150,152,155,156,157,159,162,163,164,167,168,170,171,172,176,177,181,182,184,186,187,],[5,-3,-6,-2,-1,-7,-11,-12,-25,-13,-14,-15,5,5,-5,-9,-10,5,5,-29,5,-31,-8,-16,-19,5,5,-35,5,-4,5,5,-21,-24,5,-30,-17,-18,5,5,-32,-22,-23,5,-34,-33,5,-20,]),'FIND':([0,11,16,18,33,44,70,72,76,77,90,101,102,103,113,116,119,121,122,123,126,132,133,137,140,141,144,146,149,150,152,155,156,157,159,162,163,164,167,168,170,171,172,176,177,181,182,184,186,187,],[6,31,-3,-6,63,-2,-1,-7,-11,-12,-25,-13,-14,-15,6,6,-5,-9,-10,6,6,-29,6,-31,-8,-16,-19,6,6,-35,6,-4,6,6,-21,-24,6,-30,-17,-18,6,6,-32,-22,-23,6,-34,-33,6,-20,]),'COLOR':([0,16,18,44,70,72,76,77,90,101,102,103,113,116,119,121,122,123,126,132,133,137,140,141,144,146,149,150,152,155,156,157,159,162,163,164,167,168,170,171,172,176,177,181,182,184,186,187,],[7,-3,-6,-2,-1,-7,-11,-12,-25,-13,-14,-15,7,7,-5,-9,-10,7,7,-29,7,-31,-8,-16,-19,7,7,-35,7,-4,7,7,-21,-24,7,-30,-17,-18,7,7,-32,-22,-23,7,-34,-33,7,-20,]),'DELETE1':([0,16,18,44,70,72,76,77,90,101,102,103,113,116,119,121,122,123,126,132,133,137,140,141,144,146,149,150,152,155,156,157,159,162,163,164,167,168,170,171,172,176,177,181,182,184,186,187,],[8,-3,-6,-2,-1,-7,-11,-12,-25,-13,-14,-15,8,8,-5,-9,-10,8,8,-29,8,-31,-8,-16,-19,8,8,-35,8,-4,8,8,-21,-24,8,-30,-17,-18,8,8,-32,-22,-23,8,-34,-33,8,-20,]),'SAVE':([0,16,18,44,70,72,76,77,90,101,102,103,113,116,119,121,122,123,126,132,133,137,140,141,144,146,149,150,152,155,156,157,159,162,163,164,167,168,170,171,172,176,177,181,182,184,186,187,],[9,-3,-6,-2,-1,-7,-11,-12,-25,-13,-14,-15,9,9,-5,-9,-10,9,9,-29,9,-31,-8,-16,-19,9,9,-35,9,-4,9,9,-21,-24,9,-30,-17,-18,9,9,-32,-22,-23,9,-34,-33,9,-20,]),'LOAD':([0,16,18,44,70,72,76,77,90,101,102,103,113,116,119,121,122,123,126,132,133,137,140,141,144,146,149,150,152,155,156,157,159,162,163,164,167,168,170,171,172,176,177,181,182,184,186,187,],[10,-3,-6,-2,-1,-7,-11,-12,-25,-13,-14,-15,10,10,-5,-9,-10,10,10,-29,10,-31,-8,-16,-19,10,10,-35,10,-4,10,10,-21,-24,10,-30,-17,-18,10,10,-32,-22,-23,10,-34,-33,10,-20,]),'IF':([0,16,18,44,70,72,76,77,90,101,102,103,113,116,119,121,122,123,126,132,133,137,140,141,144,146,149,150,152,155,156,157,159,162,163,164,167,168,170,171,172,176,177,181,182,184,186,187,],[11,-3,-6,-2,-1,-7,-11,-12,-25,-13,-14,-15,11,11,-5,-9,-10,11,11,-29,11,-31,-8,-16,-19,11,11,-35,11,-4,11,11,-21,-24,11,-30,-17,-18,11,11,-32,-22,-23,11,-34,-33,11,-20,]),'CLOSURE':([0,16,18,44,70,72,76,77,90,101,102,103,113,116,119,121,122,123,126,132,133,137,140,141,144,146,149,150,152,155,156,157,159,162,163,164,167,168,170,171,172,176,177,181,182,184,186,187,],[12,-3,-6,-2,-1,-7,-11,-12,-25,-13,-14,-15,12,12,-5,-9,-10,12,12,-29,12,-31,-8,-16,-19,12,12,-35,12,-4,12,12,-21,-24,12,-30,-17,-18,12,12,-32,-22,-23,12,-34,-33,12,-20,]),'LOOP':([0,16,18,44,70,72,76,77,90,101,102,103,113,116,119,121,122,123,126,132,133,137,140,141,144,146,149,150,152,155,156,157,159,162,163,164,167,168,170,171,172,176,177,181,182,184,186,187,],[13,-3,-6,-2,-1,-7,-11,-12,-25,-13,-14,-15,13,13,-5,-9,-10,13,13,-29,13,-31,-8,-16,-19,13,13,-35,13,-4,13,13,-21,-24,13,-30,-17,-18,13,13,-32,-22,-23,13,-34,-33,13,-20,]),'ADD':([0,16,18,44,70,72,76,77,90,101,102,103,113,116,119,121,122,123,126,132,133,137,140,141,144,146,149,150,152,155,156,157,159,162,163,164,167,168,170,171,172,176,177,181,182,184,186,187,],[14,-3,-6,-2,-1,-7,-11,-12,-25,-13,-14,-15,14,14,-5,-9,-10,14,14,-29,14,-31,-8,-16,-19,14,14,-35,14,-4,14,14,-21,-24,14,-30,-17,-18,14,14,-32,-22,-23,14,-34,-33,14,-20,]),'$end':([1,16,18,44,70,72,76,77,90,101,102,103,119,121,122,132,133,137,140,141,144,150,155,159,162,164,167,168,172,176,177,182,184,187,],[0,-3,-6,-2,-1,-7,-11,-12,-25,-13,-14,-15,-5,-9,-10,-29,-36,-31,-8,-16,-19,-35,-4,-21,-24,-30,-17,-18,-32,-22,-23,-34,-33,-20,]),'IDENTIFIER':([2,3,4,5,13,20,24,25,26,27,28,29,30,38,40,43,45,46,48,49,50,60,61,62,64,73,78,81,82,83,84,85,91,93,97,99,100,109,110,111,112,120,124,125,127,135,138,139,147,148,151,166,178,179,183,],[15,16,17,18,39,47,51,52,53,54,55,56,57,65,67,70,71,72,74,75,76,86,87,88,90,98,101,104,105,106,107,108,113,115,119,121,122,128,129,130,131,140,142,143,145,152,154,155,160,161,163,174,181,182,185,]),'CYCLE':([6,31,63,],[19,58,89,]),'PATH':([6,11,33,],[20,30,62,]),'BFS':([6,],[21,]),'DFS':([6,],[22,]),'MST':([6,],[23,]),'WEIGHT':([11,69,71,],[32,95,96,]),'NOT':([11,],[33,]),'REFLEXIVE':([12,],[35,]),'SYMMETRIC':([12,],[36,]),'TRANSITIVE':([12,],[37,]),'FROM':([13,21,22,39,52,54,115,],[41,48,49,66,78,80,136,]),'NUMBER':([14,41,66,94,96,114,136,165,175,],[42,68,92,116,118,134,153,173,180,]),'IN':([15,19,23,34,35,36,37,55,58,65,71,74,75,86,89,98,105,106,115,118,129,130,134,173,174,180,],[43,46,50,64,-26,-27,-28,81,84,91,97,99,100,109,112,120,124,125,135,139,147,148,151,178,179,183,]),'DIRECTED':([16,],[44,]),'ARROW':([17,56,67,87,108,154,],[45,82,93,110,127,166,]),'OF':([32,95,],[59,117,]),'TO':([42,47,53,57,68,88,92,153,],[69,73,79,83,94,111,114,165,]),'STRING':([51,79,80,],[77,102,103,]),'THEN':([104,107,128,131,142,143,160,161,185,],[123,126,146,149,156,157,170,171,186,]),'IS':([145,],[158,]),'GREATER':([158,],[169,]),'THAN':([169,],[175,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,113,116,123,126,133,146,149,152,156,157,163,170,171,181,186,],[1,133,133,141,144,133,159,162,133,167,168,133,176,177,133,187,]),'closure_type':([12,],[34,]),'block':([113,116,133,152,163,181,],[132,137,150,164,172,184,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> NODE IDENTIFIER IN IDENTIFIER','statement',4,'p_statement_node','parser.pyc',6),
  ('statement -> GRAPH IDENTIFIER DIRECTED','statement',3,'p_statement_directed_graph','parser.pyc',10),
  ('statement -> GRAPH IDENTIFIER','statement',2,'p_statement_graph','parser.pyc',14),
  ('statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER','statement',8,'p_statement_weighted_edge','parser.pyc',18),
  ('statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER','statement',6,'p_statement_edge','parser.pyc',22),
  ('statement -> VISUALIZE IDENTIFIER','statement',2,'p_statement_visualize','parser.pyc',26),
  ('statement -> FIND CYCLE IN IDENTIFIER','statement',4,'p_statement_find_cycle','parser.pyc',30),
  ('statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER','statement',7,'p_statement_shortest_path','parser.pyc',34),
  ('statement -> FIND BFS FROM IDENTIFIER IN IDENTIFIER','statement',6,'p_statement_bfs','parser.pyc',38),
  ('statement -> FIND DFS FROM IDENTIFIER IN IDENTIFIER','statement',6,'p_statement_dfs','parser.pyc',42),
  ('statement -> FIND MST IN IDENTIFIER','statement',4,'p_statement_find_mst','parser.pyc',46),
  ('statement -> COLOR NODE IDENTIFIER STRING','statement',4,'p_statement_color_node','parser.pyc',50),
  ('statement -> DELETE1 NODE IDENTIFIER FROM IDENTIFIER','statement',5,'p_statement_delete_node','parser.pyc',54),
  ('statement -> SAVE GRAPH IDENTIFIER TO STRING','statement',5,'p_statement_save_graph','parser.pyc',58),
  ('statement -> LOAD GRAPH IDENTIFIER FROM STRING','statement',5,'p_statement_load_graph','parser.pyc',62),
  ('statement -> IF NODE IDENTIFIER IN IDENTIFIER THEN statement','statement',7,'p_statement_if_node','parser.pyc',66),
  ('statement -> IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement','statement',9,'p_statement_if_edge','parser.pyc',70),
  ('statement -> IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement','statement',9,'p_statement_if_path','parser.pyc',74),
  ('statement -> IF FIND CYCLE IN IDENTIFIER THEN statement','statement',7,'p_statement_if_cycle','parser.pyc',78),
  ('statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement','statement',15,'p_statement_if_edge_weight','parser.pyc',82),
  ('statement -> IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement','statement',8,'p_statement_if_not_node','parser.pyc',86),
  ('statement -> IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement','statement',10,'p_statement_if_not_edge','parser.pyc',90),
  ('statement -> IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement','statement',10,'p_statement_if_not_path','parser.pyc',94),
  ('statement -> IF NOT FIND CYCLE IN IDENTIFIER THEN statement','statement',8,'p_statement_if_not_cycle','parser.pyc',98),
  ('statement -> CLOSURE closure_type IN IDENTIFIER','statement',4,'p_statement_closure','parser.pyc',102),
  ('closure_type -> REFLEXIVE','closure_type',1,'p_closure_type','parser.pyc',106),
  ('closure_type -> SYMMETRIC','closure_type',1,'p_closure_type','parser.pyc',107),
  ('closure_type -> TRANSITIVE','closure_type',1,'p_closure_type','parser.pyc',108),
  ('statement -> LOOP NODE IDENTIFIER IN IDENTIFIER block','statement',6,'p_statement_loop_node','parser.pyc',112),
  ('statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block','statement',8,'p_statement_loop_edge','parser.pyc',116),
  ('statement -> LOOP FROM NUMBER TO NUMBER block','statement',6,'p_statement_loop_times','parser.pyc',120),
  ('statement -> LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block','statement',9,'p_statement_loop_from_to_in_graph','parser.pyc',124),
  ('statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block','statement',12,'p_statement_loop_edge_from_to_in_graph','parser.pyc',128),
  ('statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER','statement',11,'p_statement_add_weight','parser.pyc',133),
  ('block -> statement block','block',2,'p_block_multiple','parser.pyc',137),
  ('block -> statement','block',1,'p_block_single','parser.pyc',141),
]
