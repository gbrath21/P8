Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> NODE IDENTIFIER IN IDENTIFIER
Rule 2     statement -> GRAPH IDENTIFIER DIRECTED
Rule 3     statement -> GRAPH IDENTIFIER
Rule 4     statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
Rule 5     statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
Rule 6     statement -> VISUALIZE IDENTIFIER
Rule 7     statement -> FIND CYCLE IN IDENTIFIER
Rule 8     statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
Rule 9     statement -> FIND BFS FROM IDENTIFIER IN IDENTIFIER
Rule 10    statement -> FIND DFS FROM IDENTIFIER IN IDENTIFIER
Rule 11    statement -> FIND MST IN IDENTIFIER
Rule 12    statement -> COLOR NODE IDENTIFIER STRING
Rule 13    statement -> REMOVE NODE IDENTIFIER FROM IDENTIFIER
Rule 14    statement -> REMOVE EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER
Rule 15    statement -> SAVE GRAPH IDENTIFIER TO STRING
Rule 16    statement -> LOAD GRAPH IDENTIFIER FROM STRING
Rule 17    statement -> IF condition THEN statement
Rule 18    condition -> NODE IDENTIFIER IN IDENTIFIER
Rule 19    condition -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
Rule 20    condition -> PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
Rule 21    condition -> FIND CYCLE IN IDENTIFIER
Rule 22    condition -> NOT NODE IDENTIFIER IN IDENTIFIER
Rule 23    condition -> NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
Rule 24    condition -> NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
Rule 25    condition -> NOT FIND CYCLE IN IDENTIFIER
Rule 26    condition -> condition AND condition
Rule 27    condition -> condition OR condition
Rule 28    statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement
Rule 29    statement -> CLOSURE closure_type IN IDENTIFIER
Rule 30    closure_type -> REFLEXIVE
Rule 31    closure_type -> SYMMETRIC
Rule 32    closure_type -> TRANSITIVE
Rule 33    statement -> LOOP NODE IDENTIFIER IN IDENTIFIER block
Rule 34    statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block
Rule 35    statement -> LOOP FROM NUMBER TO NUMBER block
Rule 36    statement -> LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
Rule 37    statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
Rule 38    statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
Rule 39    block -> statement block
Rule 40    block -> statement

Terminals, with rules where they appear

ADD                  : 38
AND                  : 26
ARROW                : 4 5 14 19 23 28 34 37 38
BFS                  : 9
CLOSURE              : 29
COLOR                : 12
CYCLE                : 7 21 25
DFS                  : 10
DIRECTED             : 2
EDGE                 : 4 5 14 19 23 28 34 37 38
FIND                 : 7 8 9 10 11 21 25
FROM                 : 9 10 13 14 16 35 36 37
GRAPH                : 2 3 15 16
GREATER              : 28
IDENTIFIER           : 1 1 2 3 4 4 4 5 5 5 6 7 8 8 8 9 9 10 10 11 12 13 13 14 14 14 15 16 18 18 19 19 19 20 20 20 21 22 22 23 23 23 24 24 24 25 28 28 28 29 33 33 34 34 34 36 36 37 37 37 38 38 38
IF                   : 17 28
IN                   : 1 4 5 7 8 9 10 11 18 19 20 21 22 23 24 25 28 29 33 34 36 37 38
IS                   : 28
LOAD                 : 16
LOOP                 : 33 34 35 36 37
MST                  : 11
NODE                 : 1 12 13 18 22 33
NOT                  : 22 23 24 25
NUMBER               : 4 28 35 35 36 36 37 37 38
OF                   : 28 38
OR                   : 27
PATH                 : 8 20 24
REFLEXIVE            : 30
REMOVE               : 13 14
SAVE                 : 15
STRING               : 12 15 16
SYMMETRIC            : 31
THAN                 : 28
THEN                 : 17 28
TO                   : 8 15 20 24 35 36 37 38
TRANSITIVE           : 32
VISUALIZE            : 6
WEIGHT               : 4 28 38
error                : 

Nonterminals, with rules where they appear

block                : 33 34 35 36 37 39
closure_type         : 29
condition            : 17 26 26 27 27
statement            : 17 28 39 40 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . NODE IDENTIFIER IN IDENTIFIER
    (2) statement -> . GRAPH IDENTIFIER DIRECTED
    (3) statement -> . GRAPH IDENTIFIER
    (4) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (6) statement -> . VISUALIZE IDENTIFIER
    (7) statement -> . FIND CYCLE IN IDENTIFIER
    (8) statement -> . FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (9) statement -> . FIND BFS FROM IDENTIFIER IN IDENTIFIER
    (10) statement -> . FIND DFS FROM IDENTIFIER IN IDENTIFIER
    (11) statement -> . FIND MST IN IDENTIFIER
    (12) statement -> . COLOR NODE IDENTIFIER STRING
    (13) statement -> . REMOVE NODE IDENTIFIER FROM IDENTIFIER
    (14) statement -> . REMOVE EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER
    (15) statement -> . SAVE GRAPH IDENTIFIER TO STRING
    (16) statement -> . LOAD GRAPH IDENTIFIER FROM STRING
    (17) statement -> . IF condition THEN statement
    (28) statement -> . IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement
    (29) statement -> . CLOSURE closure_type IN IDENTIFIER
    (33) statement -> . LOOP NODE IDENTIFIER IN IDENTIFIER block
    (34) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block
    (35) statement -> . LOOP FROM NUMBER TO NUMBER block
    (36) statement -> . LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (37) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (38) statement -> . ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

    NODE            shift and go to state 2
    GRAPH           shift and go to state 3
    EDGE            shift and go to state 4
    VISUALIZE       shift and go to state 5
    FIND            shift and go to state 6
    COLOR           shift and go to state 7
    REMOVE          shift and go to state 8
    SAVE            shift and go to state 9
    LOAD            shift and go to state 10
    IF              shift and go to state 11
    CLOSURE         shift and go to state 12
    LOOP            shift and go to state 13
    ADD             shift and go to state 14

    statement                      shift and go to state 1

state 1

    (0) S' -> statement .



state 2

    (1) statement -> NODE . IDENTIFIER IN IDENTIFIER

    IDENTIFIER      shift and go to state 15


state 3

    (2) statement -> GRAPH . IDENTIFIER DIRECTED
    (3) statement -> GRAPH . IDENTIFIER

    IDENTIFIER      shift and go to state 16


state 4

    (4) statement -> EDGE . IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> EDGE . IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

    IDENTIFIER      shift and go to state 17


state 5

    (6) statement -> VISUALIZE . IDENTIFIER

    IDENTIFIER      shift and go to state 18


state 6

    (7) statement -> FIND . CYCLE IN IDENTIFIER
    (8) statement -> FIND . PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (9) statement -> FIND . BFS FROM IDENTIFIER IN IDENTIFIER
    (10) statement -> FIND . DFS FROM IDENTIFIER IN IDENTIFIER
    (11) statement -> FIND . MST IN IDENTIFIER

    CYCLE           shift and go to state 19
    PATH            shift and go to state 20
    BFS             shift and go to state 21
    DFS             shift and go to state 22
    MST             shift and go to state 23


state 7

    (12) statement -> COLOR . NODE IDENTIFIER STRING

    NODE            shift and go to state 24


state 8

    (13) statement -> REMOVE . NODE IDENTIFIER FROM IDENTIFIER
    (14) statement -> REMOVE . EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER

    NODE            shift and go to state 25
    EDGE            shift and go to state 26


state 9

    (15) statement -> SAVE . GRAPH IDENTIFIER TO STRING

    GRAPH           shift and go to state 27


state 10

    (16) statement -> LOAD . GRAPH IDENTIFIER FROM STRING

    GRAPH           shift and go to state 28


state 11

    (17) statement -> IF . condition THEN statement
    (28) statement -> IF . WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement
    (18) condition -> . NODE IDENTIFIER IN IDENTIFIER
    (19) condition -> . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (20) condition -> . PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (21) condition -> . FIND CYCLE IN IDENTIFIER
    (22) condition -> . NOT NODE IDENTIFIER IN IDENTIFIER
    (23) condition -> . NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (24) condition -> . NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (25) condition -> . NOT FIND CYCLE IN IDENTIFIER
    (26) condition -> . condition AND condition
    (27) condition -> . condition OR condition

    WEIGHT          shift and go to state 30
    NODE            shift and go to state 32
    EDGE            shift and go to state 31
    PATH            shift and go to state 33
    FIND            shift and go to state 34
    NOT             shift and go to state 35

    condition                      shift and go to state 29

state 12

    (29) statement -> CLOSURE . closure_type IN IDENTIFIER
    (30) closure_type -> . REFLEXIVE
    (31) closure_type -> . SYMMETRIC
    (32) closure_type -> . TRANSITIVE

    REFLEXIVE       shift and go to state 37
    SYMMETRIC       shift and go to state 38
    TRANSITIVE      shift and go to state 39

    closure_type                   shift and go to state 36

state 13

    (33) statement -> LOOP . NODE IDENTIFIER IN IDENTIFIER block
    (34) statement -> LOOP . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block
    (35) statement -> LOOP . FROM NUMBER TO NUMBER block
    (36) statement -> LOOP . IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (37) statement -> LOOP . EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block

    NODE            shift and go to state 40
    EDGE            shift and go to state 42
    FROM            shift and go to state 43
    IDENTIFIER      shift and go to state 41


state 14

    (38) statement -> ADD . NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

    NUMBER          shift and go to state 44


state 15

    (1) statement -> NODE IDENTIFIER . IN IDENTIFIER

    IN              shift and go to state 45


state 16

    (2) statement -> GRAPH IDENTIFIER . DIRECTED
    (3) statement -> GRAPH IDENTIFIER .

    DIRECTED        shift and go to state 46
    $end            reduce using rule 3 (statement -> GRAPH IDENTIFIER .)
    NODE            reduce using rule 3 (statement -> GRAPH IDENTIFIER .)
    GRAPH           reduce using rule 3 (statement -> GRAPH IDENTIFIER .)
    EDGE            reduce using rule 3 (statement -> GRAPH IDENTIFIER .)
    VISUALIZE       reduce using rule 3 (statement -> GRAPH IDENTIFIER .)
    FIND            reduce using rule 3 (statement -> GRAPH IDENTIFIER .)
    COLOR           reduce using rule 3 (statement -> GRAPH IDENTIFIER .)
    REMOVE          reduce using rule 3 (statement -> GRAPH IDENTIFIER .)
    SAVE            reduce using rule 3 (statement -> GRAPH IDENTIFIER .)
    LOAD            reduce using rule 3 (statement -> GRAPH IDENTIFIER .)
    IF              reduce using rule 3 (statement -> GRAPH IDENTIFIER .)
    CLOSURE         reduce using rule 3 (statement -> GRAPH IDENTIFIER .)
    LOOP            reduce using rule 3 (statement -> GRAPH IDENTIFIER .)
    ADD             reduce using rule 3 (statement -> GRAPH IDENTIFIER .)


state 17

    (4) statement -> EDGE IDENTIFIER . ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> EDGE IDENTIFIER . ARROW IDENTIFIER IN IDENTIFIER

    ARROW           shift and go to state 47


state 18

    (6) statement -> VISUALIZE IDENTIFIER .

    $end            reduce using rule 6 (statement -> VISUALIZE IDENTIFIER .)
    NODE            reduce using rule 6 (statement -> VISUALIZE IDENTIFIER .)
    GRAPH           reduce using rule 6 (statement -> VISUALIZE IDENTIFIER .)
    EDGE            reduce using rule 6 (statement -> VISUALIZE IDENTIFIER .)
    VISUALIZE       reduce using rule 6 (statement -> VISUALIZE IDENTIFIER .)
    FIND            reduce using rule 6 (statement -> VISUALIZE IDENTIFIER .)
    COLOR           reduce using rule 6 (statement -> VISUALIZE IDENTIFIER .)
    REMOVE          reduce using rule 6 (statement -> VISUALIZE IDENTIFIER .)
    SAVE            reduce using rule 6 (statement -> VISUALIZE IDENTIFIER .)
    LOAD            reduce using rule 6 (statement -> VISUALIZE IDENTIFIER .)
    IF              reduce using rule 6 (statement -> VISUALIZE IDENTIFIER .)
    CLOSURE         reduce using rule 6 (statement -> VISUALIZE IDENTIFIER .)
    LOOP            reduce using rule 6 (statement -> VISUALIZE IDENTIFIER .)
    ADD             reduce using rule 6 (statement -> VISUALIZE IDENTIFIER .)


state 19

    (7) statement -> FIND CYCLE . IN IDENTIFIER

    IN              shift and go to state 48


state 20

    (8) statement -> FIND PATH . IDENTIFIER TO IDENTIFIER IN IDENTIFIER

    IDENTIFIER      shift and go to state 49


state 21

    (9) statement -> FIND BFS . FROM IDENTIFIER IN IDENTIFIER

    FROM            shift and go to state 50


state 22

    (10) statement -> FIND DFS . FROM IDENTIFIER IN IDENTIFIER

    FROM            shift and go to state 51


state 23

    (11) statement -> FIND MST . IN IDENTIFIER

    IN              shift and go to state 52


state 24

    (12) statement -> COLOR NODE . IDENTIFIER STRING

    IDENTIFIER      shift and go to state 53


state 25

    (13) statement -> REMOVE NODE . IDENTIFIER FROM IDENTIFIER

    IDENTIFIER      shift and go to state 54


state 26

    (14) statement -> REMOVE EDGE . IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER

    IDENTIFIER      shift and go to state 55


state 27

    (15) statement -> SAVE GRAPH . IDENTIFIER TO STRING

    IDENTIFIER      shift and go to state 56


state 28

    (16) statement -> LOAD GRAPH . IDENTIFIER FROM STRING

    IDENTIFIER      shift and go to state 57


state 29

    (17) statement -> IF condition . THEN statement
    (26) condition -> condition . AND condition
    (27) condition -> condition . OR condition

    THEN            shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 30

    (28) statement -> IF WEIGHT . OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement

    OF              shift and go to state 61


state 31

    (19) condition -> EDGE . IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

    IDENTIFIER      shift and go to state 62


state 32

    (18) condition -> NODE . IDENTIFIER IN IDENTIFIER

    IDENTIFIER      shift and go to state 63


state 33

    (20) condition -> PATH . IDENTIFIER TO IDENTIFIER IN IDENTIFIER

    IDENTIFIER      shift and go to state 64


state 34

    (21) condition -> FIND . CYCLE IN IDENTIFIER

    CYCLE           shift and go to state 65


state 35

    (22) condition -> NOT . NODE IDENTIFIER IN IDENTIFIER
    (23) condition -> NOT . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (24) condition -> NOT . PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (25) condition -> NOT . FIND CYCLE IN IDENTIFIER

    NODE            shift and go to state 66
    EDGE            shift and go to state 67
    PATH            shift and go to state 68
    FIND            shift and go to state 69


state 36

    (29) statement -> CLOSURE closure_type . IN IDENTIFIER

    IN              shift and go to state 70


state 37

    (30) closure_type -> REFLEXIVE .

    IN              reduce using rule 30 (closure_type -> REFLEXIVE .)


state 38

    (31) closure_type -> SYMMETRIC .

    IN              reduce using rule 31 (closure_type -> SYMMETRIC .)


state 39

    (32) closure_type -> TRANSITIVE .

    IN              reduce using rule 32 (closure_type -> TRANSITIVE .)


state 40

    (33) statement -> LOOP NODE . IDENTIFIER IN IDENTIFIER block

    IDENTIFIER      shift and go to state 71


state 41

    (36) statement -> LOOP IDENTIFIER . FROM NUMBER TO NUMBER IN IDENTIFIER block

    FROM            shift and go to state 72


state 42

    (34) statement -> LOOP EDGE . IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block
    (37) statement -> LOOP EDGE . IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block

    IDENTIFIER      shift and go to state 73


state 43

    (35) statement -> LOOP FROM . NUMBER TO NUMBER block

    NUMBER          shift and go to state 74


state 44

    (38) statement -> ADD NUMBER . TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

    TO              shift and go to state 75


state 45

    (1) statement -> NODE IDENTIFIER IN . IDENTIFIER

    IDENTIFIER      shift and go to state 76


state 46

    (2) statement -> GRAPH IDENTIFIER DIRECTED .

    $end            reduce using rule 2 (statement -> GRAPH IDENTIFIER DIRECTED .)
    NODE            reduce using rule 2 (statement -> GRAPH IDENTIFIER DIRECTED .)
    GRAPH           reduce using rule 2 (statement -> GRAPH IDENTIFIER DIRECTED .)
    EDGE            reduce using rule 2 (statement -> GRAPH IDENTIFIER DIRECTED .)
    VISUALIZE       reduce using rule 2 (statement -> GRAPH IDENTIFIER DIRECTED .)
    FIND            reduce using rule 2 (statement -> GRAPH IDENTIFIER DIRECTED .)
    COLOR           reduce using rule 2 (statement -> GRAPH IDENTIFIER DIRECTED .)
    REMOVE          reduce using rule 2 (statement -> GRAPH IDENTIFIER DIRECTED .)
    SAVE            reduce using rule 2 (statement -> GRAPH IDENTIFIER DIRECTED .)
    LOAD            reduce using rule 2 (statement -> GRAPH IDENTIFIER DIRECTED .)
    IF              reduce using rule 2 (statement -> GRAPH IDENTIFIER DIRECTED .)
    CLOSURE         reduce using rule 2 (statement -> GRAPH IDENTIFIER DIRECTED .)
    LOOP            reduce using rule 2 (statement -> GRAPH IDENTIFIER DIRECTED .)
    ADD             reduce using rule 2 (statement -> GRAPH IDENTIFIER DIRECTED .)


state 47

    (4) statement -> EDGE IDENTIFIER ARROW . IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> EDGE IDENTIFIER ARROW . IDENTIFIER IN IDENTIFIER

    IDENTIFIER      shift and go to state 77


state 48

    (7) statement -> FIND CYCLE IN . IDENTIFIER

    IDENTIFIER      shift and go to state 78


state 49

    (8) statement -> FIND PATH IDENTIFIER . TO IDENTIFIER IN IDENTIFIER

    TO              shift and go to state 79


state 50

    (9) statement -> FIND BFS FROM . IDENTIFIER IN IDENTIFIER

    IDENTIFIER      shift and go to state 80


state 51

    (10) statement -> FIND DFS FROM . IDENTIFIER IN IDENTIFIER

    IDENTIFIER      shift and go to state 81


state 52

    (11) statement -> FIND MST IN . IDENTIFIER

    IDENTIFIER      shift and go to state 82


state 53

    (12) statement -> COLOR NODE IDENTIFIER . STRING

    STRING          shift and go to state 83


state 54

    (13) statement -> REMOVE NODE IDENTIFIER . FROM IDENTIFIER

    FROM            shift and go to state 84


state 55

    (14) statement -> REMOVE EDGE IDENTIFIER . ARROW IDENTIFIER FROM IDENTIFIER

    ARROW           shift and go to state 85


state 56

    (15) statement -> SAVE GRAPH IDENTIFIER . TO STRING

    TO              shift and go to state 86


state 57

    (16) statement -> LOAD GRAPH IDENTIFIER . FROM STRING

    FROM            shift and go to state 87


state 58

    (17) statement -> IF condition THEN . statement
    (1) statement -> . NODE IDENTIFIER IN IDENTIFIER
    (2) statement -> . GRAPH IDENTIFIER DIRECTED
    (3) statement -> . GRAPH IDENTIFIER
    (4) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (6) statement -> . VISUALIZE IDENTIFIER
    (7) statement -> . FIND CYCLE IN IDENTIFIER
    (8) statement -> . FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (9) statement -> . FIND BFS FROM IDENTIFIER IN IDENTIFIER
    (10) statement -> . FIND DFS FROM IDENTIFIER IN IDENTIFIER
    (11) statement -> . FIND MST IN IDENTIFIER
    (12) statement -> . COLOR NODE IDENTIFIER STRING
    (13) statement -> . REMOVE NODE IDENTIFIER FROM IDENTIFIER
    (14) statement -> . REMOVE EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER
    (15) statement -> . SAVE GRAPH IDENTIFIER TO STRING
    (16) statement -> . LOAD GRAPH IDENTIFIER FROM STRING
    (17) statement -> . IF condition THEN statement
    (28) statement -> . IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement
    (29) statement -> . CLOSURE closure_type IN IDENTIFIER
    (33) statement -> . LOOP NODE IDENTIFIER IN IDENTIFIER block
    (34) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block
    (35) statement -> . LOOP FROM NUMBER TO NUMBER block
    (36) statement -> . LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (37) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (38) statement -> . ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

    NODE            shift and go to state 2
    GRAPH           shift and go to state 3
    EDGE            shift and go to state 4
    VISUALIZE       shift and go to state 5
    FIND            shift and go to state 6
    COLOR           shift and go to state 7
    REMOVE          shift and go to state 8
    SAVE            shift and go to state 9
    LOAD            shift and go to state 10
    IF              shift and go to state 11
    CLOSURE         shift and go to state 12
    LOOP            shift and go to state 13
    ADD             shift and go to state 14

    statement                      shift and go to state 88

state 59

    (26) condition -> condition AND . condition
    (18) condition -> . NODE IDENTIFIER IN IDENTIFIER
    (19) condition -> . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (20) condition -> . PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (21) condition -> . FIND CYCLE IN IDENTIFIER
    (22) condition -> . NOT NODE IDENTIFIER IN IDENTIFIER
    (23) condition -> . NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (24) condition -> . NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (25) condition -> . NOT FIND CYCLE IN IDENTIFIER
    (26) condition -> . condition AND condition
    (27) condition -> . condition OR condition

    NODE            shift and go to state 32
    EDGE            shift and go to state 31
    PATH            shift and go to state 33
    FIND            shift and go to state 34
    NOT             shift and go to state 35

    condition                      shift and go to state 89

state 60

    (27) condition -> condition OR . condition
    (18) condition -> . NODE IDENTIFIER IN IDENTIFIER
    (19) condition -> . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (20) condition -> . PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (21) condition -> . FIND CYCLE IN IDENTIFIER
    (22) condition -> . NOT NODE IDENTIFIER IN IDENTIFIER
    (23) condition -> . NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (24) condition -> . NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (25) condition -> . NOT FIND CYCLE IN IDENTIFIER
    (26) condition -> . condition AND condition
    (27) condition -> . condition OR condition

    NODE            shift and go to state 32
    EDGE            shift and go to state 31
    PATH            shift and go to state 33
    FIND            shift and go to state 34
    NOT             shift and go to state 35

    condition                      shift and go to state 90

state 61

    (28) statement -> IF WEIGHT OF . EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement

    EDGE            shift and go to state 91


state 62

    (19) condition -> EDGE IDENTIFIER . ARROW IDENTIFIER IN IDENTIFIER

    ARROW           shift and go to state 92


state 63

    (18) condition -> NODE IDENTIFIER . IN IDENTIFIER

    IN              shift and go to state 93


state 64

    (20) condition -> PATH IDENTIFIER . TO IDENTIFIER IN IDENTIFIER

    TO              shift and go to state 94


state 65

    (21) condition -> FIND CYCLE . IN IDENTIFIER

    IN              shift and go to state 95


state 66

    (22) condition -> NOT NODE . IDENTIFIER IN IDENTIFIER

    IDENTIFIER      shift and go to state 96


state 67

    (23) condition -> NOT EDGE . IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

    IDENTIFIER      shift and go to state 97


state 68

    (24) condition -> NOT PATH . IDENTIFIER TO IDENTIFIER IN IDENTIFIER

    IDENTIFIER      shift and go to state 98


state 69

    (25) condition -> NOT FIND . CYCLE IN IDENTIFIER

    CYCLE           shift and go to state 99


state 70

    (29) statement -> CLOSURE closure_type IN . IDENTIFIER

    IDENTIFIER      shift and go to state 100


state 71

    (33) statement -> LOOP NODE IDENTIFIER . IN IDENTIFIER block

    IN              shift and go to state 101


state 72

    (36) statement -> LOOP IDENTIFIER FROM . NUMBER TO NUMBER IN IDENTIFIER block

    NUMBER          shift and go to state 102


state 73

    (34) statement -> LOOP EDGE IDENTIFIER . ARROW IDENTIFIER IN IDENTIFIER block
    (37) statement -> LOOP EDGE IDENTIFIER . ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block

    ARROW           shift and go to state 103


state 74

    (35) statement -> LOOP FROM NUMBER . TO NUMBER block

    TO              shift and go to state 104


state 75

    (38) statement -> ADD NUMBER TO . WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

    WEIGHT          shift and go to state 105


state 76

    (1) statement -> NODE IDENTIFIER IN IDENTIFIER .

    $end            reduce using rule 1 (statement -> NODE IDENTIFIER IN IDENTIFIER .)
    NODE            reduce using rule 1 (statement -> NODE IDENTIFIER IN IDENTIFIER .)
    GRAPH           reduce using rule 1 (statement -> NODE IDENTIFIER IN IDENTIFIER .)
    EDGE            reduce using rule 1 (statement -> NODE IDENTIFIER IN IDENTIFIER .)
    VISUALIZE       reduce using rule 1 (statement -> NODE IDENTIFIER IN IDENTIFIER .)
    FIND            reduce using rule 1 (statement -> NODE IDENTIFIER IN IDENTIFIER .)
    COLOR           reduce using rule 1 (statement -> NODE IDENTIFIER IN IDENTIFIER .)
    REMOVE          reduce using rule 1 (statement -> NODE IDENTIFIER IN IDENTIFIER .)
    SAVE            reduce using rule 1 (statement -> NODE IDENTIFIER IN IDENTIFIER .)
    LOAD            reduce using rule 1 (statement -> NODE IDENTIFIER IN IDENTIFIER .)
    IF              reduce using rule 1 (statement -> NODE IDENTIFIER IN IDENTIFIER .)
    CLOSURE         reduce using rule 1 (statement -> NODE IDENTIFIER IN IDENTIFIER .)
    LOOP            reduce using rule 1 (statement -> NODE IDENTIFIER IN IDENTIFIER .)
    ADD             reduce using rule 1 (statement -> NODE IDENTIFIER IN IDENTIFIER .)


state 77

    (4) statement -> EDGE IDENTIFIER ARROW IDENTIFIER . WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> EDGE IDENTIFIER ARROW IDENTIFIER . IN IDENTIFIER

    WEIGHT          shift and go to state 106
    IN              shift and go to state 107


state 78

    (7) statement -> FIND CYCLE IN IDENTIFIER .

    $end            reduce using rule 7 (statement -> FIND CYCLE IN IDENTIFIER .)
    NODE            reduce using rule 7 (statement -> FIND CYCLE IN IDENTIFIER .)
    GRAPH           reduce using rule 7 (statement -> FIND CYCLE IN IDENTIFIER .)
    EDGE            reduce using rule 7 (statement -> FIND CYCLE IN IDENTIFIER .)
    VISUALIZE       reduce using rule 7 (statement -> FIND CYCLE IN IDENTIFIER .)
    FIND            reduce using rule 7 (statement -> FIND CYCLE IN IDENTIFIER .)
    COLOR           reduce using rule 7 (statement -> FIND CYCLE IN IDENTIFIER .)
    REMOVE          reduce using rule 7 (statement -> FIND CYCLE IN IDENTIFIER .)
    SAVE            reduce using rule 7 (statement -> FIND CYCLE IN IDENTIFIER .)
    LOAD            reduce using rule 7 (statement -> FIND CYCLE IN IDENTIFIER .)
    IF              reduce using rule 7 (statement -> FIND CYCLE IN IDENTIFIER .)
    CLOSURE         reduce using rule 7 (statement -> FIND CYCLE IN IDENTIFIER .)
    LOOP            reduce using rule 7 (statement -> FIND CYCLE IN IDENTIFIER .)
    ADD             reduce using rule 7 (statement -> FIND CYCLE IN IDENTIFIER .)


state 79

    (8) statement -> FIND PATH IDENTIFIER TO . IDENTIFIER IN IDENTIFIER

    IDENTIFIER      shift and go to state 108


state 80

    (9) statement -> FIND BFS FROM IDENTIFIER . IN IDENTIFIER

    IN              shift and go to state 109


state 81

    (10) statement -> FIND DFS FROM IDENTIFIER . IN IDENTIFIER

    IN              shift and go to state 110


state 82

    (11) statement -> FIND MST IN IDENTIFIER .

    $end            reduce using rule 11 (statement -> FIND MST IN IDENTIFIER .)
    NODE            reduce using rule 11 (statement -> FIND MST IN IDENTIFIER .)
    GRAPH           reduce using rule 11 (statement -> FIND MST IN IDENTIFIER .)
    EDGE            reduce using rule 11 (statement -> FIND MST IN IDENTIFIER .)
    VISUALIZE       reduce using rule 11 (statement -> FIND MST IN IDENTIFIER .)
    FIND            reduce using rule 11 (statement -> FIND MST IN IDENTIFIER .)
    COLOR           reduce using rule 11 (statement -> FIND MST IN IDENTIFIER .)
    REMOVE          reduce using rule 11 (statement -> FIND MST IN IDENTIFIER .)
    SAVE            reduce using rule 11 (statement -> FIND MST IN IDENTIFIER .)
    LOAD            reduce using rule 11 (statement -> FIND MST IN IDENTIFIER .)
    IF              reduce using rule 11 (statement -> FIND MST IN IDENTIFIER .)
    CLOSURE         reduce using rule 11 (statement -> FIND MST IN IDENTIFIER .)
    LOOP            reduce using rule 11 (statement -> FIND MST IN IDENTIFIER .)
    ADD             reduce using rule 11 (statement -> FIND MST IN IDENTIFIER .)


state 83

    (12) statement -> COLOR NODE IDENTIFIER STRING .

    $end            reduce using rule 12 (statement -> COLOR NODE IDENTIFIER STRING .)
    NODE            reduce using rule 12 (statement -> COLOR NODE IDENTIFIER STRING .)
    GRAPH           reduce using rule 12 (statement -> COLOR NODE IDENTIFIER STRING .)
    EDGE            reduce using rule 12 (statement -> COLOR NODE IDENTIFIER STRING .)
    VISUALIZE       reduce using rule 12 (statement -> COLOR NODE IDENTIFIER STRING .)
    FIND            reduce using rule 12 (statement -> COLOR NODE IDENTIFIER STRING .)
    COLOR           reduce using rule 12 (statement -> COLOR NODE IDENTIFIER STRING .)
    REMOVE          reduce using rule 12 (statement -> COLOR NODE IDENTIFIER STRING .)
    SAVE            reduce using rule 12 (statement -> COLOR NODE IDENTIFIER STRING .)
    LOAD            reduce using rule 12 (statement -> COLOR NODE IDENTIFIER STRING .)
    IF              reduce using rule 12 (statement -> COLOR NODE IDENTIFIER STRING .)
    CLOSURE         reduce using rule 12 (statement -> COLOR NODE IDENTIFIER STRING .)
    LOOP            reduce using rule 12 (statement -> COLOR NODE IDENTIFIER STRING .)
    ADD             reduce using rule 12 (statement -> COLOR NODE IDENTIFIER STRING .)


state 84

    (13) statement -> REMOVE NODE IDENTIFIER FROM . IDENTIFIER

    IDENTIFIER      shift and go to state 111


state 85

    (14) statement -> REMOVE EDGE IDENTIFIER ARROW . IDENTIFIER FROM IDENTIFIER

    IDENTIFIER      shift and go to state 112


state 86

    (15) statement -> SAVE GRAPH IDENTIFIER TO . STRING

    STRING          shift and go to state 113


state 87

    (16) statement -> LOAD GRAPH IDENTIFIER FROM . STRING

    STRING          shift and go to state 114


state 88

    (17) statement -> IF condition THEN statement .

    $end            reduce using rule 17 (statement -> IF condition THEN statement .)
    NODE            reduce using rule 17 (statement -> IF condition THEN statement .)
    GRAPH           reduce using rule 17 (statement -> IF condition THEN statement .)
    EDGE            reduce using rule 17 (statement -> IF condition THEN statement .)
    VISUALIZE       reduce using rule 17 (statement -> IF condition THEN statement .)
    FIND            reduce using rule 17 (statement -> IF condition THEN statement .)
    COLOR           reduce using rule 17 (statement -> IF condition THEN statement .)
    REMOVE          reduce using rule 17 (statement -> IF condition THEN statement .)
    SAVE            reduce using rule 17 (statement -> IF condition THEN statement .)
    LOAD            reduce using rule 17 (statement -> IF condition THEN statement .)
    IF              reduce using rule 17 (statement -> IF condition THEN statement .)
    CLOSURE         reduce using rule 17 (statement -> IF condition THEN statement .)
    LOOP            reduce using rule 17 (statement -> IF condition THEN statement .)
    ADD             reduce using rule 17 (statement -> IF condition THEN statement .)


state 89

    (26) condition -> condition AND condition .
    (26) condition -> condition . AND condition
    (27) condition -> condition . OR condition

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 26 (condition -> condition AND condition .)
    AND             shift and go to state 59
    OR              shift and go to state 60

  ! AND             [ reduce using rule 26 (condition -> condition AND condition .) ]
  ! OR              [ reduce using rule 26 (condition -> condition AND condition .) ]


state 90

    (27) condition -> condition OR condition .
    (26) condition -> condition . AND condition
    (27) condition -> condition . OR condition

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 27 (condition -> condition OR condition .)
    AND             shift and go to state 59
    OR              shift and go to state 60

  ! AND             [ reduce using rule 27 (condition -> condition OR condition .) ]
  ! OR              [ reduce using rule 27 (condition -> condition OR condition .) ]


state 91

    (28) statement -> IF WEIGHT OF EDGE . IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 115


state 92

    (19) condition -> EDGE IDENTIFIER ARROW . IDENTIFIER IN IDENTIFIER

    IDENTIFIER      shift and go to state 116


state 93

    (18) condition -> NODE IDENTIFIER IN . IDENTIFIER

    IDENTIFIER      shift and go to state 117


state 94

    (20) condition -> PATH IDENTIFIER TO . IDENTIFIER IN IDENTIFIER

    IDENTIFIER      shift and go to state 118


state 95

    (21) condition -> FIND CYCLE IN . IDENTIFIER

    IDENTIFIER      shift and go to state 119


state 96

    (22) condition -> NOT NODE IDENTIFIER . IN IDENTIFIER

    IN              shift and go to state 120


state 97

    (23) condition -> NOT EDGE IDENTIFIER . ARROW IDENTIFIER IN IDENTIFIER

    ARROW           shift and go to state 121


state 98

    (24) condition -> NOT PATH IDENTIFIER . TO IDENTIFIER IN IDENTIFIER

    TO              shift and go to state 122


state 99

    (25) condition -> NOT FIND CYCLE . IN IDENTIFIER

    IN              shift and go to state 123


state 100

    (29) statement -> CLOSURE closure_type IN IDENTIFIER .

    $end            reduce using rule 29 (statement -> CLOSURE closure_type IN IDENTIFIER .)
    NODE            reduce using rule 29 (statement -> CLOSURE closure_type IN IDENTIFIER .)
    GRAPH           reduce using rule 29 (statement -> CLOSURE closure_type IN IDENTIFIER .)
    EDGE            reduce using rule 29 (statement -> CLOSURE closure_type IN IDENTIFIER .)
    VISUALIZE       reduce using rule 29 (statement -> CLOSURE closure_type IN IDENTIFIER .)
    FIND            reduce using rule 29 (statement -> CLOSURE closure_type IN IDENTIFIER .)
    COLOR           reduce using rule 29 (statement -> CLOSURE closure_type IN IDENTIFIER .)
    REMOVE          reduce using rule 29 (statement -> CLOSURE closure_type IN IDENTIFIER .)
    SAVE            reduce using rule 29 (statement -> CLOSURE closure_type IN IDENTIFIER .)
    LOAD            reduce using rule 29 (statement -> CLOSURE closure_type IN IDENTIFIER .)
    IF              reduce using rule 29 (statement -> CLOSURE closure_type IN IDENTIFIER .)
    CLOSURE         reduce using rule 29 (statement -> CLOSURE closure_type IN IDENTIFIER .)
    LOOP            reduce using rule 29 (statement -> CLOSURE closure_type IN IDENTIFIER .)
    ADD             reduce using rule 29 (statement -> CLOSURE closure_type IN IDENTIFIER .)


state 101

    (33) statement -> LOOP NODE IDENTIFIER IN . IDENTIFIER block

    IDENTIFIER      shift and go to state 124


state 102

    (36) statement -> LOOP IDENTIFIER FROM NUMBER . TO NUMBER IN IDENTIFIER block

    TO              shift and go to state 125


state 103

    (34) statement -> LOOP EDGE IDENTIFIER ARROW . IDENTIFIER IN IDENTIFIER block
    (37) statement -> LOOP EDGE IDENTIFIER ARROW . IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block

    IDENTIFIER      shift and go to state 126


state 104

    (35) statement -> LOOP FROM NUMBER TO . NUMBER block

    NUMBER          shift and go to state 127


state 105

    (38) statement -> ADD NUMBER TO WEIGHT . OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

    OF              shift and go to state 128


state 106

    (4) statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT . NUMBER IN IDENTIFIER

    NUMBER          shift and go to state 129


state 107

    (5) statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN . IDENTIFIER

    IDENTIFIER      shift and go to state 130


state 108

    (8) statement -> FIND PATH IDENTIFIER TO IDENTIFIER . IN IDENTIFIER

    IN              shift and go to state 131


state 109

    (9) statement -> FIND BFS FROM IDENTIFIER IN . IDENTIFIER

    IDENTIFIER      shift and go to state 132


state 110

    (10) statement -> FIND DFS FROM IDENTIFIER IN . IDENTIFIER

    IDENTIFIER      shift and go to state 133


state 111

    (13) statement -> REMOVE NODE IDENTIFIER FROM IDENTIFIER .

    $end            reduce using rule 13 (statement -> REMOVE NODE IDENTIFIER FROM IDENTIFIER .)
    NODE            reduce using rule 13 (statement -> REMOVE NODE IDENTIFIER FROM IDENTIFIER .)
    GRAPH           reduce using rule 13 (statement -> REMOVE NODE IDENTIFIER FROM IDENTIFIER .)
    EDGE            reduce using rule 13 (statement -> REMOVE NODE IDENTIFIER FROM IDENTIFIER .)
    VISUALIZE       reduce using rule 13 (statement -> REMOVE NODE IDENTIFIER FROM IDENTIFIER .)
    FIND            reduce using rule 13 (statement -> REMOVE NODE IDENTIFIER FROM IDENTIFIER .)
    COLOR           reduce using rule 13 (statement -> REMOVE NODE IDENTIFIER FROM IDENTIFIER .)
    REMOVE          reduce using rule 13 (statement -> REMOVE NODE IDENTIFIER FROM IDENTIFIER .)
    SAVE            reduce using rule 13 (statement -> REMOVE NODE IDENTIFIER FROM IDENTIFIER .)
    LOAD            reduce using rule 13 (statement -> REMOVE NODE IDENTIFIER FROM IDENTIFIER .)
    IF              reduce using rule 13 (statement -> REMOVE NODE IDENTIFIER FROM IDENTIFIER .)
    CLOSURE         reduce using rule 13 (statement -> REMOVE NODE IDENTIFIER FROM IDENTIFIER .)
    LOOP            reduce using rule 13 (statement -> REMOVE NODE IDENTIFIER FROM IDENTIFIER .)
    ADD             reduce using rule 13 (statement -> REMOVE NODE IDENTIFIER FROM IDENTIFIER .)


state 112

    (14) statement -> REMOVE EDGE IDENTIFIER ARROW IDENTIFIER . FROM IDENTIFIER

    FROM            shift and go to state 134


state 113

    (15) statement -> SAVE GRAPH IDENTIFIER TO STRING .

    $end            reduce using rule 15 (statement -> SAVE GRAPH IDENTIFIER TO STRING .)
    NODE            reduce using rule 15 (statement -> SAVE GRAPH IDENTIFIER TO STRING .)
    GRAPH           reduce using rule 15 (statement -> SAVE GRAPH IDENTIFIER TO STRING .)
    EDGE            reduce using rule 15 (statement -> SAVE GRAPH IDENTIFIER TO STRING .)
    VISUALIZE       reduce using rule 15 (statement -> SAVE GRAPH IDENTIFIER TO STRING .)
    FIND            reduce using rule 15 (statement -> SAVE GRAPH IDENTIFIER TO STRING .)
    COLOR           reduce using rule 15 (statement -> SAVE GRAPH IDENTIFIER TO STRING .)
    REMOVE          reduce using rule 15 (statement -> SAVE GRAPH IDENTIFIER TO STRING .)
    SAVE            reduce using rule 15 (statement -> SAVE GRAPH IDENTIFIER TO STRING .)
    LOAD            reduce using rule 15 (statement -> SAVE GRAPH IDENTIFIER TO STRING .)
    IF              reduce using rule 15 (statement -> SAVE GRAPH IDENTIFIER TO STRING .)
    CLOSURE         reduce using rule 15 (statement -> SAVE GRAPH IDENTIFIER TO STRING .)
    LOOP            reduce using rule 15 (statement -> SAVE GRAPH IDENTIFIER TO STRING .)
    ADD             reduce using rule 15 (statement -> SAVE GRAPH IDENTIFIER TO STRING .)


state 114

    (16) statement -> LOAD GRAPH IDENTIFIER FROM STRING .

    $end            reduce using rule 16 (statement -> LOAD GRAPH IDENTIFIER FROM STRING .)
    NODE            reduce using rule 16 (statement -> LOAD GRAPH IDENTIFIER FROM STRING .)
    GRAPH           reduce using rule 16 (statement -> LOAD GRAPH IDENTIFIER FROM STRING .)
    EDGE            reduce using rule 16 (statement -> LOAD GRAPH IDENTIFIER FROM STRING .)
    VISUALIZE       reduce using rule 16 (statement -> LOAD GRAPH IDENTIFIER FROM STRING .)
    FIND            reduce using rule 16 (statement -> LOAD GRAPH IDENTIFIER FROM STRING .)
    COLOR           reduce using rule 16 (statement -> LOAD GRAPH IDENTIFIER FROM STRING .)
    REMOVE          reduce using rule 16 (statement -> LOAD GRAPH IDENTIFIER FROM STRING .)
    SAVE            reduce using rule 16 (statement -> LOAD GRAPH IDENTIFIER FROM STRING .)
    LOAD            reduce using rule 16 (statement -> LOAD GRAPH IDENTIFIER FROM STRING .)
    IF              reduce using rule 16 (statement -> LOAD GRAPH IDENTIFIER FROM STRING .)
    CLOSURE         reduce using rule 16 (statement -> LOAD GRAPH IDENTIFIER FROM STRING .)
    LOOP            reduce using rule 16 (statement -> LOAD GRAPH IDENTIFIER FROM STRING .)
    ADD             reduce using rule 16 (statement -> LOAD GRAPH IDENTIFIER FROM STRING .)


state 115

    (28) statement -> IF WEIGHT OF EDGE IDENTIFIER . ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement

    ARROW           shift and go to state 135


state 116

    (19) condition -> EDGE IDENTIFIER ARROW IDENTIFIER . IN IDENTIFIER

    IN              shift and go to state 136


state 117

    (18) condition -> NODE IDENTIFIER IN IDENTIFIER .

    THEN            reduce using rule 18 (condition -> NODE IDENTIFIER IN IDENTIFIER .)
    AND             reduce using rule 18 (condition -> NODE IDENTIFIER IN IDENTIFIER .)
    OR              reduce using rule 18 (condition -> NODE IDENTIFIER IN IDENTIFIER .)


state 118

    (20) condition -> PATH IDENTIFIER TO IDENTIFIER . IN IDENTIFIER

    IN              shift and go to state 137


state 119

    (21) condition -> FIND CYCLE IN IDENTIFIER .

    THEN            reduce using rule 21 (condition -> FIND CYCLE IN IDENTIFIER .)
    AND             reduce using rule 21 (condition -> FIND CYCLE IN IDENTIFIER .)
    OR              reduce using rule 21 (condition -> FIND CYCLE IN IDENTIFIER .)


state 120

    (22) condition -> NOT NODE IDENTIFIER IN . IDENTIFIER

    IDENTIFIER      shift and go to state 138


state 121

    (23) condition -> NOT EDGE IDENTIFIER ARROW . IDENTIFIER IN IDENTIFIER

    IDENTIFIER      shift and go to state 139


state 122

    (24) condition -> NOT PATH IDENTIFIER TO . IDENTIFIER IN IDENTIFIER

    IDENTIFIER      shift and go to state 140


state 123

    (25) condition -> NOT FIND CYCLE IN . IDENTIFIER

    IDENTIFIER      shift and go to state 141


state 124

    (33) statement -> LOOP NODE IDENTIFIER IN IDENTIFIER . block
    (39) block -> . statement block
    (40) block -> . statement
    (1) statement -> . NODE IDENTIFIER IN IDENTIFIER
    (2) statement -> . GRAPH IDENTIFIER DIRECTED
    (3) statement -> . GRAPH IDENTIFIER
    (4) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (6) statement -> . VISUALIZE IDENTIFIER
    (7) statement -> . FIND CYCLE IN IDENTIFIER
    (8) statement -> . FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (9) statement -> . FIND BFS FROM IDENTIFIER IN IDENTIFIER
    (10) statement -> . FIND DFS FROM IDENTIFIER IN IDENTIFIER
    (11) statement -> . FIND MST IN IDENTIFIER
    (12) statement -> . COLOR NODE IDENTIFIER STRING
    (13) statement -> . REMOVE NODE IDENTIFIER FROM IDENTIFIER
    (14) statement -> . REMOVE EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER
    (15) statement -> . SAVE GRAPH IDENTIFIER TO STRING
    (16) statement -> . LOAD GRAPH IDENTIFIER FROM STRING
    (17) statement -> . IF condition THEN statement
    (28) statement -> . IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement
    (29) statement -> . CLOSURE closure_type IN IDENTIFIER
    (33) statement -> . LOOP NODE IDENTIFIER IN IDENTIFIER block
    (34) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block
    (35) statement -> . LOOP FROM NUMBER TO NUMBER block
    (36) statement -> . LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (37) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (38) statement -> . ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

    NODE            shift and go to state 2
    GRAPH           shift and go to state 3
    EDGE            shift and go to state 4
    VISUALIZE       shift and go to state 5
    FIND            shift and go to state 6
    COLOR           shift and go to state 7
    REMOVE          shift and go to state 8
    SAVE            shift and go to state 9
    LOAD            shift and go to state 10
    IF              shift and go to state 11
    CLOSURE         shift and go to state 12
    LOOP            shift and go to state 13
    ADD             shift and go to state 14

    block                          shift and go to state 142
    statement                      shift and go to state 143

state 125

    (36) statement -> LOOP IDENTIFIER FROM NUMBER TO . NUMBER IN IDENTIFIER block

    NUMBER          shift and go to state 144


state 126

    (34) statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER . IN IDENTIFIER block
    (37) statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER . FROM NUMBER TO NUMBER IN IDENTIFIER block

    IN              shift and go to state 145
    FROM            shift and go to state 146


state 127

    (35) statement -> LOOP FROM NUMBER TO NUMBER . block
    (39) block -> . statement block
    (40) block -> . statement
    (1) statement -> . NODE IDENTIFIER IN IDENTIFIER
    (2) statement -> . GRAPH IDENTIFIER DIRECTED
    (3) statement -> . GRAPH IDENTIFIER
    (4) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (6) statement -> . VISUALIZE IDENTIFIER
    (7) statement -> . FIND CYCLE IN IDENTIFIER
    (8) statement -> . FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (9) statement -> . FIND BFS FROM IDENTIFIER IN IDENTIFIER
    (10) statement -> . FIND DFS FROM IDENTIFIER IN IDENTIFIER
    (11) statement -> . FIND MST IN IDENTIFIER
    (12) statement -> . COLOR NODE IDENTIFIER STRING
    (13) statement -> . REMOVE NODE IDENTIFIER FROM IDENTIFIER
    (14) statement -> . REMOVE EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER
    (15) statement -> . SAVE GRAPH IDENTIFIER TO STRING
    (16) statement -> . LOAD GRAPH IDENTIFIER FROM STRING
    (17) statement -> . IF condition THEN statement
    (28) statement -> . IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement
    (29) statement -> . CLOSURE closure_type IN IDENTIFIER
    (33) statement -> . LOOP NODE IDENTIFIER IN IDENTIFIER block
    (34) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block
    (35) statement -> . LOOP FROM NUMBER TO NUMBER block
    (36) statement -> . LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (37) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (38) statement -> . ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

    NODE            shift and go to state 2
    GRAPH           shift and go to state 3
    EDGE            shift and go to state 4
    VISUALIZE       shift and go to state 5
    FIND            shift and go to state 6
    COLOR           shift and go to state 7
    REMOVE          shift and go to state 8
    SAVE            shift and go to state 9
    LOAD            shift and go to state 10
    IF              shift and go to state 11
    CLOSURE         shift and go to state 12
    LOOP            shift and go to state 13
    ADD             shift and go to state 14

    block                          shift and go to state 147
    statement                      shift and go to state 143

state 128

    (38) statement -> ADD NUMBER TO WEIGHT OF . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

    EDGE            shift and go to state 148


state 129

    (4) statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER . IN IDENTIFIER

    IN              shift and go to state 149


state 130

    (5) statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .

    $end            reduce using rule 5 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    NODE            reduce using rule 5 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    GRAPH           reduce using rule 5 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    EDGE            reduce using rule 5 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    VISUALIZE       reduce using rule 5 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    FIND            reduce using rule 5 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    COLOR           reduce using rule 5 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    REMOVE          reduce using rule 5 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    SAVE            reduce using rule 5 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    LOAD            reduce using rule 5 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    IF              reduce using rule 5 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    CLOSURE         reduce using rule 5 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    LOOP            reduce using rule 5 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    ADD             reduce using rule 5 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)


state 131

    (8) statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN . IDENTIFIER

    IDENTIFIER      shift and go to state 150


state 132

    (9) statement -> FIND BFS FROM IDENTIFIER IN IDENTIFIER .

    $end            reduce using rule 9 (statement -> FIND BFS FROM IDENTIFIER IN IDENTIFIER .)
    NODE            reduce using rule 9 (statement -> FIND BFS FROM IDENTIFIER IN IDENTIFIER .)
    GRAPH           reduce using rule 9 (statement -> FIND BFS FROM IDENTIFIER IN IDENTIFIER .)
    EDGE            reduce using rule 9 (statement -> FIND BFS FROM IDENTIFIER IN IDENTIFIER .)
    VISUALIZE       reduce using rule 9 (statement -> FIND BFS FROM IDENTIFIER IN IDENTIFIER .)
    FIND            reduce using rule 9 (statement -> FIND BFS FROM IDENTIFIER IN IDENTIFIER .)
    COLOR           reduce using rule 9 (statement -> FIND BFS FROM IDENTIFIER IN IDENTIFIER .)
    REMOVE          reduce using rule 9 (statement -> FIND BFS FROM IDENTIFIER IN IDENTIFIER .)
    SAVE            reduce using rule 9 (statement -> FIND BFS FROM IDENTIFIER IN IDENTIFIER .)
    LOAD            reduce using rule 9 (statement -> FIND BFS FROM IDENTIFIER IN IDENTIFIER .)
    IF              reduce using rule 9 (statement -> FIND BFS FROM IDENTIFIER IN IDENTIFIER .)
    CLOSURE         reduce using rule 9 (statement -> FIND BFS FROM IDENTIFIER IN IDENTIFIER .)
    LOOP            reduce using rule 9 (statement -> FIND BFS FROM IDENTIFIER IN IDENTIFIER .)
    ADD             reduce using rule 9 (statement -> FIND BFS FROM IDENTIFIER IN IDENTIFIER .)


state 133

    (10) statement -> FIND DFS FROM IDENTIFIER IN IDENTIFIER .

    $end            reduce using rule 10 (statement -> FIND DFS FROM IDENTIFIER IN IDENTIFIER .)
    NODE            reduce using rule 10 (statement -> FIND DFS FROM IDENTIFIER IN IDENTIFIER .)
    GRAPH           reduce using rule 10 (statement -> FIND DFS FROM IDENTIFIER IN IDENTIFIER .)
    EDGE            reduce using rule 10 (statement -> FIND DFS FROM IDENTIFIER IN IDENTIFIER .)
    VISUALIZE       reduce using rule 10 (statement -> FIND DFS FROM IDENTIFIER IN IDENTIFIER .)
    FIND            reduce using rule 10 (statement -> FIND DFS FROM IDENTIFIER IN IDENTIFIER .)
    COLOR           reduce using rule 10 (statement -> FIND DFS FROM IDENTIFIER IN IDENTIFIER .)
    REMOVE          reduce using rule 10 (statement -> FIND DFS FROM IDENTIFIER IN IDENTIFIER .)
    SAVE            reduce using rule 10 (statement -> FIND DFS FROM IDENTIFIER IN IDENTIFIER .)
    LOAD            reduce using rule 10 (statement -> FIND DFS FROM IDENTIFIER IN IDENTIFIER .)
    IF              reduce using rule 10 (statement -> FIND DFS FROM IDENTIFIER IN IDENTIFIER .)
    CLOSURE         reduce using rule 10 (statement -> FIND DFS FROM IDENTIFIER IN IDENTIFIER .)
    LOOP            reduce using rule 10 (statement -> FIND DFS FROM IDENTIFIER IN IDENTIFIER .)
    ADD             reduce using rule 10 (statement -> FIND DFS FROM IDENTIFIER IN IDENTIFIER .)


state 134

    (14) statement -> REMOVE EDGE IDENTIFIER ARROW IDENTIFIER FROM . IDENTIFIER

    IDENTIFIER      shift and go to state 151


state 135

    (28) statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW . IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 152


state 136

    (19) condition -> EDGE IDENTIFIER ARROW IDENTIFIER IN . IDENTIFIER

    IDENTIFIER      shift and go to state 153


state 137

    (20) condition -> PATH IDENTIFIER TO IDENTIFIER IN . IDENTIFIER

    IDENTIFIER      shift and go to state 154


state 138

    (22) condition -> NOT NODE IDENTIFIER IN IDENTIFIER .

    THEN            reduce using rule 22 (condition -> NOT NODE IDENTIFIER IN IDENTIFIER .)
    AND             reduce using rule 22 (condition -> NOT NODE IDENTIFIER IN IDENTIFIER .)
    OR              reduce using rule 22 (condition -> NOT NODE IDENTIFIER IN IDENTIFIER .)


state 139

    (23) condition -> NOT EDGE IDENTIFIER ARROW IDENTIFIER . IN IDENTIFIER

    IN              shift and go to state 155


state 140

    (24) condition -> NOT PATH IDENTIFIER TO IDENTIFIER . IN IDENTIFIER

    IN              shift and go to state 156


state 141

    (25) condition -> NOT FIND CYCLE IN IDENTIFIER .

    THEN            reduce using rule 25 (condition -> NOT FIND CYCLE IN IDENTIFIER .)
    AND             reduce using rule 25 (condition -> NOT FIND CYCLE IN IDENTIFIER .)
    OR              reduce using rule 25 (condition -> NOT FIND CYCLE IN IDENTIFIER .)


state 142

    (33) statement -> LOOP NODE IDENTIFIER IN IDENTIFIER block .

    $end            reduce using rule 33 (statement -> LOOP NODE IDENTIFIER IN IDENTIFIER block .)
    NODE            reduce using rule 33 (statement -> LOOP NODE IDENTIFIER IN IDENTIFIER block .)
    GRAPH           reduce using rule 33 (statement -> LOOP NODE IDENTIFIER IN IDENTIFIER block .)
    EDGE            reduce using rule 33 (statement -> LOOP NODE IDENTIFIER IN IDENTIFIER block .)
    VISUALIZE       reduce using rule 33 (statement -> LOOP NODE IDENTIFIER IN IDENTIFIER block .)
    FIND            reduce using rule 33 (statement -> LOOP NODE IDENTIFIER IN IDENTIFIER block .)
    COLOR           reduce using rule 33 (statement -> LOOP NODE IDENTIFIER IN IDENTIFIER block .)
    REMOVE          reduce using rule 33 (statement -> LOOP NODE IDENTIFIER IN IDENTIFIER block .)
    SAVE            reduce using rule 33 (statement -> LOOP NODE IDENTIFIER IN IDENTIFIER block .)
    LOAD            reduce using rule 33 (statement -> LOOP NODE IDENTIFIER IN IDENTIFIER block .)
    IF              reduce using rule 33 (statement -> LOOP NODE IDENTIFIER IN IDENTIFIER block .)
    CLOSURE         reduce using rule 33 (statement -> LOOP NODE IDENTIFIER IN IDENTIFIER block .)
    LOOP            reduce using rule 33 (statement -> LOOP NODE IDENTIFIER IN IDENTIFIER block .)
    ADD             reduce using rule 33 (statement -> LOOP NODE IDENTIFIER IN IDENTIFIER block .)


state 143

    (39) block -> statement . block
    (40) block -> statement .
    (39) block -> . statement block
    (40) block -> . statement
    (1) statement -> . NODE IDENTIFIER IN IDENTIFIER
    (2) statement -> . GRAPH IDENTIFIER DIRECTED
    (3) statement -> . GRAPH IDENTIFIER
    (4) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (6) statement -> . VISUALIZE IDENTIFIER
    (7) statement -> . FIND CYCLE IN IDENTIFIER
    (8) statement -> . FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (9) statement -> . FIND BFS FROM IDENTIFIER IN IDENTIFIER
    (10) statement -> . FIND DFS FROM IDENTIFIER IN IDENTIFIER
    (11) statement -> . FIND MST IN IDENTIFIER
    (12) statement -> . COLOR NODE IDENTIFIER STRING
    (13) statement -> . REMOVE NODE IDENTIFIER FROM IDENTIFIER
    (14) statement -> . REMOVE EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER
    (15) statement -> . SAVE GRAPH IDENTIFIER TO STRING
    (16) statement -> . LOAD GRAPH IDENTIFIER FROM STRING
    (17) statement -> . IF condition THEN statement
    (28) statement -> . IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement
    (29) statement -> . CLOSURE closure_type IN IDENTIFIER
    (33) statement -> . LOOP NODE IDENTIFIER IN IDENTIFIER block
    (34) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block
    (35) statement -> . LOOP FROM NUMBER TO NUMBER block
    (36) statement -> . LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (37) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (38) statement -> . ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

  ! shift/reduce conflict for NODE resolved as shift
  ! shift/reduce conflict for GRAPH resolved as shift
  ! shift/reduce conflict for EDGE resolved as shift
  ! shift/reduce conflict for VISUALIZE resolved as shift
  ! shift/reduce conflict for FIND resolved as shift
  ! shift/reduce conflict for COLOR resolved as shift
  ! shift/reduce conflict for REMOVE resolved as shift
  ! shift/reduce conflict for SAVE resolved as shift
  ! shift/reduce conflict for LOAD resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CLOSURE resolved as shift
  ! shift/reduce conflict for LOOP resolved as shift
  ! shift/reduce conflict for ADD resolved as shift
    $end            reduce using rule 40 (block -> statement .)
    NODE            shift and go to state 2
    GRAPH           shift and go to state 3
    EDGE            shift and go to state 4
    VISUALIZE       shift and go to state 5
    FIND            shift and go to state 6
    COLOR           shift and go to state 7
    REMOVE          shift and go to state 8
    SAVE            shift and go to state 9
    LOAD            shift and go to state 10
    IF              shift and go to state 11
    CLOSURE         shift and go to state 12
    LOOP            shift and go to state 13
    ADD             shift and go to state 14

  ! NODE            [ reduce using rule 40 (block -> statement .) ]
  ! GRAPH           [ reduce using rule 40 (block -> statement .) ]
  ! EDGE            [ reduce using rule 40 (block -> statement .) ]
  ! VISUALIZE       [ reduce using rule 40 (block -> statement .) ]
  ! FIND            [ reduce using rule 40 (block -> statement .) ]
  ! COLOR           [ reduce using rule 40 (block -> statement .) ]
  ! REMOVE          [ reduce using rule 40 (block -> statement .) ]
  ! SAVE            [ reduce using rule 40 (block -> statement .) ]
  ! LOAD            [ reduce using rule 40 (block -> statement .) ]
  ! IF              [ reduce using rule 40 (block -> statement .) ]
  ! CLOSURE         [ reduce using rule 40 (block -> statement .) ]
  ! LOOP            [ reduce using rule 40 (block -> statement .) ]
  ! ADD             [ reduce using rule 40 (block -> statement .) ]

    statement                      shift and go to state 143
    block                          shift and go to state 157

state 144

    (36) statement -> LOOP IDENTIFIER FROM NUMBER TO NUMBER . IN IDENTIFIER block

    IN              shift and go to state 158


state 145

    (34) statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN . IDENTIFIER block

    IDENTIFIER      shift and go to state 159


state 146

    (37) statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM . NUMBER TO NUMBER IN IDENTIFIER block

    NUMBER          shift and go to state 160


state 147

    (35) statement -> LOOP FROM NUMBER TO NUMBER block .

    $end            reduce using rule 35 (statement -> LOOP FROM NUMBER TO NUMBER block .)
    NODE            reduce using rule 35 (statement -> LOOP FROM NUMBER TO NUMBER block .)
    GRAPH           reduce using rule 35 (statement -> LOOP FROM NUMBER TO NUMBER block .)
    EDGE            reduce using rule 35 (statement -> LOOP FROM NUMBER TO NUMBER block .)
    VISUALIZE       reduce using rule 35 (statement -> LOOP FROM NUMBER TO NUMBER block .)
    FIND            reduce using rule 35 (statement -> LOOP FROM NUMBER TO NUMBER block .)
    COLOR           reduce using rule 35 (statement -> LOOP FROM NUMBER TO NUMBER block .)
    REMOVE          reduce using rule 35 (statement -> LOOP FROM NUMBER TO NUMBER block .)
    SAVE            reduce using rule 35 (statement -> LOOP FROM NUMBER TO NUMBER block .)
    LOAD            reduce using rule 35 (statement -> LOOP FROM NUMBER TO NUMBER block .)
    IF              reduce using rule 35 (statement -> LOOP FROM NUMBER TO NUMBER block .)
    CLOSURE         reduce using rule 35 (statement -> LOOP FROM NUMBER TO NUMBER block .)
    LOOP            reduce using rule 35 (statement -> LOOP FROM NUMBER TO NUMBER block .)
    ADD             reduce using rule 35 (statement -> LOOP FROM NUMBER TO NUMBER block .)


state 148

    (38) statement -> ADD NUMBER TO WEIGHT OF EDGE . IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

    IDENTIFIER      shift and go to state 161


state 149

    (4) statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN . IDENTIFIER

    IDENTIFIER      shift and go to state 162


state 150

    (8) statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER .

    $end            reduce using rule 8 (statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER .)
    NODE            reduce using rule 8 (statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER .)
    GRAPH           reduce using rule 8 (statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER .)
    EDGE            reduce using rule 8 (statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER .)
    VISUALIZE       reduce using rule 8 (statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER .)
    FIND            reduce using rule 8 (statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER .)
    COLOR           reduce using rule 8 (statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER .)
    REMOVE          reduce using rule 8 (statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER .)
    SAVE            reduce using rule 8 (statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER .)
    LOAD            reduce using rule 8 (statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER .)
    IF              reduce using rule 8 (statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER .)
    CLOSURE         reduce using rule 8 (statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER .)
    LOOP            reduce using rule 8 (statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER .)
    ADD             reduce using rule 8 (statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER .)


state 151

    (14) statement -> REMOVE EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER .

    $end            reduce using rule 14 (statement -> REMOVE EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER .)
    NODE            reduce using rule 14 (statement -> REMOVE EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER .)
    GRAPH           reduce using rule 14 (statement -> REMOVE EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER .)
    EDGE            reduce using rule 14 (statement -> REMOVE EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER .)
    VISUALIZE       reduce using rule 14 (statement -> REMOVE EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER .)
    FIND            reduce using rule 14 (statement -> REMOVE EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER .)
    COLOR           reduce using rule 14 (statement -> REMOVE EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER .)
    REMOVE          reduce using rule 14 (statement -> REMOVE EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER .)
    SAVE            reduce using rule 14 (statement -> REMOVE EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER .)
    LOAD            reduce using rule 14 (statement -> REMOVE EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER .)
    IF              reduce using rule 14 (statement -> REMOVE EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER .)
    CLOSURE         reduce using rule 14 (statement -> REMOVE EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER .)
    LOOP            reduce using rule 14 (statement -> REMOVE EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER .)
    ADD             reduce using rule 14 (statement -> REMOVE EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER .)


state 152

    (28) statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER . IS GREATER THAN NUMBER IN IDENTIFIER THEN statement

    IS              shift and go to state 163


state 153

    (19) condition -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .

    THEN            reduce using rule 19 (condition -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    AND             reduce using rule 19 (condition -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    OR              reduce using rule 19 (condition -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)


state 154

    (20) condition -> PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER .

    THEN            reduce using rule 20 (condition -> PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER .)
    AND             reduce using rule 20 (condition -> PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER .)
    OR              reduce using rule 20 (condition -> PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER .)


state 155

    (23) condition -> NOT EDGE IDENTIFIER ARROW IDENTIFIER IN . IDENTIFIER

    IDENTIFIER      shift and go to state 164


state 156

    (24) condition -> NOT PATH IDENTIFIER TO IDENTIFIER IN . IDENTIFIER

    IDENTIFIER      shift and go to state 165


state 157

    (39) block -> statement block .

    $end            reduce using rule 39 (block -> statement block .)
    NODE            reduce using rule 39 (block -> statement block .)
    GRAPH           reduce using rule 39 (block -> statement block .)
    EDGE            reduce using rule 39 (block -> statement block .)
    VISUALIZE       reduce using rule 39 (block -> statement block .)
    FIND            reduce using rule 39 (block -> statement block .)
    COLOR           reduce using rule 39 (block -> statement block .)
    REMOVE          reduce using rule 39 (block -> statement block .)
    SAVE            reduce using rule 39 (block -> statement block .)
    LOAD            reduce using rule 39 (block -> statement block .)
    IF              reduce using rule 39 (block -> statement block .)
    CLOSURE         reduce using rule 39 (block -> statement block .)
    LOOP            reduce using rule 39 (block -> statement block .)
    ADD             reduce using rule 39 (block -> statement block .)


state 158

    (36) statement -> LOOP IDENTIFIER FROM NUMBER TO NUMBER IN . IDENTIFIER block

    IDENTIFIER      shift and go to state 166


state 159

    (34) statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER . block
    (39) block -> . statement block
    (40) block -> . statement
    (1) statement -> . NODE IDENTIFIER IN IDENTIFIER
    (2) statement -> . GRAPH IDENTIFIER DIRECTED
    (3) statement -> . GRAPH IDENTIFIER
    (4) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (6) statement -> . VISUALIZE IDENTIFIER
    (7) statement -> . FIND CYCLE IN IDENTIFIER
    (8) statement -> . FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (9) statement -> . FIND BFS FROM IDENTIFIER IN IDENTIFIER
    (10) statement -> . FIND DFS FROM IDENTIFIER IN IDENTIFIER
    (11) statement -> . FIND MST IN IDENTIFIER
    (12) statement -> . COLOR NODE IDENTIFIER STRING
    (13) statement -> . REMOVE NODE IDENTIFIER FROM IDENTIFIER
    (14) statement -> . REMOVE EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER
    (15) statement -> . SAVE GRAPH IDENTIFIER TO STRING
    (16) statement -> . LOAD GRAPH IDENTIFIER FROM STRING
    (17) statement -> . IF condition THEN statement
    (28) statement -> . IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement
    (29) statement -> . CLOSURE closure_type IN IDENTIFIER
    (33) statement -> . LOOP NODE IDENTIFIER IN IDENTIFIER block
    (34) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block
    (35) statement -> . LOOP FROM NUMBER TO NUMBER block
    (36) statement -> . LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (37) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (38) statement -> . ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

    NODE            shift and go to state 2
    GRAPH           shift and go to state 3
    EDGE            shift and go to state 4
    VISUALIZE       shift and go to state 5
    FIND            shift and go to state 6
    COLOR           shift and go to state 7
    REMOVE          shift and go to state 8
    SAVE            shift and go to state 9
    LOAD            shift and go to state 10
    IF              shift and go to state 11
    CLOSURE         shift and go to state 12
    LOOP            shift and go to state 13
    ADD             shift and go to state 14

    block                          shift and go to state 167
    statement                      shift and go to state 143

state 160

    (37) statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER . TO NUMBER IN IDENTIFIER block

    TO              shift and go to state 168


state 161

    (38) statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER . ARROW IDENTIFIER IN IDENTIFIER

    ARROW           shift and go to state 169


state 162

    (4) statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER .

    $end            reduce using rule 4 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER .)
    NODE            reduce using rule 4 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER .)
    GRAPH           reduce using rule 4 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER .)
    EDGE            reduce using rule 4 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER .)
    VISUALIZE       reduce using rule 4 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER .)
    FIND            reduce using rule 4 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER .)
    COLOR           reduce using rule 4 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER .)
    REMOVE          reduce using rule 4 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER .)
    SAVE            reduce using rule 4 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER .)
    LOAD            reduce using rule 4 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER .)
    IF              reduce using rule 4 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER .)
    CLOSURE         reduce using rule 4 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER .)
    LOOP            reduce using rule 4 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER .)
    ADD             reduce using rule 4 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER .)


state 163

    (28) statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS . GREATER THAN NUMBER IN IDENTIFIER THEN statement

    GREATER         shift and go to state 170


state 164

    (23) condition -> NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .

    THEN            reduce using rule 23 (condition -> NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    AND             reduce using rule 23 (condition -> NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    OR              reduce using rule 23 (condition -> NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)


state 165

    (24) condition -> NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER .

    THEN            reduce using rule 24 (condition -> NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER .)
    AND             reduce using rule 24 (condition -> NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER .)
    OR              reduce using rule 24 (condition -> NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER .)


state 166

    (36) statement -> LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER . block
    (39) block -> . statement block
    (40) block -> . statement
    (1) statement -> . NODE IDENTIFIER IN IDENTIFIER
    (2) statement -> . GRAPH IDENTIFIER DIRECTED
    (3) statement -> . GRAPH IDENTIFIER
    (4) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (6) statement -> . VISUALIZE IDENTIFIER
    (7) statement -> . FIND CYCLE IN IDENTIFIER
    (8) statement -> . FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (9) statement -> . FIND BFS FROM IDENTIFIER IN IDENTIFIER
    (10) statement -> . FIND DFS FROM IDENTIFIER IN IDENTIFIER
    (11) statement -> . FIND MST IN IDENTIFIER
    (12) statement -> . COLOR NODE IDENTIFIER STRING
    (13) statement -> . REMOVE NODE IDENTIFIER FROM IDENTIFIER
    (14) statement -> . REMOVE EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER
    (15) statement -> . SAVE GRAPH IDENTIFIER TO STRING
    (16) statement -> . LOAD GRAPH IDENTIFIER FROM STRING
    (17) statement -> . IF condition THEN statement
    (28) statement -> . IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement
    (29) statement -> . CLOSURE closure_type IN IDENTIFIER
    (33) statement -> . LOOP NODE IDENTIFIER IN IDENTIFIER block
    (34) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block
    (35) statement -> . LOOP FROM NUMBER TO NUMBER block
    (36) statement -> . LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (37) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (38) statement -> . ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

    NODE            shift and go to state 2
    GRAPH           shift and go to state 3
    EDGE            shift and go to state 4
    VISUALIZE       shift and go to state 5
    FIND            shift and go to state 6
    COLOR           shift and go to state 7
    REMOVE          shift and go to state 8
    SAVE            shift and go to state 9
    LOAD            shift and go to state 10
    IF              shift and go to state 11
    CLOSURE         shift and go to state 12
    LOOP            shift and go to state 13
    ADD             shift and go to state 14

    block                          shift and go to state 171
    statement                      shift and go to state 143

state 167

    (34) statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block .

    $end            reduce using rule 34 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block .)
    NODE            reduce using rule 34 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block .)
    GRAPH           reduce using rule 34 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block .)
    EDGE            reduce using rule 34 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block .)
    VISUALIZE       reduce using rule 34 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block .)
    FIND            reduce using rule 34 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block .)
    COLOR           reduce using rule 34 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block .)
    REMOVE          reduce using rule 34 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block .)
    SAVE            reduce using rule 34 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block .)
    LOAD            reduce using rule 34 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block .)
    IF              reduce using rule 34 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block .)
    CLOSURE         reduce using rule 34 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block .)
    LOOP            reduce using rule 34 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block .)
    ADD             reduce using rule 34 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block .)


state 168

    (37) statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO . NUMBER IN IDENTIFIER block

    NUMBER          shift and go to state 172


state 169

    (38) statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW . IDENTIFIER IN IDENTIFIER

    IDENTIFIER      shift and go to state 173


state 170

    (28) statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER . THAN NUMBER IN IDENTIFIER THEN statement

    THAN            shift and go to state 174


state 171

    (36) statement -> LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .

    $end            reduce using rule 36 (statement -> LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    NODE            reduce using rule 36 (statement -> LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    GRAPH           reduce using rule 36 (statement -> LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    EDGE            reduce using rule 36 (statement -> LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    VISUALIZE       reduce using rule 36 (statement -> LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    FIND            reduce using rule 36 (statement -> LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    COLOR           reduce using rule 36 (statement -> LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    REMOVE          reduce using rule 36 (statement -> LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    SAVE            reduce using rule 36 (statement -> LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    LOAD            reduce using rule 36 (statement -> LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    IF              reduce using rule 36 (statement -> LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    CLOSURE         reduce using rule 36 (statement -> LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    LOOP            reduce using rule 36 (statement -> LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    ADD             reduce using rule 36 (statement -> LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)


state 172

    (37) statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER . IN IDENTIFIER block

    IN              shift and go to state 175


state 173

    (38) statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER . IN IDENTIFIER

    IN              shift and go to state 176


state 174

    (28) statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN . NUMBER IN IDENTIFIER THEN statement

    NUMBER          shift and go to state 177


state 175

    (37) statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN . IDENTIFIER block

    IDENTIFIER      shift and go to state 178


state 176

    (38) statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN . IDENTIFIER

    IDENTIFIER      shift and go to state 179


state 177

    (28) statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER . IN IDENTIFIER THEN statement

    IN              shift and go to state 180


state 178

    (37) statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER . block
    (39) block -> . statement block
    (40) block -> . statement
    (1) statement -> . NODE IDENTIFIER IN IDENTIFIER
    (2) statement -> . GRAPH IDENTIFIER DIRECTED
    (3) statement -> . GRAPH IDENTIFIER
    (4) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (6) statement -> . VISUALIZE IDENTIFIER
    (7) statement -> . FIND CYCLE IN IDENTIFIER
    (8) statement -> . FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (9) statement -> . FIND BFS FROM IDENTIFIER IN IDENTIFIER
    (10) statement -> . FIND DFS FROM IDENTIFIER IN IDENTIFIER
    (11) statement -> . FIND MST IN IDENTIFIER
    (12) statement -> . COLOR NODE IDENTIFIER STRING
    (13) statement -> . REMOVE NODE IDENTIFIER FROM IDENTIFIER
    (14) statement -> . REMOVE EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER
    (15) statement -> . SAVE GRAPH IDENTIFIER TO STRING
    (16) statement -> . LOAD GRAPH IDENTIFIER FROM STRING
    (17) statement -> . IF condition THEN statement
    (28) statement -> . IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement
    (29) statement -> . CLOSURE closure_type IN IDENTIFIER
    (33) statement -> . LOOP NODE IDENTIFIER IN IDENTIFIER block
    (34) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block
    (35) statement -> . LOOP FROM NUMBER TO NUMBER block
    (36) statement -> . LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (37) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (38) statement -> . ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

    NODE            shift and go to state 2
    GRAPH           shift and go to state 3
    EDGE            shift and go to state 4
    VISUALIZE       shift and go to state 5
    FIND            shift and go to state 6
    COLOR           shift and go to state 7
    REMOVE          shift and go to state 8
    SAVE            shift and go to state 9
    LOAD            shift and go to state 10
    IF              shift and go to state 11
    CLOSURE         shift and go to state 12
    LOOP            shift and go to state 13
    ADD             shift and go to state 14

    block                          shift and go to state 181
    statement                      shift and go to state 143

state 179

    (38) statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .

    $end            reduce using rule 38 (statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    NODE            reduce using rule 38 (statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    GRAPH           reduce using rule 38 (statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    EDGE            reduce using rule 38 (statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    VISUALIZE       reduce using rule 38 (statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    FIND            reduce using rule 38 (statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    COLOR           reduce using rule 38 (statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    REMOVE          reduce using rule 38 (statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    SAVE            reduce using rule 38 (statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    LOAD            reduce using rule 38 (statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    IF              reduce using rule 38 (statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    CLOSURE         reduce using rule 38 (statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    LOOP            reduce using rule 38 (statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    ADD             reduce using rule 38 (statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)


state 180

    (28) statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN . IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 182


state 181

    (37) statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .

    $end            reduce using rule 37 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    NODE            reduce using rule 37 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    GRAPH           reduce using rule 37 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    EDGE            reduce using rule 37 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    VISUALIZE       reduce using rule 37 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    FIND            reduce using rule 37 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    COLOR           reduce using rule 37 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    REMOVE          reduce using rule 37 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    SAVE            reduce using rule 37 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    LOAD            reduce using rule 37 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    IF              reduce using rule 37 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    CLOSURE         reduce using rule 37 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    LOOP            reduce using rule 37 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    ADD             reduce using rule 37 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)


state 182

    (28) statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER . THEN statement

    THEN            shift and go to state 183


state 183

    (28) statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN . statement
    (1) statement -> . NODE IDENTIFIER IN IDENTIFIER
    (2) statement -> . GRAPH IDENTIFIER DIRECTED
    (3) statement -> . GRAPH IDENTIFIER
    (4) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (6) statement -> . VISUALIZE IDENTIFIER
    (7) statement -> . FIND CYCLE IN IDENTIFIER
    (8) statement -> . FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (9) statement -> . FIND BFS FROM IDENTIFIER IN IDENTIFIER
    (10) statement -> . FIND DFS FROM IDENTIFIER IN IDENTIFIER
    (11) statement -> . FIND MST IN IDENTIFIER
    (12) statement -> . COLOR NODE IDENTIFIER STRING
    (13) statement -> . REMOVE NODE IDENTIFIER FROM IDENTIFIER
    (14) statement -> . REMOVE EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER
    (15) statement -> . SAVE GRAPH IDENTIFIER TO STRING
    (16) statement -> . LOAD GRAPH IDENTIFIER FROM STRING
    (17) statement -> . IF condition THEN statement
    (28) statement -> . IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement
    (29) statement -> . CLOSURE closure_type IN IDENTIFIER
    (33) statement -> . LOOP NODE IDENTIFIER IN IDENTIFIER block
    (34) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block
    (35) statement -> . LOOP FROM NUMBER TO NUMBER block
    (36) statement -> . LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (37) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (38) statement -> . ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

    NODE            shift and go to state 2
    GRAPH           shift and go to state 3
    EDGE            shift and go to state 4
    VISUALIZE       shift and go to state 5
    FIND            shift and go to state 6
    COLOR           shift and go to state 7
    REMOVE          shift and go to state 8
    SAVE            shift and go to state 9
    LOAD            shift and go to state 10
    IF              shift and go to state 11
    CLOSURE         shift and go to state 12
    LOOP            shift and go to state 13
    ADD             shift and go to state 14

    statement                      shift and go to state 184

state 184

    (28) statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement .

    $end            reduce using rule 28 (statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement .)
    NODE            reduce using rule 28 (statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement .)
    GRAPH           reduce using rule 28 (statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement .)
    EDGE            reduce using rule 28 (statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement .)
    VISUALIZE       reduce using rule 28 (statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement .)
    FIND            reduce using rule 28 (statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement .)
    COLOR           reduce using rule 28 (statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement .)
    REMOVE          reduce using rule 28 (statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement .)
    SAVE            reduce using rule 28 (statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement .)
    LOAD            reduce using rule 28 (statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement .)
    IF              reduce using rule 28 (statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement .)
    CLOSURE         reduce using rule 28 (statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement .)
    LOOP            reduce using rule 28 (statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement .)
    ADD             reduce using rule 28 (statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AND in state 89 resolved as shift
WARNING: shift/reduce conflict for OR in state 89 resolved as shift
WARNING: shift/reduce conflict for AND in state 90 resolved as shift
WARNING: shift/reduce conflict for OR in state 90 resolved as shift
WARNING: shift/reduce conflict for NODE in state 143 resolved as shift
WARNING: shift/reduce conflict for GRAPH in state 143 resolved as shift
WARNING: shift/reduce conflict for EDGE in state 143 resolved as shift
WARNING: shift/reduce conflict for VISUALIZE in state 143 resolved as shift
WARNING: shift/reduce conflict for FIND in state 143 resolved as shift
WARNING: shift/reduce conflict for COLOR in state 143 resolved as shift
WARNING: shift/reduce conflict for REMOVE in state 143 resolved as shift
WARNING: shift/reduce conflict for SAVE in state 143 resolved as shift
WARNING: shift/reduce conflict for LOAD in state 143 resolved as shift
WARNING: shift/reduce conflict for IF in state 143 resolved as shift
WARNING: shift/reduce conflict for CLOSURE in state 143 resolved as shift
WARNING: shift/reduce conflict for LOOP in state 143 resolved as shift
WARNING: shift/reduce conflict for ADD in state 143 resolved as shift
