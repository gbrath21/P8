
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARROW BFS CLOSURE COLOR CYCLE DELETE1 DFS DIRECTED EDGE FIND FROM GRAPH IDENTIFIER IF IN LOAD LOOP MST NODE NOT NUMBER PATH REFLEXIVE SAVE SHORTEST STRING SYMMETRIC THEN TO TRANSITIVE VISUALIZE WEIGHTstatement : NODE IDENTIFIER IN IDENTIFIERstatement : GRAPH IDENTIFIER DIRECTEDstatement : GRAPH IDENTIFIERstatement : EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIERstatement : EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIERstatement : VISUALIZE IDENTIFIERstatement : FIND CYCLE IN IDENTIFIERstatement : FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIERstatement : COLOR NODE IDENTIFIER STRINGstatement : COLOR EDGE IDENTIFIER ARROW IDENTIFIER STRINGstatement : DELETE1 NODE IDENTIFIER FROM IDENTIFIERstatement : DELETE1 EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIERstatement : SAVE GRAPH IDENTIFIER TO STRINGstatement : LOAD GRAPH IDENTIFIER FROM STRINGstatement : FIND MST IN IDENTIFIERstatement : IF NODE IDENTIFIER IN IDENTIFIER THEN statementstatement : IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statementstatement : IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statementstatement : IF FIND CYCLE IN IDENTIFIER THEN statementstatement : CLOSURE closure_type IN IDENTIFIERclosure_type : REFLEXIVE\n                    | SYMMETRIC\n                    | TRANSITIVEstatement : FIND BFS FROM IDENTIFIER IN IDENTIFIERstatement : FIND DFS FROM IDENTIFIER IN IDENTIFIER'
    
_lr_action_items = {'NODE':([0,7,8,11,94,97,106,107,],[2,22,24,28,2,2,2,2,]),'GRAPH':([0,9,10,94,97,106,107,],[3,26,27,3,3,3,3,]),'EDGE':([0,7,8,11,94,97,106,107,],[4,23,25,29,4,4,4,4,]),'VISUALIZE':([0,94,97,106,107,],[5,5,5,5,5,]),'FIND':([0,11,94,97,106,107,],[6,31,6,6,6,6,]),'COLOR':([0,94,97,106,107,],[7,7,7,7,7,]),'DELETE1':([0,94,97,106,107,],[8,8,8,8,8,]),'SAVE':([0,94,97,106,107,],[9,9,9,9,9,]),'LOAD':([0,94,97,106,107,],[10,10,10,10,10,]),'IF':([0,94,97,106,107,],[11,11,11,11,11,]),'CLOSURE':([0,94,97,106,107,],[12,12,12,12,12,]),'$end':([1,14,16,37,55,57,59,62,72,79,81,82,88,90,91,92,99,100,101,104,105,108,109,],[0,-3,-6,-2,-1,-7,-15,-9,-20,-11,-13,-14,-5,-24,-25,-10,-8,-12,-16,-19,-4,-17,-18,]),'IDENTIFIER':([2,3,4,5,18,22,23,24,25,26,27,28,29,30,36,38,39,41,42,43,54,58,63,64,65,68,69,70,71,74,76,77,89,93,95,96,98,],[13,14,15,16,40,44,45,46,47,48,49,50,51,52,55,56,57,59,60,61,72,75,78,79,80,83,84,85,86,88,90,91,99,100,102,103,105,]),'CYCLE':([6,31,],[17,53,]),'PATH':([6,11,],[18,30,]),'MST':([6,],[19,]),'BFS':([6,],[20,]),'DFS':([6,],[21,]),'REFLEXIVE':([12,],[33,]),'SYMMETRIC':([12,],[34,]),'TRANSITIVE':([12,],[35,]),'IN':([13,17,19,32,33,34,35,50,53,56,60,61,75,84,85,87,],[36,39,41,54,-21,-22,-23,68,71,74,76,77,89,95,96,98,]),'DIRECTED':([14,],[37,]),'ARROW':([15,45,47,51,],[38,63,65,69,]),'FROM':([20,21,46,49,80,],[42,43,64,67,93,]),'TO':([40,48,52,],[58,66,70,]),'STRING':([44,66,67,78,],[62,81,82,92,]),'WEIGHT':([56,],[73,]),'NUMBER':([73,],[87,]),'THEN':([83,86,102,103,],[94,97,106,107,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,94,97,106,107,],[1,101,104,108,109,]),'closure_type':([12,],[32,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> NODE IDENTIFIER IN IDENTIFIER','statement',4,'p_statement_node','parser.py',6),
  ('statement -> GRAPH IDENTIFIER DIRECTED','statement',3,'p_statement_directed_graph','parser.py',10),
  ('statement -> GRAPH IDENTIFIER','statement',2,'p_statement_graph','parser.py',14),
  ('statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER','statement',8,'p_statement_weighted_edge','parser.py',18),
  ('statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER','statement',6,'p_statement_edge','parser.py',22),
  ('statement -> VISUALIZE IDENTIFIER','statement',2,'p_statement_visualize','parser.py',26),
  ('statement -> FIND CYCLE IN IDENTIFIER','statement',4,'p_statement_find_cycle','parser.py',30),
  ('statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER','statement',7,'p_statement_shortest_path','parser.py',34),
  ('statement -> COLOR NODE IDENTIFIER STRING','statement',4,'p_statement_color_node','parser.py',38),
  ('statement -> COLOR EDGE IDENTIFIER ARROW IDENTIFIER STRING','statement',6,'p_statement_color_edge','parser.py',42),
  ('statement -> DELETE1 NODE IDENTIFIER FROM IDENTIFIER','statement',5,'p_statement_delete_node','parser.py',46),
  ('statement -> DELETE1 EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER','statement',7,'p_statement_delete_edge','parser.py',50),
  ('statement -> SAVE GRAPH IDENTIFIER TO STRING','statement',5,'p_statement_save_graph','parser.py',54),
  ('statement -> LOAD GRAPH IDENTIFIER FROM STRING','statement',5,'p_statement_load_graph','parser.py',58),
  ('statement -> FIND MST IN IDENTIFIER','statement',4,'p_statement_find_mst','parser.py',62),
  ('statement -> IF NODE IDENTIFIER IN IDENTIFIER THEN statement','statement',7,'p_statement_if_node','parser.py',66),
  ('statement -> IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement','statement',9,'p_statement_if_edge','parser.py',70),
  ('statement -> IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement','statement',9,'p_statement_if_path','parser.py',74),
  ('statement -> IF FIND CYCLE IN IDENTIFIER THEN statement','statement',7,'p_statement_if_cycle','parser.py',78),
  ('statement -> CLOSURE closure_type IN IDENTIFIER','statement',4,'p_statement_closure','parser.py',98),
  ('closure_type -> REFLEXIVE','closure_type',1,'p_closure_type','parser.py',102),
  ('closure_type -> SYMMETRIC','closure_type',1,'p_closure_type','parser.py',103),
  ('closure_type -> TRANSITIVE','closure_type',1,'p_closure_type','parser.py',104),
  ('statement -> FIND BFS FROM IDENTIFIER IN IDENTIFIER','statement',6,'p_statement_bfs','parser.py',108),
  ('statement -> FIND DFS FROM IDENTIFIER IN IDENTIFIER','statement',6,'p_statement_dfs','parser.py',112),
]
