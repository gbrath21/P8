
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARROW BFS CLOSURE COLOR CYCLE DELETE1 DFS DIRECTED EDGE FIND FROM GRAPH IDENTIFIER IF IN LOAD LOOP MST NODE NOT NUMBER PATH REFLEXIVE SAVE SHORTEST STRING SYMMETRIC THEN TO TRANSITIVE VISUALIZE WEIGHTstatement : GRAPH IDENTIFIER DIRECTEDstatement : EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIERstatement : EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIERstatement : FIND CYCLE IN IDENTIFIERstatement : FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIERstatement : COLOR EDGE IDENTIFIER ARROW IDENTIFIER STRINGstatement : DELETE1 NODE IDENTIFIER FROM IDENTIFIERstatement : DELETE1 EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIERstatement : SAVE GRAPH IDENTIFIER TO STRINGstatement : LOAD GRAPH IDENTIFIER FROM STRINGstatement : FIND MST IN IDENTIFIERstatement : IF NODE IDENTIFIER IN IDENTIFIER THEN statementstatement : IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statementstatement : IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statementstatement : IF FIND CYCLE IN IDENTIFIER THEN statementstatement : IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statementstatement : IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statementstatement : IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statementstatement : IF NOT FIND CYCLE IN IDENTIFIER THEN statementstatement : CLOSURE closure_type IN IDENTIFIERclosure_type : REFLEXIVE\n                    | SYMMETRIC\n                    | TRANSITIVEstatement : FIND BFS FROM IDENTIFIER IN IDENTIFIERstatement : FIND DFS FROM IDENTIFIER IN IDENTIFIERstatement : NODE IDENTIFIER IN IDENTIFIERstatement : GRAPH IDENTIFIERstatement : COLOR NODE IDENTIFIER STRINGstatement : VISUALIZE IDENTIFIERstatement : LOOP NODE IDENTIFIER IN IDENTIFIER blockstatement : LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER blockblock : statement blockblock : statement'
    
_lr_action_items = {'GRAPH':([0,8,9,14,37,40,66,68,72,75,86,95,97,98,107,110,112,113,114,116,119,124,125,128,129,130,133,134,137,138,139,140,141,142,143,146,147,148,149,150,151,152,153,],[2,26,27,-27,-29,-1,-4,-11,-28,-26,-20,-7,-9,-10,2,-3,-24,-25,-6,2,2,-30,2,-5,-8,-12,-15,2,2,-32,2,-2,2,2,-16,-19,-31,-13,-14,2,2,-17,-18,]),'EDGE':([0,5,6,10,13,14,32,37,40,66,68,72,75,86,95,97,98,107,110,112,113,114,116,119,124,125,128,129,130,133,134,137,138,139,140,141,142,143,146,147,148,149,150,151,152,153,],[3,21,24,29,39,-27,59,-29,-1,-4,-11,-28,-26,-20,-7,-9,-10,3,-3,-24,-25,-6,3,3,-30,3,-5,-8,-12,-15,3,3,-32,3,-2,3,3,-16,-19,-31,-13,-14,3,3,-17,-18,]),'FIND':([0,10,14,32,37,40,66,68,72,75,86,95,97,98,107,110,112,113,114,116,119,124,125,128,129,130,133,134,137,138,139,140,141,142,143,146,147,148,149,150,151,152,153,],[4,31,-27,61,-29,-1,-4,-11,-28,-26,-20,-7,-9,-10,4,-3,-24,-25,-6,4,4,-30,4,-5,-8,-12,-15,4,4,-32,4,-2,4,4,-16,-19,-31,-13,-14,4,4,-17,-18,]),'COLOR':([0,14,37,40,66,68,72,75,86,95,97,98,107,110,112,113,114,116,119,124,125,128,129,130,133,134,137,138,139,140,141,142,143,146,147,148,149,150,151,152,153,],[5,-27,-29,-1,-4,-11,-28,-26,-20,-7,-9,-10,5,-3,-24,-25,-6,5,5,-30,5,-5,-8,-12,-15,5,5,-32,5,-2,5,5,-16,-19,-31,-13,-14,5,5,-17,-18,]),'DELETE1':([0,14,37,40,66,68,72,75,86,95,97,98,107,110,112,113,114,116,119,124,125,128,129,130,133,134,137,138,139,140,141,142,143,146,147,148,149,150,151,152,153,],[6,-27,-29,-1,-4,-11,-28,-26,-20,-7,-9,-10,6,-3,-24,-25,-6,6,6,-30,6,-5,-8,-12,-15,6,6,-32,6,-2,6,6,-16,-19,-31,-13,-14,6,6,-17,-18,]),'SAVE':([0,14,37,40,66,68,72,75,86,95,97,98,107,110,112,113,114,116,119,124,125,128,129,130,133,134,137,138,139,140,141,142,143,146,147,148,149,150,151,152,153,],[8,-27,-29,-1,-4,-11,-28,-26,-20,-7,-9,-10,8,-3,-24,-25,-6,8,8,-30,8,-5,-8,-12,-15,8,8,-32,8,-2,8,8,-16,-19,-31,-13,-14,8,8,-17,-18,]),'LOAD':([0,14,37,40,66,68,72,75,86,95,97,98,107,110,112,113,114,116,119,124,125,128,129,130,133,134,137,138,139,140,141,142,143,146,147,148,149,150,151,152,153,],[9,-27,-29,-1,-4,-11,-28,-26,-20,-7,-9,-10,9,-3,-24,-25,-6,9,9,-30,9,-5,-8,-12,-15,9,9,-32,9,-2,9,9,-16,-19,-31,-13,-14,9,9,-17,-18,]),'IF':([0,14,37,40,66,68,72,75,86,95,97,98,107,110,112,113,114,116,119,124,125,128,129,130,133,134,137,138,139,140,141,142,143,146,147,148,149,150,151,152,153,],[10,-27,-29,-1,-4,-11,-28,-26,-20,-7,-9,-10,10,-3,-24,-25,-6,10,10,-30,10,-5,-8,-12,-15,10,10,-32,10,-2,10,10,-16,-19,-31,-13,-14,10,10,-17,-18,]),'CLOSURE':([0,14,37,40,66,68,72,75,86,95,97,98,107,110,112,113,114,116,119,124,125,128,129,130,133,134,137,138,139,140,141,142,143,146,147,148,149,150,151,152,153,],[11,-27,-29,-1,-4,-11,-28,-26,-20,-7,-9,-10,11,-3,-24,-25,-6,11,11,-30,11,-5,-8,-12,-15,11,11,-32,11,-2,11,11,-16,-19,-31,-13,-14,11,11,-17,-18,]),'NODE':([0,5,6,10,13,14,32,37,40,66,68,72,75,86,95,97,98,107,110,112,113,114,116,119,124,125,128,129,130,133,134,137,138,139,140,141,142,143,146,147,148,149,150,151,152,153,],[7,22,23,28,38,-27,58,-29,-1,-4,-11,-28,-26,-20,-7,-9,-10,7,-3,-24,-25,-6,7,7,-30,7,-5,-8,-12,-15,7,7,-32,7,-2,7,7,-16,-19,-31,-13,-14,7,7,-17,-18,]),'VISUALIZE':([0,14,37,40,66,68,72,75,86,95,97,98,107,110,112,113,114,116,119,124,125,128,129,130,133,134,137,138,139,140,141,142,143,146,147,148,149,150,151,152,153,],[12,-27,-29,-1,-4,-11,-28,-26,-20,-7,-9,-10,12,-3,-24,-25,-6,12,12,-30,12,-5,-8,-12,-15,12,12,-32,12,-2,12,12,-16,-19,-31,-13,-14,12,12,-17,-18,]),'LOOP':([0,14,37,40,66,68,72,75,86,95,97,98,107,110,112,113,114,116,119,124,125,128,129,130,133,134,137,138,139,140,141,142,143,146,147,148,149,150,151,152,153,],[13,-27,-29,-1,-4,-11,-28,-26,-20,-7,-9,-10,13,-3,-24,-25,-6,13,13,-30,13,-5,-8,-12,-15,13,13,-32,13,-2,13,13,-16,-19,-31,-13,-14,13,13,-17,-18,]),'$end':([1,14,37,40,66,68,72,75,86,95,97,98,110,112,113,114,124,125,128,129,130,133,138,140,143,146,147,148,149,152,153,],[0,-27,-29,-1,-4,-11,-28,-26,-20,-7,-9,-10,-3,-24,-25,-6,-30,-33,-5,-8,-12,-15,-32,-2,-16,-19,-31,-13,-14,-17,-18,]),'IDENTIFIER':([2,3,7,12,17,21,22,23,24,26,27,28,29,30,38,39,41,42,44,45,46,51,58,59,60,62,67,71,73,74,78,79,80,81,87,88,90,92,93,103,104,105,106,111,115,117,118,126,127,135,136,],[14,15,25,37,43,47,48,49,50,52,53,54,55,56,63,64,65,66,68,69,70,75,82,83,84,86,91,94,95,96,99,100,101,102,107,108,110,112,113,120,121,122,123,128,129,131,132,139,140,144,145,]),'CYCLE':([4,31,61,],[16,57,85,]),'PATH':([4,10,32,],[17,30,60,]),'MST':([4,],[18,]),'BFS':([4,],[19,]),'DFS':([4,],[20,]),'NOT':([10,],[32,]),'REFLEXIVE':([11,],[34,]),'SYMMETRIC':([11,],[35,]),'TRANSITIVE':([11,],[36,]),'DIRECTED':([14,],[40,]),'ARROW':([15,47,50,55,64,83,],[41,71,74,79,88,104,]),'IN':([16,18,25,33,34,35,36,54,57,63,65,69,70,82,85,91,100,101,108,109,121,122,],[42,44,51,62,-21,-22,-23,78,81,87,90,92,93,103,106,111,117,118,126,127,135,136,]),'FROM':([19,20,49,53,96,],[45,46,73,77,115,]),'TO':([43,52,56,84,],[67,76,80,105,]),'STRING':([48,76,77,94,],[72,97,98,114,]),'WEIGHT':([65,],[89,]),'NUMBER':([89,],[109,]),'THEN':([99,102,120,123,131,132,144,145,],[116,119,134,137,141,142,150,151,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,107,116,119,125,134,137,139,141,142,150,151,],[1,125,130,133,125,143,146,125,148,149,152,153,]),'closure_type':([11,],[33,]),'block':([107,125,139,],[124,138,147,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> GRAPH IDENTIFIER DIRECTED','statement',3,'p_statement_directed_graph','parser.py',10),
  ('statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER','statement',8,'p_statement_weighted_edge','parser.py',18),
  ('statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER','statement',6,'p_statement_edge','parser.py',22),
  ('statement -> FIND CYCLE IN IDENTIFIER','statement',4,'p_statement_find_cycle','parser.py',30),
  ('statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER','statement',7,'p_statement_shortest_path','parser.py',34),
  ('statement -> COLOR EDGE IDENTIFIER ARROW IDENTIFIER STRING','statement',6,'p_statement_color_edge','parser.py',42),
  ('statement -> DELETE1 NODE IDENTIFIER FROM IDENTIFIER','statement',5,'p_statement_delete_node','parser.py',46),
  ('statement -> DELETE1 EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER','statement',7,'p_statement_delete_edge','parser.py',50),
  ('statement -> SAVE GRAPH IDENTIFIER TO STRING','statement',5,'p_statement_save_graph','parser.py',54),
  ('statement -> LOAD GRAPH IDENTIFIER FROM STRING','statement',5,'p_statement_load_graph','parser.py',58),
  ('statement -> FIND MST IN IDENTIFIER','statement',4,'p_statement_find_mst','parser.py',62),
  ('statement -> IF NODE IDENTIFIER IN IDENTIFIER THEN statement','statement',7,'p_statement_if_node','parser.py',66),
  ('statement -> IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement','statement',9,'p_statement_if_edge','parser.py',70),
  ('statement -> IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement','statement',9,'p_statement_if_path','parser.py',74),
  ('statement -> IF FIND CYCLE IN IDENTIFIER THEN statement','statement',7,'p_statement_if_cycle','parser.py',78),
  ('statement -> IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement','statement',8,'p_statement_if_not_node','parser.py',82),
  ('statement -> IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement','statement',10,'p_statement_if_not_edge','parser.py',86),
  ('statement -> IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement','statement',10,'p_statement_if_not_path','parser.py',90),
  ('statement -> IF NOT FIND CYCLE IN IDENTIFIER THEN statement','statement',8,'p_statement_if_not_cycle','parser.py',94),
  ('statement -> CLOSURE closure_type IN IDENTIFIER','statement',4,'p_statement_closure','parser.py',98),
  ('closure_type -> REFLEXIVE','closure_type',1,'p_closure_type','parser.py',102),
  ('closure_type -> SYMMETRIC','closure_type',1,'p_closure_type','parser.py',103),
  ('closure_type -> TRANSITIVE','closure_type',1,'p_closure_type','parser.py',104),
  ('statement -> FIND BFS FROM IDENTIFIER IN IDENTIFIER','statement',6,'p_statement_bfs','parser.py',108),
  ('statement -> FIND DFS FROM IDENTIFIER IN IDENTIFIER','statement',6,'p_statement_dfs','parser.py',112),
  ('statement -> NODE IDENTIFIER IN IDENTIFIER','statement',4,'p_statement_node','parser.py',116),
  ('statement -> GRAPH IDENTIFIER','statement',2,'p_statement_graph','parser.py',120),
  ('statement -> COLOR NODE IDENTIFIER STRING','statement',4,'p_statement_color_node','parser.py',124),
  ('statement -> VISUALIZE IDENTIFIER','statement',2,'p_statement_visualize','parser.py',128),
  ('statement -> LOOP NODE IDENTIFIER IN IDENTIFIER block','statement',6,'p_statement_loop_node','parser.py',132),
  ('statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block','statement',8,'p_statement_loop_edge','parser.py',136),
  ('block -> statement block','block',2,'p_block_multiple','parser.py',140),
  ('block -> statement','block',1,'p_block_single','parser.py',144),
]
