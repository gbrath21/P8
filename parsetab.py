
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARROW CLOSURE COLOR CYCLE DELETE1 DIRECTED EDGE FIND FROM GRAPH IDENTIFIER IF IN LOAD MST NODE NUMBER PATH REFLEXIVE SAVE SHORTEST STRING SYMMETRIC THEN TO TRANSITIVE VISUALIZE WEIGHTstatement : NODE IDENTIFIER IN IDENTIFIERstatement : GRAPH IDENTIFIER DIRECTEDstatement : GRAPH IDENTIFIERstatement : EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIERstatement : EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIERstatement : VISUALIZE IDENTIFIERstatement : FIND CYCLE IN IDENTIFIERstatement : FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIERstatement : COLOR NODE IDENTIFIER STRINGstatement : COLOR EDGE IDENTIFIER ARROW IDENTIFIER STRINGstatement : DELETE1 NODE IDENTIFIER FROM IDENTIFIERstatement : DELETE1 EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIERstatement : SAVE GRAPH IDENTIFIER TO STRINGstatement : LOAD GRAPH IDENTIFIER FROM STRINGstatement : FIND MST IN IDENTIFIERstatement : IF NODE IDENTIFIER IN IDENTIFIER THEN statementstatement : IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statementstatement : IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statementstatement : IF FIND CYCLE IN IDENTIFIER THEN statementstatement : CLOSURE closure_type IN IDENTIFIERclosure_type : REFLEXIVE\n                    | SYMMETRIC\n                    | TRANSITIVE'
    
_lr_action_items = {'NODE':([0,7,8,11,84,87,96,97,],[2,20,22,26,2,2,2,2,]),'GRAPH':([0,9,10,84,87,96,97,],[3,24,25,3,3,3,3,]),'EDGE':([0,7,8,11,84,87,96,97,],[4,21,23,27,4,4,4,4,]),'VISUALIZE':([0,84,87,96,97,],[5,5,5,5,5,]),'FIND':([0,11,84,87,96,97,],[6,29,6,6,6,6,]),'COLOR':([0,84,87,96,97,],[7,7,7,7,7,]),'DELETE1':([0,84,87,96,97,],[8,8,8,8,8,]),'SAVE':([0,84,87,96,97,],[9,9,9,9,9,]),'LOAD':([0,84,87,96,97,],[10,10,10,10,10,]),'IF':([0,84,87,96,97,],[11,11,11,11,11,]),'CLOSURE':([0,84,87,96,97,],[12,12,12,12,12,]),'$end':([1,14,16,35,51,53,55,56,66,71,73,74,80,82,89,90,91,94,95,98,99,],[0,-3,-6,-2,-1,-7,-15,-9,-20,-11,-13,-14,-5,-10,-8,-12,-16,-19,-4,-17,-18,]),'IDENTIFIER':([2,3,4,5,18,20,21,22,23,24,25,26,27,28,34,36,37,39,50,54,57,58,59,62,63,64,65,68,81,83,85,86,88,],[13,14,15,16,38,40,41,42,43,44,45,46,47,48,51,52,53,55,66,69,70,71,72,75,76,77,78,80,89,90,92,93,95,]),'CYCLE':([6,29,],[17,49,]),'PATH':([6,11,],[18,28,]),'MST':([6,],[19,]),'REFLEXIVE':([12,],[31,]),'SYMMETRIC':([12,],[32,]),'TRANSITIVE':([12,],[33,]),'IN':([13,17,19,30,31,32,33,46,49,52,69,76,77,79,],[34,37,39,50,-21,-22,-23,62,65,68,81,85,86,88,]),'DIRECTED':([14,],[35,]),'ARROW':([15,41,43,47,],[36,57,59,63,]),'TO':([38,44,48,],[54,60,64,]),'STRING':([40,60,61,70,],[56,73,74,82,]),'FROM':([42,45,72,],[58,61,83,]),'WEIGHT':([52,],[67,]),'NUMBER':([67,],[79,]),'THEN':([75,78,92,93,],[84,87,96,97,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,84,87,96,97,],[1,91,94,98,99,]),'closure_type':([12,],[30,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> NODE IDENTIFIER IN IDENTIFIER','statement',4,'p_statement_node','parser.py',6),
  ('statement -> GRAPH IDENTIFIER DIRECTED','statement',3,'p_statement_directed_graph','parser.py',10),
  ('statement -> GRAPH IDENTIFIER','statement',2,'p_statement_graph','parser.py',14),
  ('statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER','statement',8,'p_statement_weighted_edge','parser.py',18),
  ('statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER','statement',6,'p_statement_edge','parser.py',22),
  ('statement -> VISUALIZE IDENTIFIER','statement',2,'p_statement_visualize','parser.py',26),
  ('statement -> FIND CYCLE IN IDENTIFIER','statement',4,'p_statement_find_cycle','parser.py',30),
  ('statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER','statement',7,'p_statement_shortest_path','parser.py',34),
  ('statement -> COLOR NODE IDENTIFIER STRING','statement',4,'p_statement_color_node','parser.py',38),
  ('statement -> COLOR EDGE IDENTIFIER ARROW IDENTIFIER STRING','statement',6,'p_statement_color_edge','parser.py',42),
  ('statement -> DELETE1 NODE IDENTIFIER FROM IDENTIFIER','statement',5,'p_statement_delete_node','parser.py',46),
  ('statement -> DELETE1 EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER','statement',7,'p_statement_delete_edge','parser.py',50),
  ('statement -> SAVE GRAPH IDENTIFIER TO STRING','statement',5,'p_statement_save_graph','parser.py',54),
  ('statement -> LOAD GRAPH IDENTIFIER FROM STRING','statement',5,'p_statement_load_graph','parser.py',58),
  ('statement -> FIND MST IN IDENTIFIER','statement',4,'p_statement_find_mst','parser.py',62),
  ('statement -> IF NODE IDENTIFIER IN IDENTIFIER THEN statement','statement',7,'p_statement_if_node','parser.py',66),
  ('statement -> IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement','statement',9,'p_statement_if_edge','parser.py',70),
  ('statement -> IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement','statement',9,'p_statement_if_path','parser.py',74),
  ('statement -> IF FIND CYCLE IN IDENTIFIER THEN statement','statement',7,'p_statement_if_cycle','parser.py',78),
  ('statement -> CLOSURE closure_type IN IDENTIFIER','statement',4,'p_statement_closure','parser.py',82),
  ('closure_type -> REFLEXIVE','closure_type',1,'p_closure_type','parser.py',86),
  ('closure_type -> SYMMETRIC','closure_type',1,'p_closure_type','parser.py',87),
  ('closure_type -> TRANSITIVE','closure_type',1,'p_closure_type','parser.py',88),
]
