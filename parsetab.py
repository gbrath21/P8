
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARROW CLOSURE COLOR CYCLE DELETE1 DIRECTED EDGE FIND FROM GRAPH IDENTIFIER IF IN LOAD LOOP MST NODE NOT NUMBER PATH REFLEXIVE SAVE SHORTEST STRING SYMMETRIC THEN TO TRANSITIVE VISUALIZE WEIGHTstatement : NODE IDENTIFIER IN IDENTIFIERstatement : GRAPH IDENTIFIER DIRECTEDstatement : GRAPH IDENTIFIERstatement : EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIERstatement : EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIERstatement : VISUALIZE IDENTIFIERstatement : FIND CYCLE IN IDENTIFIERstatement : FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIERstatement : COLOR NODE IDENTIFIER STRINGstatement : COLOR EDGE IDENTIFIER ARROW IDENTIFIER STRINGstatement : DELETE1 NODE IDENTIFIER FROM IDENTIFIERstatement : DELETE1 EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIERstatement : SAVE GRAPH IDENTIFIER TO STRINGstatement : LOAD GRAPH IDENTIFIER FROM STRINGstatement : FIND MST IN IDENTIFIERstatement : IF NODE IDENTIFIER IN IDENTIFIER THEN statementstatement : IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statementstatement : IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statementstatement : IF FIND CYCLE IN IDENTIFIER THEN statementstatement : IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statementstatement : IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statementstatement : IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statementstatement : IF NOT FIND CYCLE IN IDENTIFIER THEN statementstatement : CLOSURE closure_type IN IDENTIFIERclosure_type : REFLEXIVE\n                    | SYMMETRIC\n                    | TRANSITIVE'
    
_lr_action_items = {'NODE':([0,7,8,11,30,97,100,112,115,117,118,125,126,],[2,20,22,26,51,2,2,2,2,2,2,2,2,]),'GRAPH':([0,9,10,97,100,112,115,117,118,125,126,],[3,24,25,3,3,3,3,3,3,3,3,]),'EDGE':([0,7,8,11,30,97,100,112,115,117,118,125,126,],[4,21,23,27,52,4,4,4,4,4,4,4,4,]),'VISUALIZE':([0,97,100,112,115,117,118,125,126,],[5,5,5,5,5,5,5,5,5,]),'FIND':([0,11,30,97,100,112,115,117,118,125,126,],[6,29,54,6,6,6,6,6,6,6,6,]),'COLOR':([0,97,100,112,115,117,118,125,126,],[7,7,7,7,7,7,7,7,7,]),'DELETE1':([0,97,100,112,115,117,118,125,126,],[8,8,8,8,8,8,8,8,8,]),'SAVE':([0,97,100,112,115,117,118,125,126,],[9,9,9,9,9,9,9,9,9,]),'LOAD':([0,97,100,112,115,117,118,125,126,],[10,10,10,10,10,10,10,10,10,]),'IF':([0,97,100,112,115,117,118,125,126,],[11,11,11,11,11,11,11,11,11,]),'CLOSURE':([0,97,100,112,115,117,118,125,126,],[12,12,12,12,12,12,12,12,12,]),'$end':([1,14,16,36,56,58,60,61,75,80,82,83,93,95,106,107,108,111,116,119,122,123,124,127,128,],[0,-3,-6,-2,-1,-7,-15,-9,-24,-11,-13,-14,-5,-10,-8,-12,-16,-19,-4,-20,-23,-17,-18,-21,-22,]),'IDENTIFIER':([2,3,4,5,18,20,21,22,23,24,25,26,27,28,35,37,38,40,51,52,53,55,59,62,63,64,67,68,69,70,77,88,89,90,91,94,96,98,99,105,113,114,],[13,14,15,16,39,41,42,43,44,45,46,47,48,49,56,57,58,60,71,72,73,75,78,79,80,81,84,85,86,87,93,101,102,103,104,106,107,109,110,116,120,121,]),'CYCLE':([6,29,54,],[17,50,74,]),'PATH':([6,11,30,],[18,28,53,]),'MST':([6,],[19,]),'NOT':([11,],[30,]),'REFLEXIVE':([12,],[32,]),'SYMMETRIC':([12,],[33,]),'TRANSITIVE':([12,],[34,]),'IN':([13,17,19,31,32,33,34,47,50,57,71,74,78,85,86,92,102,103,],[35,38,40,55,-25,-26,-27,67,70,77,88,91,94,98,99,105,113,114,]),'DIRECTED':([14,],[36,]),'ARROW':([15,42,44,48,72,],[37,62,64,68,89,]),'TO':([39,45,49,73,],[59,65,69,90,]),'STRING':([41,65,66,79,],[61,82,83,95,]),'FROM':([43,46,81,],[63,66,96,]),'WEIGHT':([57,],[76,]),'NUMBER':([76,],[92,]),'THEN':([84,87,101,104,109,110,120,121,],[97,100,112,115,117,118,125,126,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,97,100,112,115,117,118,125,126,],[1,108,111,119,122,123,124,127,128,]),'closure_type':([12,],[31,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> NODE IDENTIFIER IN IDENTIFIER','statement',4,'p_statement_node','parser.py',6),
  ('statement -> GRAPH IDENTIFIER DIRECTED','statement',3,'p_statement_directed_graph','parser.py',10),
  ('statement -> GRAPH IDENTIFIER','statement',2,'p_statement_graph','parser.py',14),
  ('statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER','statement',8,'p_statement_weighted_edge','parser.py',18),
  ('statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER','statement',6,'p_statement_edge','parser.py',22),
  ('statement -> VISUALIZE IDENTIFIER','statement',2,'p_statement_visualize','parser.py',26),
  ('statement -> FIND CYCLE IN IDENTIFIER','statement',4,'p_statement_find_cycle','parser.py',30),
  ('statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER','statement',7,'p_statement_shortest_path','parser.py',34),
  ('statement -> COLOR NODE IDENTIFIER STRING','statement',4,'p_statement_color_node','parser.py',38),
  ('statement -> COLOR EDGE IDENTIFIER ARROW IDENTIFIER STRING','statement',6,'p_statement_color_edge','parser.py',42),
  ('statement -> DELETE1 NODE IDENTIFIER FROM IDENTIFIER','statement',5,'p_statement_delete_node','parser.py',46),
  ('statement -> DELETE1 EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER','statement',7,'p_statement_delete_edge','parser.py',50),
  ('statement -> SAVE GRAPH IDENTIFIER TO STRING','statement',5,'p_statement_save_graph','parser.py',54),
  ('statement -> LOAD GRAPH IDENTIFIER FROM STRING','statement',5,'p_statement_load_graph','parser.py',58),
  ('statement -> FIND MST IN IDENTIFIER','statement',4,'p_statement_find_mst','parser.py',62),
  ('statement -> IF NODE IDENTIFIER IN IDENTIFIER THEN statement','statement',7,'p_statement_if_node','parser.py',66),
  ('statement -> IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement','statement',9,'p_statement_if_edge','parser.py',70),
  ('statement -> IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement','statement',9,'p_statement_if_path','parser.py',74),
  ('statement -> IF FIND CYCLE IN IDENTIFIER THEN statement','statement',7,'p_statement_if_cycle','parser.py',78),
  ('statement -> IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement','statement',8,'p_statement_if_not_node','parser.py',82),
  ('statement -> IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement','statement',10,'p_statement_if_not_edge','parser.py',86),
  ('statement -> IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement','statement',10,'p_statement_if_not_path','parser.py',90),
  ('statement -> IF NOT FIND CYCLE IN IDENTIFIER THEN statement','statement',8,'p_statement_if_not_cycle','parser.py',94),
  ('statement -> CLOSURE closure_type IN IDENTIFIER','statement',4,'p_statement_closure','parser.py',98),
  ('closure_type -> REFLEXIVE','closure_type',1,'p_closure_type','parser.py',102),
  ('closure_type -> SYMMETRIC','closure_type',1,'p_closure_type','parser.py',103),
  ('closure_type -> TRANSITIVE','closure_type',1,'p_closure_type','parser.py',104),
]
