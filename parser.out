Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    SHORTEST

Grammar

Rule 0     S' -> statement
Rule 1     statement -> NODE IDENTIFIER IN IDENTIFIER
Rule 2     statement -> GRAPH IDENTIFIER DIRECTED
Rule 3     statement -> GRAPH IDENTIFIER
Rule 4     statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
Rule 5     statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
Rule 6     statement -> VISUALIZE IDENTIFIER
Rule 7     statement -> FIND CYCLE IN IDENTIFIER
Rule 8     statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
Rule 9     statement -> COLOR NODE IDENTIFIER STRING
Rule 10    statement -> COLOR EDGE IDENTIFIER ARROW IDENTIFIER STRING
Rule 11    statement -> DELETE1 NODE IDENTIFIER FROM IDENTIFIER
Rule 12    statement -> DELETE1 EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER
Rule 13    statement -> SAVE GRAPH IDENTIFIER TO STRING
Rule 14    statement -> LOAD GRAPH IDENTIFIER FROM STRING
Rule 15    statement -> FIND MST IN IDENTIFIER
Rule 16    statement -> IF NODE IDENTIFIER IN IDENTIFIER THEN statement
Rule 17    statement -> IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
Rule 18    statement -> IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
Rule 19    statement -> IF FIND CYCLE IN IDENTIFIER THEN statement
Rule 20    statement -> IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement
Rule 21    statement -> IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
Rule 22    statement -> IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
Rule 23    statement -> IF NOT FIND CYCLE IN IDENTIFIER THEN statement
Rule 24    statement -> CLOSURE closure_type IN IDENTIFIER
Rule 25    closure_type -> REFLEXIVE
Rule 26    closure_type -> SYMMETRIC
Rule 27    closure_type -> TRANSITIVE
Rule 28    statement -> FIND BFS FROM IDENTIFIER IN IDENTIFIER
Rule 29    statement -> FIND DFS FROM IDENTIFIER IN IDENTIFIER
Rule 30    statement -> LOOP NODE IDENTIFIER IN IDENTIFIER block
Rule 31    statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block
Rule 32    statement -> LOOP FROM NUMBER TO NUMBER block
Rule 33    statement -> LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
Rule 34    statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
Rule 35    statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
Rule 36    block -> statement block
Rule 37    block -> statement

Terminals, with rules where they appear

ADD                  : 35
ARROW                : 4 5 10 12 17 21 31 34 35
BFS                  : 28
CLOSURE              : 24
COLOR                : 9 10
CYCLE                : 7 19 23
DFS                  : 29
DIRECTED             : 2
EDGE                 : 4 5 10 12 17 21 31 34 35
FIND                 : 7 8 15 19 23 28 29
FROM                 : 11 12 14 28 29 32 33 34
GRAPH                : 2 3 13 14
IDENTIFIER           : 1 1 2 3 4 4 4 5 5 5 6 7 8 8 8 9 10 10 11 11 12 12 12 13 14 15 16 16 17 17 17 18 18 18 19 20 20 21 21 21 22 22 22 23 24 28 28 29 29 30 30 31 31 31 33 33 34 34 34 35 35 35
IF                   : 16 17 18 19 20 21 22 23
IN                   : 1 4 5 7 8 15 16 17 18 19 20 21 22 23 24 28 29 30 31 33 34 35
LOAD                 : 14
LOOP                 : 30 31 32 33 34
MST                  : 15
NODE                 : 1 9 11 16 20 30
NOT                  : 20 21 22 23
NUMBER               : 4 32 32 33 33 34 34 35
OF                   : 35
PATH                 : 8 18 22
REFLEXIVE            : 25
SAVE                 : 13
SHORTEST             : 
STRING               : 9 10 13 14
SYMMETRIC            : 26
THEN                 : 16 17 18 19 20 21 22 23
TO                   : 8 13 18 22 32 33 34 35
TRANSITIVE           : 27
VISUALIZE            : 6
WEIGHT               : 4 35
error                : 

Nonterminals, with rules where they appear

DELETE1              : 11 12
block                : 30 31 32 33 34 36
closure_type         : 24
statement            : 16 17 18 19 20 21 22 23 36 37 0

