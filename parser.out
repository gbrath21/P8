Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> NODE IDENTIFIER IN IDENTIFIER
Rule 2     statement -> GRAPH IDENTIFIER DIRECTED
Rule 3     statement -> GRAPH IDENTIFIER
Rule 4     statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
Rule 5     statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
Rule 6     statement -> VISUALIZE IDENTIFIER
Rule 7     statement -> FIND CYCLE IN IDENTIFIER
Rule 8     statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
Rule 9     statement -> COLOR NODE IDENTIFIER STRING
Rule 10    statement -> DELETE1 NODE IDENTIFIER FROM IDENTIFIER
Rule 11    statement -> SAVE GRAPH IDENTIFIER TO STRING
Rule 12    statement -> LOAD GRAPH IDENTIFIER FROM STRING
Rule 13    statement -> FIND MST IN IDENTIFIER
Rule 14    statement -> IF NODE IDENTIFIER IN IDENTIFIER THEN statement
Rule 15    statement -> IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
Rule 16    statement -> IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
Rule 17    statement -> IF FIND CYCLE IN IDENTIFIER THEN statement
Rule 18    statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement
Rule 19    statement -> IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement
Rule 20    statement -> IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
Rule 21    statement -> IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
Rule 22    statement -> IF NOT FIND CYCLE IN IDENTIFIER THEN statement
Rule 23    statement -> CLOSURE closure_type IN IDENTIFIER
Rule 24    closure_type -> REFLEXIVE
Rule 25    closure_type -> SYMMETRIC
Rule 26    closure_type -> TRANSITIVE
Rule 27    statement -> FIND BFS FROM IDENTIFIER IN IDENTIFIER
Rule 28    statement -> FIND DFS FROM IDENTIFIER IN IDENTIFIER
Rule 29    statement -> LOOP NODE IDENTIFIER IN IDENTIFIER block
Rule 30    statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block
Rule 31    statement -> LOOP FROM NUMBER TO NUMBER block
Rule 32    statement -> LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
Rule 33    statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
Rule 34    statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
Rule 35    block -> statement block
Rule 36    block -> statement

Terminals, with rules where they appear

ADD                  : 34
ARROW                : 4 5 15 18 20 30 33 34
BFS                  : 27
CLOSURE              : 23
COLOR                : 9
CYCLE                : 7 17 22
DELETE1              : 10
DFS                  : 28
DIRECTED             : 2
EDGE                 : 4 5 15 18 20 30 33 34
FIND                 : 7 8 13 17 22 27 28
FROM                 : 10 12 27 28 31 32 33
GRAPH                : 2 3 11 12
GREATER              : 18
IDENTIFIER           : 1 1 2 3 4 4 4 5 5 5 6 7 8 8 8 9 10 10 11 12 13 14 14 15 15 15 16 16 16 17 18 18 18 19 19 20 20 20 21 21 21 22 23 27 27 28 28 29 29 30 30 30 32 32 33 33 33 34 34 34
IF                   : 14 15 16 17 18 19 20 21 22
IN                   : 1 4 5 7 8 13 14 15 16 17 18 19 20 21 22 23 27 28 29 30 32 33 34
IS                   : 18
LOAD                 : 12
LOOP                 : 29 30 31 32 33
MST                  : 13
NODE                 : 1 9 10 14 19 29
NOT                  : 19 20 21 22
NUMBER               : 4 18 31 31 32 32 33 33 34
OF                   : 18 34
PATH                 : 8 16 21
REFLEXIVE            : 24
SAVE                 : 11
STRING               : 9 11 12
SYMMETRIC            : 25
THAN                 : 18
THEN                 : 14 15 16 17 18 19 20 21 22
TO                   : 8 11 16 21 31 32 33 34
TRANSITIVE           : 26
VISUALIZE            : 6
WEIGHT               : 4 18 34
error                : 

Nonterminals, with rules where they appear

block                : 29 30 31 32 33 35
closure_type         : 23
statement            : 14 15 16 17 18 19 20 21 22 35 36 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . NODE IDENTIFIER IN IDENTIFIER
    (2) statement -> . GRAPH IDENTIFIER DIRECTED
    (3) statement -> . GRAPH IDENTIFIER
    (4) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (6) statement -> . VISUALIZE IDENTIFIER
    (7) statement -> . FIND CYCLE IN IDENTIFIER
    (8) statement -> . FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (9) statement -> . COLOR NODE IDENTIFIER STRING
    (10) statement -> . DELETE1 NODE IDENTIFIER FROM IDENTIFIER
    (11) statement -> . SAVE GRAPH IDENTIFIER TO STRING
    (12) statement -> . LOAD GRAPH IDENTIFIER FROM STRING
    (13) statement -> . FIND MST IN IDENTIFIER
    (14) statement -> . IF NODE IDENTIFIER IN IDENTIFIER THEN statement
    (15) statement -> . IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (16) statement -> . IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (17) statement -> . IF FIND CYCLE IN IDENTIFIER THEN statement
    (18) statement -> . IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement
    (19) statement -> . IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement
    (20) statement -> . IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (21) statement -> . IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (22) statement -> . IF NOT FIND CYCLE IN IDENTIFIER THEN statement
    (23) statement -> . CLOSURE closure_type IN IDENTIFIER
    (27) statement -> . FIND BFS FROM IDENTIFIER IN IDENTIFIER
    (28) statement -> . FIND DFS FROM IDENTIFIER IN IDENTIFIER
    (29) statement -> . LOOP NODE IDENTIFIER IN IDENTIFIER block
    (30) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block
    (31) statement -> . LOOP FROM NUMBER TO NUMBER block
    (32) statement -> . LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (33) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (34) statement -> . ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

    NODE            shift and go to state 2
    GRAPH           shift and go to state 3
    EDGE            shift and go to state 4
    VISUALIZE       shift and go to state 5
    FIND            shift and go to state 6
    COLOR           shift and go to state 7
    DELETE1         shift and go to state 8
    SAVE            shift and go to state 9
    LOAD            shift and go to state 10
    IF              shift and go to state 11
    CLOSURE         shift and go to state 12
    LOOP            shift and go to state 13
    ADD             shift and go to state 14

    statement                      shift and go to state 1

state 1

    (0) S' -> statement .



state 2

    (1) statement -> NODE . IDENTIFIER IN IDENTIFIER

    IDENTIFIER      shift and go to state 15


state 3

    (2) statement -> GRAPH . IDENTIFIER DIRECTED
    (3) statement -> GRAPH . IDENTIFIER

    IDENTIFIER      shift and go to state 16


state 4

    (4) statement -> EDGE . IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> EDGE . IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

    IDENTIFIER      shift and go to state 17


state 5

    (6) statement -> VISUALIZE . IDENTIFIER

    IDENTIFIER      shift and go to state 18


state 6

    (7) statement -> FIND . CYCLE IN IDENTIFIER
    (8) statement -> FIND . PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (13) statement -> FIND . MST IN IDENTIFIER
    (27) statement -> FIND . BFS FROM IDENTIFIER IN IDENTIFIER
    (28) statement -> FIND . DFS FROM IDENTIFIER IN IDENTIFIER

    CYCLE           shift and go to state 19
    PATH            shift and go to state 20
    MST             shift and go to state 21
    BFS             shift and go to state 22
    DFS             shift and go to state 23


state 7

    (9) statement -> COLOR . NODE IDENTIFIER STRING

    NODE            shift and go to state 24


state 8

    (10) statement -> DELETE1 . NODE IDENTIFIER FROM IDENTIFIER

    NODE            shift and go to state 25


state 9

    (11) statement -> SAVE . GRAPH IDENTIFIER TO STRING

    GRAPH           shift and go to state 26


state 10

    (12) statement -> LOAD . GRAPH IDENTIFIER FROM STRING

    GRAPH           shift and go to state 27


state 11

    (14) statement -> IF . NODE IDENTIFIER IN IDENTIFIER THEN statement
    (15) statement -> IF . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (16) statement -> IF . PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (17) statement -> IF . FIND CYCLE IN IDENTIFIER THEN statement
    (18) statement -> IF . WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement
    (19) statement -> IF . NOT NODE IDENTIFIER IN IDENTIFIER THEN statement
    (20) statement -> IF . NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (21) statement -> IF . NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (22) statement -> IF . NOT FIND CYCLE IN IDENTIFIER THEN statement

    NODE            shift and go to state 28
    EDGE            shift and go to state 29
    PATH            shift and go to state 30
    FIND            shift and go to state 31
    WEIGHT          shift and go to state 32
    NOT             shift and go to state 33


state 12

    (23) statement -> CLOSURE . closure_type IN IDENTIFIER
    (24) closure_type -> . REFLEXIVE
    (25) closure_type -> . SYMMETRIC
    (26) closure_type -> . TRANSITIVE

    REFLEXIVE       shift and go to state 35
    SYMMETRIC       shift and go to state 36
    TRANSITIVE      shift and go to state 37

    closure_type                   shift and go to state 34

state 13

    (29) statement -> LOOP . NODE IDENTIFIER IN IDENTIFIER block
    (30) statement -> LOOP . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block
    (31) statement -> LOOP . FROM NUMBER TO NUMBER block
    (32) statement -> LOOP . IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (33) statement -> LOOP . EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block

    NODE            shift and go to state 38
    EDGE            shift and go to state 40
    FROM            shift and go to state 41
    IDENTIFIER      shift and go to state 39


state 14

    (34) statement -> ADD . NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

    NUMBER          shift and go to state 42


state 15

    (1) statement -> NODE IDENTIFIER . IN IDENTIFIER

    IN              shift and go to state 43


state 16

    (2) statement -> GRAPH IDENTIFIER . DIRECTED
    (3) statement -> GRAPH IDENTIFIER .

    DIRECTED        shift and go to state 44
    $end            reduce using rule 3 (statement -> GRAPH IDENTIFIER .)
    NODE            reduce using rule 3 (statement -> GRAPH IDENTIFIER .)
    GRAPH           reduce using rule 3 (statement -> GRAPH IDENTIFIER .)
    EDGE            reduce using rule 3 (statement -> GRAPH IDENTIFIER .)
    VISUALIZE       reduce using rule 3 (statement -> GRAPH IDENTIFIER .)
    FIND            reduce using rule 3 (statement -> GRAPH IDENTIFIER .)
    COLOR           reduce using rule 3 (statement -> GRAPH IDENTIFIER .)
    DELETE1         reduce using rule 3 (statement -> GRAPH IDENTIFIER .)
    SAVE            reduce using rule 3 (statement -> GRAPH IDENTIFIER .)
    LOAD            reduce using rule 3 (statement -> GRAPH IDENTIFIER .)
    IF              reduce using rule 3 (statement -> GRAPH IDENTIFIER .)
    CLOSURE         reduce using rule 3 (statement -> GRAPH IDENTIFIER .)
    LOOP            reduce using rule 3 (statement -> GRAPH IDENTIFIER .)
    ADD             reduce using rule 3 (statement -> GRAPH IDENTIFIER .)


state 17

    (4) statement -> EDGE IDENTIFIER . ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> EDGE IDENTIFIER . ARROW IDENTIFIER IN IDENTIFIER

    ARROW           shift and go to state 45


state 18

    (6) statement -> VISUALIZE IDENTIFIER .

    $end            reduce using rule 6 (statement -> VISUALIZE IDENTIFIER .)
    NODE            reduce using rule 6 (statement -> VISUALIZE IDENTIFIER .)
    GRAPH           reduce using rule 6 (statement -> VISUALIZE IDENTIFIER .)
    EDGE            reduce using rule 6 (statement -> VISUALIZE IDENTIFIER .)
    VISUALIZE       reduce using rule 6 (statement -> VISUALIZE IDENTIFIER .)
    FIND            reduce using rule 6 (statement -> VISUALIZE IDENTIFIER .)
    COLOR           reduce using rule 6 (statement -> VISUALIZE IDENTIFIER .)
    DELETE1         reduce using rule 6 (statement -> VISUALIZE IDENTIFIER .)
    SAVE            reduce using rule 6 (statement -> VISUALIZE IDENTIFIER .)
    LOAD            reduce using rule 6 (statement -> VISUALIZE IDENTIFIER .)
    IF              reduce using rule 6 (statement -> VISUALIZE IDENTIFIER .)
    CLOSURE         reduce using rule 6 (statement -> VISUALIZE IDENTIFIER .)
    LOOP            reduce using rule 6 (statement -> VISUALIZE IDENTIFIER .)
    ADD             reduce using rule 6 (statement -> VISUALIZE IDENTIFIER .)


state 19

    (7) statement -> FIND CYCLE . IN IDENTIFIER

    IN              shift and go to state 46


state 20

    (8) statement -> FIND PATH . IDENTIFIER TO IDENTIFIER IN IDENTIFIER

    IDENTIFIER      shift and go to state 47


state 21

    (13) statement -> FIND MST . IN IDENTIFIER

    IN              shift and go to state 48


state 22

    (27) statement -> FIND BFS . FROM IDENTIFIER IN IDENTIFIER

    FROM            shift and go to state 49


state 23

    (28) statement -> FIND DFS . FROM IDENTIFIER IN IDENTIFIER

    FROM            shift and go to state 50


state 24

    (9) statement -> COLOR NODE . IDENTIFIER STRING

    IDENTIFIER      shift and go to state 51


state 25

    (10) statement -> DELETE1 NODE . IDENTIFIER FROM IDENTIFIER

    IDENTIFIER      shift and go to state 52


state 26

    (11) statement -> SAVE GRAPH . IDENTIFIER TO STRING

    IDENTIFIER      shift and go to state 53


state 27

    (12) statement -> LOAD GRAPH . IDENTIFIER FROM STRING

    IDENTIFIER      shift and go to state 54


state 28

    (14) statement -> IF NODE . IDENTIFIER IN IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 55


state 29

    (15) statement -> IF EDGE . IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 56


state 30

    (16) statement -> IF PATH . IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 57


state 31

    (17) statement -> IF FIND . CYCLE IN IDENTIFIER THEN statement

    CYCLE           shift and go to state 58


state 32

    (18) statement -> IF WEIGHT . OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement

    OF              shift and go to state 59


state 33

    (19) statement -> IF NOT . NODE IDENTIFIER IN IDENTIFIER THEN statement
    (20) statement -> IF NOT . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (21) statement -> IF NOT . PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (22) statement -> IF NOT . FIND CYCLE IN IDENTIFIER THEN statement

    NODE            shift and go to state 60
    EDGE            shift and go to state 61
    PATH            shift and go to state 62
    FIND            shift and go to state 63


state 34

    (23) statement -> CLOSURE closure_type . IN IDENTIFIER

    IN              shift and go to state 64


state 35

    (24) closure_type -> REFLEXIVE .

    IN              reduce using rule 24 (closure_type -> REFLEXIVE .)


state 36

    (25) closure_type -> SYMMETRIC .

    IN              reduce using rule 25 (closure_type -> SYMMETRIC .)


state 37

    (26) closure_type -> TRANSITIVE .

    IN              reduce using rule 26 (closure_type -> TRANSITIVE .)


state 38

    (29) statement -> LOOP NODE . IDENTIFIER IN IDENTIFIER block

    IDENTIFIER      shift and go to state 65


state 39

    (32) statement -> LOOP IDENTIFIER . FROM NUMBER TO NUMBER IN IDENTIFIER block

    FROM            shift and go to state 66


state 40

    (30) statement -> LOOP EDGE . IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block
    (33) statement -> LOOP EDGE . IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block

    IDENTIFIER      shift and go to state 67


state 41

    (31) statement -> LOOP FROM . NUMBER TO NUMBER block

    NUMBER          shift and go to state 68


state 42

    (34) statement -> ADD NUMBER . TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

    TO              shift and go to state 69


state 43

    (1) statement -> NODE IDENTIFIER IN . IDENTIFIER

    IDENTIFIER      shift and go to state 70


state 44

    (2) statement -> GRAPH IDENTIFIER DIRECTED .

    $end            reduce using rule 2 (statement -> GRAPH IDENTIFIER DIRECTED .)
    NODE            reduce using rule 2 (statement -> GRAPH IDENTIFIER DIRECTED .)
    GRAPH           reduce using rule 2 (statement -> GRAPH IDENTIFIER DIRECTED .)
    EDGE            reduce using rule 2 (statement -> GRAPH IDENTIFIER DIRECTED .)
    VISUALIZE       reduce using rule 2 (statement -> GRAPH IDENTIFIER DIRECTED .)
    FIND            reduce using rule 2 (statement -> GRAPH IDENTIFIER DIRECTED .)
    COLOR           reduce using rule 2 (statement -> GRAPH IDENTIFIER DIRECTED .)
    DELETE1         reduce using rule 2 (statement -> GRAPH IDENTIFIER DIRECTED .)
    SAVE            reduce using rule 2 (statement -> GRAPH IDENTIFIER DIRECTED .)
    LOAD            reduce using rule 2 (statement -> GRAPH IDENTIFIER DIRECTED .)
    IF              reduce using rule 2 (statement -> GRAPH IDENTIFIER DIRECTED .)
    CLOSURE         reduce using rule 2 (statement -> GRAPH IDENTIFIER DIRECTED .)
    LOOP            reduce using rule 2 (statement -> GRAPH IDENTIFIER DIRECTED .)
    ADD             reduce using rule 2 (statement -> GRAPH IDENTIFIER DIRECTED .)


state 45

    (4) statement -> EDGE IDENTIFIER ARROW . IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> EDGE IDENTIFIER ARROW . IDENTIFIER IN IDENTIFIER

    IDENTIFIER      shift and go to state 71


state 46

    (7) statement -> FIND CYCLE IN . IDENTIFIER

    IDENTIFIER      shift and go to state 72


state 47

    (8) statement -> FIND PATH IDENTIFIER . TO IDENTIFIER IN IDENTIFIER

    TO              shift and go to state 73


state 48

    (13) statement -> FIND MST IN . IDENTIFIER

    IDENTIFIER      shift and go to state 74


state 49

    (27) statement -> FIND BFS FROM . IDENTIFIER IN IDENTIFIER

    IDENTIFIER      shift and go to state 75


state 50

    (28) statement -> FIND DFS FROM . IDENTIFIER IN IDENTIFIER

    IDENTIFIER      shift and go to state 76


state 51

    (9) statement -> COLOR NODE IDENTIFIER . STRING

    STRING          shift and go to state 77


state 52

    (10) statement -> DELETE1 NODE IDENTIFIER . FROM IDENTIFIER

    FROM            shift and go to state 78


state 53

    (11) statement -> SAVE GRAPH IDENTIFIER . TO STRING

    TO              shift and go to state 79


state 54

    (12) statement -> LOAD GRAPH IDENTIFIER . FROM STRING

    FROM            shift and go to state 80


state 55

    (14) statement -> IF NODE IDENTIFIER . IN IDENTIFIER THEN statement

    IN              shift and go to state 81


state 56

    (15) statement -> IF EDGE IDENTIFIER . ARROW IDENTIFIER IN IDENTIFIER THEN statement

    ARROW           shift and go to state 82


state 57

    (16) statement -> IF PATH IDENTIFIER . TO IDENTIFIER IN IDENTIFIER THEN statement

    TO              shift and go to state 83


state 58

    (17) statement -> IF FIND CYCLE . IN IDENTIFIER THEN statement

    IN              shift and go to state 84


state 59

    (18) statement -> IF WEIGHT OF . EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement

    EDGE            shift and go to state 85


state 60

    (19) statement -> IF NOT NODE . IDENTIFIER IN IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 86


state 61

    (20) statement -> IF NOT EDGE . IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 87


state 62

    (21) statement -> IF NOT PATH . IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 88


state 63

    (22) statement -> IF NOT FIND . CYCLE IN IDENTIFIER THEN statement

    CYCLE           shift and go to state 89


state 64

    (23) statement -> CLOSURE closure_type IN . IDENTIFIER

    IDENTIFIER      shift and go to state 90


state 65

    (29) statement -> LOOP NODE IDENTIFIER . IN IDENTIFIER block

    IN              shift and go to state 91


state 66

    (32) statement -> LOOP IDENTIFIER FROM . NUMBER TO NUMBER IN IDENTIFIER block

    NUMBER          shift and go to state 92


state 67

    (30) statement -> LOOP EDGE IDENTIFIER . ARROW IDENTIFIER IN IDENTIFIER block
    (33) statement -> LOOP EDGE IDENTIFIER . ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block

    ARROW           shift and go to state 93


state 68

    (31) statement -> LOOP FROM NUMBER . TO NUMBER block

    TO              shift and go to state 94


state 69

    (34) statement -> ADD NUMBER TO . WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

    WEIGHT          shift and go to state 95


state 70

    (1) statement -> NODE IDENTIFIER IN IDENTIFIER .

    $end            reduce using rule 1 (statement -> NODE IDENTIFIER IN IDENTIFIER .)
    NODE            reduce using rule 1 (statement -> NODE IDENTIFIER IN IDENTIFIER .)
    GRAPH           reduce using rule 1 (statement -> NODE IDENTIFIER IN IDENTIFIER .)
    EDGE            reduce using rule 1 (statement -> NODE IDENTIFIER IN IDENTIFIER .)
    VISUALIZE       reduce using rule 1 (statement -> NODE IDENTIFIER IN IDENTIFIER .)
    FIND            reduce using rule 1 (statement -> NODE IDENTIFIER IN IDENTIFIER .)
    COLOR           reduce using rule 1 (statement -> NODE IDENTIFIER IN IDENTIFIER .)
    DELETE1         reduce using rule 1 (statement -> NODE IDENTIFIER IN IDENTIFIER .)
    SAVE            reduce using rule 1 (statement -> NODE IDENTIFIER IN IDENTIFIER .)
    LOAD            reduce using rule 1 (statement -> NODE IDENTIFIER IN IDENTIFIER .)
    IF              reduce using rule 1 (statement -> NODE IDENTIFIER IN IDENTIFIER .)
    CLOSURE         reduce using rule 1 (statement -> NODE IDENTIFIER IN IDENTIFIER .)
    LOOP            reduce using rule 1 (statement -> NODE IDENTIFIER IN IDENTIFIER .)
    ADD             reduce using rule 1 (statement -> NODE IDENTIFIER IN IDENTIFIER .)


state 71

    (4) statement -> EDGE IDENTIFIER ARROW IDENTIFIER . WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> EDGE IDENTIFIER ARROW IDENTIFIER . IN IDENTIFIER

    WEIGHT          shift and go to state 96
    IN              shift and go to state 97


state 72

    (7) statement -> FIND CYCLE IN IDENTIFIER .

    $end            reduce using rule 7 (statement -> FIND CYCLE IN IDENTIFIER .)
    NODE            reduce using rule 7 (statement -> FIND CYCLE IN IDENTIFIER .)
    GRAPH           reduce using rule 7 (statement -> FIND CYCLE IN IDENTIFIER .)
    EDGE            reduce using rule 7 (statement -> FIND CYCLE IN IDENTIFIER .)
    VISUALIZE       reduce using rule 7 (statement -> FIND CYCLE IN IDENTIFIER .)
    FIND            reduce using rule 7 (statement -> FIND CYCLE IN IDENTIFIER .)
    COLOR           reduce using rule 7 (statement -> FIND CYCLE IN IDENTIFIER .)
    DELETE1         reduce using rule 7 (statement -> FIND CYCLE IN IDENTIFIER .)
    SAVE            reduce using rule 7 (statement -> FIND CYCLE IN IDENTIFIER .)
    LOAD            reduce using rule 7 (statement -> FIND CYCLE IN IDENTIFIER .)
    IF              reduce using rule 7 (statement -> FIND CYCLE IN IDENTIFIER .)
    CLOSURE         reduce using rule 7 (statement -> FIND CYCLE IN IDENTIFIER .)
    LOOP            reduce using rule 7 (statement -> FIND CYCLE IN IDENTIFIER .)
    ADD             reduce using rule 7 (statement -> FIND CYCLE IN IDENTIFIER .)


state 73

    (8) statement -> FIND PATH IDENTIFIER TO . IDENTIFIER IN IDENTIFIER

    IDENTIFIER      shift and go to state 98


state 74

    (13) statement -> FIND MST IN IDENTIFIER .

    $end            reduce using rule 13 (statement -> FIND MST IN IDENTIFIER .)
    NODE            reduce using rule 13 (statement -> FIND MST IN IDENTIFIER .)
    GRAPH           reduce using rule 13 (statement -> FIND MST IN IDENTIFIER .)
    EDGE            reduce using rule 13 (statement -> FIND MST IN IDENTIFIER .)
    VISUALIZE       reduce using rule 13 (statement -> FIND MST IN IDENTIFIER .)
    FIND            reduce using rule 13 (statement -> FIND MST IN IDENTIFIER .)
    COLOR           reduce using rule 13 (statement -> FIND MST IN IDENTIFIER .)
    DELETE1         reduce using rule 13 (statement -> FIND MST IN IDENTIFIER .)
    SAVE            reduce using rule 13 (statement -> FIND MST IN IDENTIFIER .)
    LOAD            reduce using rule 13 (statement -> FIND MST IN IDENTIFIER .)
    IF              reduce using rule 13 (statement -> FIND MST IN IDENTIFIER .)
    CLOSURE         reduce using rule 13 (statement -> FIND MST IN IDENTIFIER .)
    LOOP            reduce using rule 13 (statement -> FIND MST IN IDENTIFIER .)
    ADD             reduce using rule 13 (statement -> FIND MST IN IDENTIFIER .)


state 75

    (27) statement -> FIND BFS FROM IDENTIFIER . IN IDENTIFIER

    IN              shift and go to state 99


state 76

    (28) statement -> FIND DFS FROM IDENTIFIER . IN IDENTIFIER

    IN              shift and go to state 100


state 77

    (9) statement -> COLOR NODE IDENTIFIER STRING .

    $end            reduce using rule 9 (statement -> COLOR NODE IDENTIFIER STRING .)
    NODE            reduce using rule 9 (statement -> COLOR NODE IDENTIFIER STRING .)
    GRAPH           reduce using rule 9 (statement -> COLOR NODE IDENTIFIER STRING .)
    EDGE            reduce using rule 9 (statement -> COLOR NODE IDENTIFIER STRING .)
    VISUALIZE       reduce using rule 9 (statement -> COLOR NODE IDENTIFIER STRING .)
    FIND            reduce using rule 9 (statement -> COLOR NODE IDENTIFIER STRING .)
    COLOR           reduce using rule 9 (statement -> COLOR NODE IDENTIFIER STRING .)
    DELETE1         reduce using rule 9 (statement -> COLOR NODE IDENTIFIER STRING .)
    SAVE            reduce using rule 9 (statement -> COLOR NODE IDENTIFIER STRING .)
    LOAD            reduce using rule 9 (statement -> COLOR NODE IDENTIFIER STRING .)
    IF              reduce using rule 9 (statement -> COLOR NODE IDENTIFIER STRING .)
    CLOSURE         reduce using rule 9 (statement -> COLOR NODE IDENTIFIER STRING .)
    LOOP            reduce using rule 9 (statement -> COLOR NODE IDENTIFIER STRING .)
    ADD             reduce using rule 9 (statement -> COLOR NODE IDENTIFIER STRING .)


state 78

    (10) statement -> DELETE1 NODE IDENTIFIER FROM . IDENTIFIER

    IDENTIFIER      shift and go to state 101


state 79

    (11) statement -> SAVE GRAPH IDENTIFIER TO . STRING

    STRING          shift and go to state 102


state 80

    (12) statement -> LOAD GRAPH IDENTIFIER FROM . STRING

    STRING          shift and go to state 103


state 81

    (14) statement -> IF NODE IDENTIFIER IN . IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 104


state 82

    (15) statement -> IF EDGE IDENTIFIER ARROW . IDENTIFIER IN IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 105


state 83

    (16) statement -> IF PATH IDENTIFIER TO . IDENTIFIER IN IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 106


state 84

    (17) statement -> IF FIND CYCLE IN . IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 107


state 85

    (18) statement -> IF WEIGHT OF EDGE . IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 108


state 86

    (19) statement -> IF NOT NODE IDENTIFIER . IN IDENTIFIER THEN statement

    IN              shift and go to state 109


state 87

    (20) statement -> IF NOT EDGE IDENTIFIER . ARROW IDENTIFIER IN IDENTIFIER THEN statement

    ARROW           shift and go to state 110


state 88

    (21) statement -> IF NOT PATH IDENTIFIER . TO IDENTIFIER IN IDENTIFIER THEN statement

    TO              shift and go to state 111


state 89

    (22) statement -> IF NOT FIND CYCLE . IN IDENTIFIER THEN statement

    IN              shift and go to state 112


state 90

    (23) statement -> CLOSURE closure_type IN IDENTIFIER .

    $end            reduce using rule 23 (statement -> CLOSURE closure_type IN IDENTIFIER .)
    NODE            reduce using rule 23 (statement -> CLOSURE closure_type IN IDENTIFIER .)
    GRAPH           reduce using rule 23 (statement -> CLOSURE closure_type IN IDENTIFIER .)
    EDGE            reduce using rule 23 (statement -> CLOSURE closure_type IN IDENTIFIER .)
    VISUALIZE       reduce using rule 23 (statement -> CLOSURE closure_type IN IDENTIFIER .)
    FIND            reduce using rule 23 (statement -> CLOSURE closure_type IN IDENTIFIER .)
    COLOR           reduce using rule 23 (statement -> CLOSURE closure_type IN IDENTIFIER .)
    DELETE1         reduce using rule 23 (statement -> CLOSURE closure_type IN IDENTIFIER .)
    SAVE            reduce using rule 23 (statement -> CLOSURE closure_type IN IDENTIFIER .)
    LOAD            reduce using rule 23 (statement -> CLOSURE closure_type IN IDENTIFIER .)
    IF              reduce using rule 23 (statement -> CLOSURE closure_type IN IDENTIFIER .)
    CLOSURE         reduce using rule 23 (statement -> CLOSURE closure_type IN IDENTIFIER .)
    LOOP            reduce using rule 23 (statement -> CLOSURE closure_type IN IDENTIFIER .)
    ADD             reduce using rule 23 (statement -> CLOSURE closure_type IN IDENTIFIER .)


state 91

    (29) statement -> LOOP NODE IDENTIFIER IN . IDENTIFIER block

    IDENTIFIER      shift and go to state 113


state 92

    (32) statement -> LOOP IDENTIFIER FROM NUMBER . TO NUMBER IN IDENTIFIER block

    TO              shift and go to state 114


state 93

    (30) statement -> LOOP EDGE IDENTIFIER ARROW . IDENTIFIER IN IDENTIFIER block
    (33) statement -> LOOP EDGE IDENTIFIER ARROW . IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block

    IDENTIFIER      shift and go to state 115


state 94

    (31) statement -> LOOP FROM NUMBER TO . NUMBER block

    NUMBER          shift and go to state 116


state 95

    (34) statement -> ADD NUMBER TO WEIGHT . OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

    OF              shift and go to state 117


state 96

    (4) statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT . NUMBER IN IDENTIFIER

    NUMBER          shift and go to state 118


state 97

    (5) statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN . IDENTIFIER

    IDENTIFIER      shift and go to state 119


state 98

    (8) statement -> FIND PATH IDENTIFIER TO IDENTIFIER . IN IDENTIFIER

    IN              shift and go to state 120


state 99

    (27) statement -> FIND BFS FROM IDENTIFIER IN . IDENTIFIER

    IDENTIFIER      shift and go to state 121


state 100

    (28) statement -> FIND DFS FROM IDENTIFIER IN . IDENTIFIER

    IDENTIFIER      shift and go to state 122


state 101

    (10) statement -> DELETE1 NODE IDENTIFIER FROM IDENTIFIER .

    $end            reduce using rule 10 (statement -> DELETE1 NODE IDENTIFIER FROM IDENTIFIER .)
    NODE            reduce using rule 10 (statement -> DELETE1 NODE IDENTIFIER FROM IDENTIFIER .)
    GRAPH           reduce using rule 10 (statement -> DELETE1 NODE IDENTIFIER FROM IDENTIFIER .)
    EDGE            reduce using rule 10 (statement -> DELETE1 NODE IDENTIFIER FROM IDENTIFIER .)
    VISUALIZE       reduce using rule 10 (statement -> DELETE1 NODE IDENTIFIER FROM IDENTIFIER .)
    FIND            reduce using rule 10 (statement -> DELETE1 NODE IDENTIFIER FROM IDENTIFIER .)
    COLOR           reduce using rule 10 (statement -> DELETE1 NODE IDENTIFIER FROM IDENTIFIER .)
    DELETE1         reduce using rule 10 (statement -> DELETE1 NODE IDENTIFIER FROM IDENTIFIER .)
    SAVE            reduce using rule 10 (statement -> DELETE1 NODE IDENTIFIER FROM IDENTIFIER .)
    LOAD            reduce using rule 10 (statement -> DELETE1 NODE IDENTIFIER FROM IDENTIFIER .)
    IF              reduce using rule 10 (statement -> DELETE1 NODE IDENTIFIER FROM IDENTIFIER .)
    CLOSURE         reduce using rule 10 (statement -> DELETE1 NODE IDENTIFIER FROM IDENTIFIER .)
    LOOP            reduce using rule 10 (statement -> DELETE1 NODE IDENTIFIER FROM IDENTIFIER .)
    ADD             reduce using rule 10 (statement -> DELETE1 NODE IDENTIFIER FROM IDENTIFIER .)


state 102

    (11) statement -> SAVE GRAPH IDENTIFIER TO STRING .

    $end            reduce using rule 11 (statement -> SAVE GRAPH IDENTIFIER TO STRING .)
    NODE            reduce using rule 11 (statement -> SAVE GRAPH IDENTIFIER TO STRING .)
    GRAPH           reduce using rule 11 (statement -> SAVE GRAPH IDENTIFIER TO STRING .)
    EDGE            reduce using rule 11 (statement -> SAVE GRAPH IDENTIFIER TO STRING .)
    VISUALIZE       reduce using rule 11 (statement -> SAVE GRAPH IDENTIFIER TO STRING .)
    FIND            reduce using rule 11 (statement -> SAVE GRAPH IDENTIFIER TO STRING .)
    COLOR           reduce using rule 11 (statement -> SAVE GRAPH IDENTIFIER TO STRING .)
    DELETE1         reduce using rule 11 (statement -> SAVE GRAPH IDENTIFIER TO STRING .)
    SAVE            reduce using rule 11 (statement -> SAVE GRAPH IDENTIFIER TO STRING .)
    LOAD            reduce using rule 11 (statement -> SAVE GRAPH IDENTIFIER TO STRING .)
    IF              reduce using rule 11 (statement -> SAVE GRAPH IDENTIFIER TO STRING .)
    CLOSURE         reduce using rule 11 (statement -> SAVE GRAPH IDENTIFIER TO STRING .)
    LOOP            reduce using rule 11 (statement -> SAVE GRAPH IDENTIFIER TO STRING .)
    ADD             reduce using rule 11 (statement -> SAVE GRAPH IDENTIFIER TO STRING .)


state 103

    (12) statement -> LOAD GRAPH IDENTIFIER FROM STRING .

    $end            reduce using rule 12 (statement -> LOAD GRAPH IDENTIFIER FROM STRING .)
    NODE            reduce using rule 12 (statement -> LOAD GRAPH IDENTIFIER FROM STRING .)
    GRAPH           reduce using rule 12 (statement -> LOAD GRAPH IDENTIFIER FROM STRING .)
    EDGE            reduce using rule 12 (statement -> LOAD GRAPH IDENTIFIER FROM STRING .)
    VISUALIZE       reduce using rule 12 (statement -> LOAD GRAPH IDENTIFIER FROM STRING .)
    FIND            reduce using rule 12 (statement -> LOAD GRAPH IDENTIFIER FROM STRING .)
    COLOR           reduce using rule 12 (statement -> LOAD GRAPH IDENTIFIER FROM STRING .)
    DELETE1         reduce using rule 12 (statement -> LOAD GRAPH IDENTIFIER FROM STRING .)
    SAVE            reduce using rule 12 (statement -> LOAD GRAPH IDENTIFIER FROM STRING .)
    LOAD            reduce using rule 12 (statement -> LOAD GRAPH IDENTIFIER FROM STRING .)
    IF              reduce using rule 12 (statement -> LOAD GRAPH IDENTIFIER FROM STRING .)
    CLOSURE         reduce using rule 12 (statement -> LOAD GRAPH IDENTIFIER FROM STRING .)
    LOOP            reduce using rule 12 (statement -> LOAD GRAPH IDENTIFIER FROM STRING .)
    ADD             reduce using rule 12 (statement -> LOAD GRAPH IDENTIFIER FROM STRING .)


state 104

    (14) statement -> IF NODE IDENTIFIER IN IDENTIFIER . THEN statement

    THEN            shift and go to state 123


state 105

    (15) statement -> IF EDGE IDENTIFIER ARROW IDENTIFIER . IN IDENTIFIER THEN statement

    IN              shift and go to state 124


state 106

    (16) statement -> IF PATH IDENTIFIER TO IDENTIFIER . IN IDENTIFIER THEN statement

    IN              shift and go to state 125


state 107

    (17) statement -> IF FIND CYCLE IN IDENTIFIER . THEN statement

    THEN            shift and go to state 126


state 108

    (18) statement -> IF WEIGHT OF EDGE IDENTIFIER . ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement

    ARROW           shift and go to state 127


state 109

    (19) statement -> IF NOT NODE IDENTIFIER IN . IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 128


state 110

    (20) statement -> IF NOT EDGE IDENTIFIER ARROW . IDENTIFIER IN IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 129


state 111

    (21) statement -> IF NOT PATH IDENTIFIER TO . IDENTIFIER IN IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 130


state 112

    (22) statement -> IF NOT FIND CYCLE IN . IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 131


state 113

    (29) statement -> LOOP NODE IDENTIFIER IN IDENTIFIER . block
    (35) block -> . statement block
    (36) block -> . statement
    (1) statement -> . NODE IDENTIFIER IN IDENTIFIER
    (2) statement -> . GRAPH IDENTIFIER DIRECTED
    (3) statement -> . GRAPH IDENTIFIER
    (4) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (6) statement -> . VISUALIZE IDENTIFIER
    (7) statement -> . FIND CYCLE IN IDENTIFIER
    (8) statement -> . FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (9) statement -> . COLOR NODE IDENTIFIER STRING
    (10) statement -> . DELETE1 NODE IDENTIFIER FROM IDENTIFIER
    (11) statement -> . SAVE GRAPH IDENTIFIER TO STRING
    (12) statement -> . LOAD GRAPH IDENTIFIER FROM STRING
    (13) statement -> . FIND MST IN IDENTIFIER
    (14) statement -> . IF NODE IDENTIFIER IN IDENTIFIER THEN statement
    (15) statement -> . IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (16) statement -> . IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (17) statement -> . IF FIND CYCLE IN IDENTIFIER THEN statement
    (18) statement -> . IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement
    (19) statement -> . IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement
    (20) statement -> . IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (21) statement -> . IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (22) statement -> . IF NOT FIND CYCLE IN IDENTIFIER THEN statement
    (23) statement -> . CLOSURE closure_type IN IDENTIFIER
    (27) statement -> . FIND BFS FROM IDENTIFIER IN IDENTIFIER
    (28) statement -> . FIND DFS FROM IDENTIFIER IN IDENTIFIER
    (29) statement -> . LOOP NODE IDENTIFIER IN IDENTIFIER block
    (30) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block
    (31) statement -> . LOOP FROM NUMBER TO NUMBER block
    (32) statement -> . LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (33) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (34) statement -> . ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

    NODE            shift and go to state 2
    GRAPH           shift and go to state 3
    EDGE            shift and go to state 4
    VISUALIZE       shift and go to state 5
    FIND            shift and go to state 6
    COLOR           shift and go to state 7
    DELETE1         shift and go to state 8
    SAVE            shift and go to state 9
    LOAD            shift and go to state 10
    IF              shift and go to state 11
    CLOSURE         shift and go to state 12
    LOOP            shift and go to state 13
    ADD             shift and go to state 14

    block                          shift and go to state 132
    statement                      shift and go to state 133

state 114

    (32) statement -> LOOP IDENTIFIER FROM NUMBER TO . NUMBER IN IDENTIFIER block

    NUMBER          shift and go to state 134


state 115

    (30) statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER . IN IDENTIFIER block
    (33) statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER . FROM NUMBER TO NUMBER IN IDENTIFIER block

    IN              shift and go to state 135
    FROM            shift and go to state 136


state 116

    (31) statement -> LOOP FROM NUMBER TO NUMBER . block
    (35) block -> . statement block
    (36) block -> . statement
    (1) statement -> . NODE IDENTIFIER IN IDENTIFIER
    (2) statement -> . GRAPH IDENTIFIER DIRECTED
    (3) statement -> . GRAPH IDENTIFIER
    (4) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (6) statement -> . VISUALIZE IDENTIFIER
    (7) statement -> . FIND CYCLE IN IDENTIFIER
    (8) statement -> . FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (9) statement -> . COLOR NODE IDENTIFIER STRING
    (10) statement -> . DELETE1 NODE IDENTIFIER FROM IDENTIFIER
    (11) statement -> . SAVE GRAPH IDENTIFIER TO STRING
    (12) statement -> . LOAD GRAPH IDENTIFIER FROM STRING
    (13) statement -> . FIND MST IN IDENTIFIER
    (14) statement -> . IF NODE IDENTIFIER IN IDENTIFIER THEN statement
    (15) statement -> . IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (16) statement -> . IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (17) statement -> . IF FIND CYCLE IN IDENTIFIER THEN statement
    (18) statement -> . IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement
    (19) statement -> . IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement
    (20) statement -> . IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (21) statement -> . IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (22) statement -> . IF NOT FIND CYCLE IN IDENTIFIER THEN statement
    (23) statement -> . CLOSURE closure_type IN IDENTIFIER
    (27) statement -> . FIND BFS FROM IDENTIFIER IN IDENTIFIER
    (28) statement -> . FIND DFS FROM IDENTIFIER IN IDENTIFIER
    (29) statement -> . LOOP NODE IDENTIFIER IN IDENTIFIER block
    (30) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block
    (31) statement -> . LOOP FROM NUMBER TO NUMBER block
    (32) statement -> . LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (33) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (34) statement -> . ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

    NODE            shift and go to state 2
    GRAPH           shift and go to state 3
    EDGE            shift and go to state 4
    VISUALIZE       shift and go to state 5
    FIND            shift and go to state 6
    COLOR           shift and go to state 7
    DELETE1         shift and go to state 8
    SAVE            shift and go to state 9
    LOAD            shift and go to state 10
    IF              shift and go to state 11
    CLOSURE         shift and go to state 12
    LOOP            shift and go to state 13
    ADD             shift and go to state 14

    block                          shift and go to state 137
    statement                      shift and go to state 133

state 117

    (34) statement -> ADD NUMBER TO WEIGHT OF . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

    EDGE            shift and go to state 138


state 118

    (4) statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER . IN IDENTIFIER

    IN              shift and go to state 139


state 119

    (5) statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .

    $end            reduce using rule 5 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    NODE            reduce using rule 5 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    GRAPH           reduce using rule 5 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    EDGE            reduce using rule 5 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    VISUALIZE       reduce using rule 5 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    FIND            reduce using rule 5 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    COLOR           reduce using rule 5 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    DELETE1         reduce using rule 5 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    SAVE            reduce using rule 5 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    LOAD            reduce using rule 5 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    IF              reduce using rule 5 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    CLOSURE         reduce using rule 5 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    LOOP            reduce using rule 5 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    ADD             reduce using rule 5 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)


state 120

    (8) statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN . IDENTIFIER

    IDENTIFIER      shift and go to state 140


state 121

    (27) statement -> FIND BFS FROM IDENTIFIER IN IDENTIFIER .

    $end            reduce using rule 27 (statement -> FIND BFS FROM IDENTIFIER IN IDENTIFIER .)
    NODE            reduce using rule 27 (statement -> FIND BFS FROM IDENTIFIER IN IDENTIFIER .)
    GRAPH           reduce using rule 27 (statement -> FIND BFS FROM IDENTIFIER IN IDENTIFIER .)
    EDGE            reduce using rule 27 (statement -> FIND BFS FROM IDENTIFIER IN IDENTIFIER .)
    VISUALIZE       reduce using rule 27 (statement -> FIND BFS FROM IDENTIFIER IN IDENTIFIER .)
    FIND            reduce using rule 27 (statement -> FIND BFS FROM IDENTIFIER IN IDENTIFIER .)
    COLOR           reduce using rule 27 (statement -> FIND BFS FROM IDENTIFIER IN IDENTIFIER .)
    DELETE1         reduce using rule 27 (statement -> FIND BFS FROM IDENTIFIER IN IDENTIFIER .)
    SAVE            reduce using rule 27 (statement -> FIND BFS FROM IDENTIFIER IN IDENTIFIER .)
    LOAD            reduce using rule 27 (statement -> FIND BFS FROM IDENTIFIER IN IDENTIFIER .)
    IF              reduce using rule 27 (statement -> FIND BFS FROM IDENTIFIER IN IDENTIFIER .)
    CLOSURE         reduce using rule 27 (statement -> FIND BFS FROM IDENTIFIER IN IDENTIFIER .)
    LOOP            reduce using rule 27 (statement -> FIND BFS FROM IDENTIFIER IN IDENTIFIER .)
    ADD             reduce using rule 27 (statement -> FIND BFS FROM IDENTIFIER IN IDENTIFIER .)


state 122

    (28) statement -> FIND DFS FROM IDENTIFIER IN IDENTIFIER .

    $end            reduce using rule 28 (statement -> FIND DFS FROM IDENTIFIER IN IDENTIFIER .)
    NODE            reduce using rule 28 (statement -> FIND DFS FROM IDENTIFIER IN IDENTIFIER .)
    GRAPH           reduce using rule 28 (statement -> FIND DFS FROM IDENTIFIER IN IDENTIFIER .)
    EDGE            reduce using rule 28 (statement -> FIND DFS FROM IDENTIFIER IN IDENTIFIER .)
    VISUALIZE       reduce using rule 28 (statement -> FIND DFS FROM IDENTIFIER IN IDENTIFIER .)
    FIND            reduce using rule 28 (statement -> FIND DFS FROM IDENTIFIER IN IDENTIFIER .)
    COLOR           reduce using rule 28 (statement -> FIND DFS FROM IDENTIFIER IN IDENTIFIER .)
    DELETE1         reduce using rule 28 (statement -> FIND DFS FROM IDENTIFIER IN IDENTIFIER .)
    SAVE            reduce using rule 28 (statement -> FIND DFS FROM IDENTIFIER IN IDENTIFIER .)
    LOAD            reduce using rule 28 (statement -> FIND DFS FROM IDENTIFIER IN IDENTIFIER .)
    IF              reduce using rule 28 (statement -> FIND DFS FROM IDENTIFIER IN IDENTIFIER .)
    CLOSURE         reduce using rule 28 (statement -> FIND DFS FROM IDENTIFIER IN IDENTIFIER .)
    LOOP            reduce using rule 28 (statement -> FIND DFS FROM IDENTIFIER IN IDENTIFIER .)
    ADD             reduce using rule 28 (statement -> FIND DFS FROM IDENTIFIER IN IDENTIFIER .)


state 123

    (14) statement -> IF NODE IDENTIFIER IN IDENTIFIER THEN . statement
    (1) statement -> . NODE IDENTIFIER IN IDENTIFIER
    (2) statement -> . GRAPH IDENTIFIER DIRECTED
    (3) statement -> . GRAPH IDENTIFIER
    (4) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (6) statement -> . VISUALIZE IDENTIFIER
    (7) statement -> . FIND CYCLE IN IDENTIFIER
    (8) statement -> . FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (9) statement -> . COLOR NODE IDENTIFIER STRING
    (10) statement -> . DELETE1 NODE IDENTIFIER FROM IDENTIFIER
    (11) statement -> . SAVE GRAPH IDENTIFIER TO STRING
    (12) statement -> . LOAD GRAPH IDENTIFIER FROM STRING
    (13) statement -> . FIND MST IN IDENTIFIER
    (14) statement -> . IF NODE IDENTIFIER IN IDENTIFIER THEN statement
    (15) statement -> . IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (16) statement -> . IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (17) statement -> . IF FIND CYCLE IN IDENTIFIER THEN statement
    (18) statement -> . IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement
    (19) statement -> . IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement
    (20) statement -> . IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (21) statement -> . IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (22) statement -> . IF NOT FIND CYCLE IN IDENTIFIER THEN statement
    (23) statement -> . CLOSURE closure_type IN IDENTIFIER
    (27) statement -> . FIND BFS FROM IDENTIFIER IN IDENTIFIER
    (28) statement -> . FIND DFS FROM IDENTIFIER IN IDENTIFIER
    (29) statement -> . LOOP NODE IDENTIFIER IN IDENTIFIER block
    (30) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block
    (31) statement -> . LOOP FROM NUMBER TO NUMBER block
    (32) statement -> . LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (33) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (34) statement -> . ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

    NODE            shift and go to state 2
    GRAPH           shift and go to state 3
    EDGE            shift and go to state 4
    VISUALIZE       shift and go to state 5
    FIND            shift and go to state 6
    COLOR           shift and go to state 7
    DELETE1         shift and go to state 8
    SAVE            shift and go to state 9
    LOAD            shift and go to state 10
    IF              shift and go to state 11
    CLOSURE         shift and go to state 12
    LOOP            shift and go to state 13
    ADD             shift and go to state 14

    statement                      shift and go to state 141

state 124

    (15) statement -> IF EDGE IDENTIFIER ARROW IDENTIFIER IN . IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 142


state 125

    (16) statement -> IF PATH IDENTIFIER TO IDENTIFIER IN . IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 143


state 126

    (17) statement -> IF FIND CYCLE IN IDENTIFIER THEN . statement
    (1) statement -> . NODE IDENTIFIER IN IDENTIFIER
    (2) statement -> . GRAPH IDENTIFIER DIRECTED
    (3) statement -> . GRAPH IDENTIFIER
    (4) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (6) statement -> . VISUALIZE IDENTIFIER
    (7) statement -> . FIND CYCLE IN IDENTIFIER
    (8) statement -> . FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (9) statement -> . COLOR NODE IDENTIFIER STRING
    (10) statement -> . DELETE1 NODE IDENTIFIER FROM IDENTIFIER
    (11) statement -> . SAVE GRAPH IDENTIFIER TO STRING
    (12) statement -> . LOAD GRAPH IDENTIFIER FROM STRING
    (13) statement -> . FIND MST IN IDENTIFIER
    (14) statement -> . IF NODE IDENTIFIER IN IDENTIFIER THEN statement
    (15) statement -> . IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (16) statement -> . IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (17) statement -> . IF FIND CYCLE IN IDENTIFIER THEN statement
    (18) statement -> . IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement
    (19) statement -> . IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement
    (20) statement -> . IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (21) statement -> . IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (22) statement -> . IF NOT FIND CYCLE IN IDENTIFIER THEN statement
    (23) statement -> . CLOSURE closure_type IN IDENTIFIER
    (27) statement -> . FIND BFS FROM IDENTIFIER IN IDENTIFIER
    (28) statement -> . FIND DFS FROM IDENTIFIER IN IDENTIFIER
    (29) statement -> . LOOP NODE IDENTIFIER IN IDENTIFIER block
    (30) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block
    (31) statement -> . LOOP FROM NUMBER TO NUMBER block
    (32) statement -> . LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (33) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (34) statement -> . ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

    NODE            shift and go to state 2
    GRAPH           shift and go to state 3
    EDGE            shift and go to state 4
    VISUALIZE       shift and go to state 5
    FIND            shift and go to state 6
    COLOR           shift and go to state 7
    DELETE1         shift and go to state 8
    SAVE            shift and go to state 9
    LOAD            shift and go to state 10
    IF              shift and go to state 11
    CLOSURE         shift and go to state 12
    LOOP            shift and go to state 13
    ADD             shift and go to state 14

    statement                      shift and go to state 144

state 127

    (18) statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW . IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 145


state 128

    (19) statement -> IF NOT NODE IDENTIFIER IN IDENTIFIER . THEN statement

    THEN            shift and go to state 146


state 129

    (20) statement -> IF NOT EDGE IDENTIFIER ARROW IDENTIFIER . IN IDENTIFIER THEN statement

    IN              shift and go to state 147


state 130

    (21) statement -> IF NOT PATH IDENTIFIER TO IDENTIFIER . IN IDENTIFIER THEN statement

    IN              shift and go to state 148


state 131

    (22) statement -> IF NOT FIND CYCLE IN IDENTIFIER . THEN statement

    THEN            shift and go to state 149


state 132

    (29) statement -> LOOP NODE IDENTIFIER IN IDENTIFIER block .

    $end            reduce using rule 29 (statement -> LOOP NODE IDENTIFIER IN IDENTIFIER block .)
    NODE            reduce using rule 29 (statement -> LOOP NODE IDENTIFIER IN IDENTIFIER block .)
    GRAPH           reduce using rule 29 (statement -> LOOP NODE IDENTIFIER IN IDENTIFIER block .)
    EDGE            reduce using rule 29 (statement -> LOOP NODE IDENTIFIER IN IDENTIFIER block .)
    VISUALIZE       reduce using rule 29 (statement -> LOOP NODE IDENTIFIER IN IDENTIFIER block .)
    FIND            reduce using rule 29 (statement -> LOOP NODE IDENTIFIER IN IDENTIFIER block .)
    COLOR           reduce using rule 29 (statement -> LOOP NODE IDENTIFIER IN IDENTIFIER block .)
    DELETE1         reduce using rule 29 (statement -> LOOP NODE IDENTIFIER IN IDENTIFIER block .)
    SAVE            reduce using rule 29 (statement -> LOOP NODE IDENTIFIER IN IDENTIFIER block .)
    LOAD            reduce using rule 29 (statement -> LOOP NODE IDENTIFIER IN IDENTIFIER block .)
    IF              reduce using rule 29 (statement -> LOOP NODE IDENTIFIER IN IDENTIFIER block .)
    CLOSURE         reduce using rule 29 (statement -> LOOP NODE IDENTIFIER IN IDENTIFIER block .)
    LOOP            reduce using rule 29 (statement -> LOOP NODE IDENTIFIER IN IDENTIFIER block .)
    ADD             reduce using rule 29 (statement -> LOOP NODE IDENTIFIER IN IDENTIFIER block .)


state 133

    (35) block -> statement . block
    (36) block -> statement .
    (35) block -> . statement block
    (36) block -> . statement
    (1) statement -> . NODE IDENTIFIER IN IDENTIFIER
    (2) statement -> . GRAPH IDENTIFIER DIRECTED
    (3) statement -> . GRAPH IDENTIFIER
    (4) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (6) statement -> . VISUALIZE IDENTIFIER
    (7) statement -> . FIND CYCLE IN IDENTIFIER
    (8) statement -> . FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (9) statement -> . COLOR NODE IDENTIFIER STRING
    (10) statement -> . DELETE1 NODE IDENTIFIER FROM IDENTIFIER
    (11) statement -> . SAVE GRAPH IDENTIFIER TO STRING
    (12) statement -> . LOAD GRAPH IDENTIFIER FROM STRING
    (13) statement -> . FIND MST IN IDENTIFIER
    (14) statement -> . IF NODE IDENTIFIER IN IDENTIFIER THEN statement
    (15) statement -> . IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (16) statement -> . IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (17) statement -> . IF FIND CYCLE IN IDENTIFIER THEN statement
    (18) statement -> . IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement
    (19) statement -> . IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement
    (20) statement -> . IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (21) statement -> . IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (22) statement -> . IF NOT FIND CYCLE IN IDENTIFIER THEN statement
    (23) statement -> . CLOSURE closure_type IN IDENTIFIER
    (27) statement -> . FIND BFS FROM IDENTIFIER IN IDENTIFIER
    (28) statement -> . FIND DFS FROM IDENTIFIER IN IDENTIFIER
    (29) statement -> . LOOP NODE IDENTIFIER IN IDENTIFIER block
    (30) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block
    (31) statement -> . LOOP FROM NUMBER TO NUMBER block
    (32) statement -> . LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (33) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (34) statement -> . ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

  ! shift/reduce conflict for NODE resolved as shift
  ! shift/reduce conflict for GRAPH resolved as shift
  ! shift/reduce conflict for EDGE resolved as shift
  ! shift/reduce conflict for VISUALIZE resolved as shift
  ! shift/reduce conflict for FIND resolved as shift
  ! shift/reduce conflict for COLOR resolved as shift
  ! shift/reduce conflict for DELETE1 resolved as shift
  ! shift/reduce conflict for SAVE resolved as shift
  ! shift/reduce conflict for LOAD resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for CLOSURE resolved as shift
  ! shift/reduce conflict for LOOP resolved as shift
  ! shift/reduce conflict for ADD resolved as shift
    $end            reduce using rule 36 (block -> statement .)
    NODE            shift and go to state 2
    GRAPH           shift and go to state 3
    EDGE            shift and go to state 4
    VISUALIZE       shift and go to state 5
    FIND            shift and go to state 6
    COLOR           shift and go to state 7
    DELETE1         shift and go to state 8
    SAVE            shift and go to state 9
    LOAD            shift and go to state 10
    IF              shift and go to state 11
    CLOSURE         shift and go to state 12
    LOOP            shift and go to state 13
    ADD             shift and go to state 14

  ! NODE            [ reduce using rule 36 (block -> statement .) ]
  ! GRAPH           [ reduce using rule 36 (block -> statement .) ]
  ! EDGE            [ reduce using rule 36 (block -> statement .) ]
  ! VISUALIZE       [ reduce using rule 36 (block -> statement .) ]
  ! FIND            [ reduce using rule 36 (block -> statement .) ]
  ! COLOR           [ reduce using rule 36 (block -> statement .) ]
  ! DELETE1         [ reduce using rule 36 (block -> statement .) ]
  ! SAVE            [ reduce using rule 36 (block -> statement .) ]
  ! LOAD            [ reduce using rule 36 (block -> statement .) ]
  ! IF              [ reduce using rule 36 (block -> statement .) ]
  ! CLOSURE         [ reduce using rule 36 (block -> statement .) ]
  ! LOOP            [ reduce using rule 36 (block -> statement .) ]
  ! ADD             [ reduce using rule 36 (block -> statement .) ]

    statement                      shift and go to state 133
    block                          shift and go to state 150

state 134

    (32) statement -> LOOP IDENTIFIER FROM NUMBER TO NUMBER . IN IDENTIFIER block

    IN              shift and go to state 151


state 135

    (30) statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN . IDENTIFIER block

    IDENTIFIER      shift and go to state 152


state 136

    (33) statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM . NUMBER TO NUMBER IN IDENTIFIER block

    NUMBER          shift and go to state 153


state 137

    (31) statement -> LOOP FROM NUMBER TO NUMBER block .

    $end            reduce using rule 31 (statement -> LOOP FROM NUMBER TO NUMBER block .)
    NODE            reduce using rule 31 (statement -> LOOP FROM NUMBER TO NUMBER block .)
    GRAPH           reduce using rule 31 (statement -> LOOP FROM NUMBER TO NUMBER block .)
    EDGE            reduce using rule 31 (statement -> LOOP FROM NUMBER TO NUMBER block .)
    VISUALIZE       reduce using rule 31 (statement -> LOOP FROM NUMBER TO NUMBER block .)
    FIND            reduce using rule 31 (statement -> LOOP FROM NUMBER TO NUMBER block .)
    COLOR           reduce using rule 31 (statement -> LOOP FROM NUMBER TO NUMBER block .)
    DELETE1         reduce using rule 31 (statement -> LOOP FROM NUMBER TO NUMBER block .)
    SAVE            reduce using rule 31 (statement -> LOOP FROM NUMBER TO NUMBER block .)
    LOAD            reduce using rule 31 (statement -> LOOP FROM NUMBER TO NUMBER block .)
    IF              reduce using rule 31 (statement -> LOOP FROM NUMBER TO NUMBER block .)
    CLOSURE         reduce using rule 31 (statement -> LOOP FROM NUMBER TO NUMBER block .)
    LOOP            reduce using rule 31 (statement -> LOOP FROM NUMBER TO NUMBER block .)
    ADD             reduce using rule 31 (statement -> LOOP FROM NUMBER TO NUMBER block .)


state 138

    (34) statement -> ADD NUMBER TO WEIGHT OF EDGE . IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

    IDENTIFIER      shift and go to state 154


state 139

    (4) statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN . IDENTIFIER

    IDENTIFIER      shift and go to state 155


state 140

    (8) statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER .

    $end            reduce using rule 8 (statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER .)
    NODE            reduce using rule 8 (statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER .)
    GRAPH           reduce using rule 8 (statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER .)
    EDGE            reduce using rule 8 (statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER .)
    VISUALIZE       reduce using rule 8 (statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER .)
    FIND            reduce using rule 8 (statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER .)
    COLOR           reduce using rule 8 (statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER .)
    DELETE1         reduce using rule 8 (statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER .)
    SAVE            reduce using rule 8 (statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER .)
    LOAD            reduce using rule 8 (statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER .)
    IF              reduce using rule 8 (statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER .)
    CLOSURE         reduce using rule 8 (statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER .)
    LOOP            reduce using rule 8 (statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER .)
    ADD             reduce using rule 8 (statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER .)


state 141

    (14) statement -> IF NODE IDENTIFIER IN IDENTIFIER THEN statement .

    $end            reduce using rule 14 (statement -> IF NODE IDENTIFIER IN IDENTIFIER THEN statement .)
    NODE            reduce using rule 14 (statement -> IF NODE IDENTIFIER IN IDENTIFIER THEN statement .)
    GRAPH           reduce using rule 14 (statement -> IF NODE IDENTIFIER IN IDENTIFIER THEN statement .)
    EDGE            reduce using rule 14 (statement -> IF NODE IDENTIFIER IN IDENTIFIER THEN statement .)
    VISUALIZE       reduce using rule 14 (statement -> IF NODE IDENTIFIER IN IDENTIFIER THEN statement .)
    FIND            reduce using rule 14 (statement -> IF NODE IDENTIFIER IN IDENTIFIER THEN statement .)
    COLOR           reduce using rule 14 (statement -> IF NODE IDENTIFIER IN IDENTIFIER THEN statement .)
    DELETE1         reduce using rule 14 (statement -> IF NODE IDENTIFIER IN IDENTIFIER THEN statement .)
    SAVE            reduce using rule 14 (statement -> IF NODE IDENTIFIER IN IDENTIFIER THEN statement .)
    LOAD            reduce using rule 14 (statement -> IF NODE IDENTIFIER IN IDENTIFIER THEN statement .)
    IF              reduce using rule 14 (statement -> IF NODE IDENTIFIER IN IDENTIFIER THEN statement .)
    CLOSURE         reduce using rule 14 (statement -> IF NODE IDENTIFIER IN IDENTIFIER THEN statement .)
    LOOP            reduce using rule 14 (statement -> IF NODE IDENTIFIER IN IDENTIFIER THEN statement .)
    ADD             reduce using rule 14 (statement -> IF NODE IDENTIFIER IN IDENTIFIER THEN statement .)


state 142

    (15) statement -> IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER . THEN statement

    THEN            shift and go to state 156


state 143

    (16) statement -> IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER . THEN statement

    THEN            shift and go to state 157


state 144

    (17) statement -> IF FIND CYCLE IN IDENTIFIER THEN statement .

    $end            reduce using rule 17 (statement -> IF FIND CYCLE IN IDENTIFIER THEN statement .)
    NODE            reduce using rule 17 (statement -> IF FIND CYCLE IN IDENTIFIER THEN statement .)
    GRAPH           reduce using rule 17 (statement -> IF FIND CYCLE IN IDENTIFIER THEN statement .)
    EDGE            reduce using rule 17 (statement -> IF FIND CYCLE IN IDENTIFIER THEN statement .)
    VISUALIZE       reduce using rule 17 (statement -> IF FIND CYCLE IN IDENTIFIER THEN statement .)
    FIND            reduce using rule 17 (statement -> IF FIND CYCLE IN IDENTIFIER THEN statement .)
    COLOR           reduce using rule 17 (statement -> IF FIND CYCLE IN IDENTIFIER THEN statement .)
    DELETE1         reduce using rule 17 (statement -> IF FIND CYCLE IN IDENTIFIER THEN statement .)
    SAVE            reduce using rule 17 (statement -> IF FIND CYCLE IN IDENTIFIER THEN statement .)
    LOAD            reduce using rule 17 (statement -> IF FIND CYCLE IN IDENTIFIER THEN statement .)
    IF              reduce using rule 17 (statement -> IF FIND CYCLE IN IDENTIFIER THEN statement .)
    CLOSURE         reduce using rule 17 (statement -> IF FIND CYCLE IN IDENTIFIER THEN statement .)
    LOOP            reduce using rule 17 (statement -> IF FIND CYCLE IN IDENTIFIER THEN statement .)
    ADD             reduce using rule 17 (statement -> IF FIND CYCLE IN IDENTIFIER THEN statement .)


state 145

    (18) statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER . IS GREATER THAN NUMBER IN IDENTIFIER THEN statement

    IS              shift and go to state 158


state 146

    (19) statement -> IF NOT NODE IDENTIFIER IN IDENTIFIER THEN . statement
    (1) statement -> . NODE IDENTIFIER IN IDENTIFIER
    (2) statement -> . GRAPH IDENTIFIER DIRECTED
    (3) statement -> . GRAPH IDENTIFIER
    (4) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (6) statement -> . VISUALIZE IDENTIFIER
    (7) statement -> . FIND CYCLE IN IDENTIFIER
    (8) statement -> . FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (9) statement -> . COLOR NODE IDENTIFIER STRING
    (10) statement -> . DELETE1 NODE IDENTIFIER FROM IDENTIFIER
    (11) statement -> . SAVE GRAPH IDENTIFIER TO STRING
    (12) statement -> . LOAD GRAPH IDENTIFIER FROM STRING
    (13) statement -> . FIND MST IN IDENTIFIER
    (14) statement -> . IF NODE IDENTIFIER IN IDENTIFIER THEN statement
    (15) statement -> . IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (16) statement -> . IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (17) statement -> . IF FIND CYCLE IN IDENTIFIER THEN statement
    (18) statement -> . IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement
    (19) statement -> . IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement
    (20) statement -> . IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (21) statement -> . IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (22) statement -> . IF NOT FIND CYCLE IN IDENTIFIER THEN statement
    (23) statement -> . CLOSURE closure_type IN IDENTIFIER
    (27) statement -> . FIND BFS FROM IDENTIFIER IN IDENTIFIER
    (28) statement -> . FIND DFS FROM IDENTIFIER IN IDENTIFIER
    (29) statement -> . LOOP NODE IDENTIFIER IN IDENTIFIER block
    (30) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block
    (31) statement -> . LOOP FROM NUMBER TO NUMBER block
    (32) statement -> . LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (33) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (34) statement -> . ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

    NODE            shift and go to state 2
    GRAPH           shift and go to state 3
    EDGE            shift and go to state 4
    VISUALIZE       shift and go to state 5
    FIND            shift and go to state 6
    COLOR           shift and go to state 7
    DELETE1         shift and go to state 8
    SAVE            shift and go to state 9
    LOAD            shift and go to state 10
    IF              shift and go to state 11
    CLOSURE         shift and go to state 12
    LOOP            shift and go to state 13
    ADD             shift and go to state 14

    statement                      shift and go to state 159

state 147

    (20) statement -> IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN . IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 160


state 148

    (21) statement -> IF NOT PATH IDENTIFIER TO IDENTIFIER IN . IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 161


state 149

    (22) statement -> IF NOT FIND CYCLE IN IDENTIFIER THEN . statement
    (1) statement -> . NODE IDENTIFIER IN IDENTIFIER
    (2) statement -> . GRAPH IDENTIFIER DIRECTED
    (3) statement -> . GRAPH IDENTIFIER
    (4) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (6) statement -> . VISUALIZE IDENTIFIER
    (7) statement -> . FIND CYCLE IN IDENTIFIER
    (8) statement -> . FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (9) statement -> . COLOR NODE IDENTIFIER STRING
    (10) statement -> . DELETE1 NODE IDENTIFIER FROM IDENTIFIER
    (11) statement -> . SAVE GRAPH IDENTIFIER TO STRING
    (12) statement -> . LOAD GRAPH IDENTIFIER FROM STRING
    (13) statement -> . FIND MST IN IDENTIFIER
    (14) statement -> . IF NODE IDENTIFIER IN IDENTIFIER THEN statement
    (15) statement -> . IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (16) statement -> . IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (17) statement -> . IF FIND CYCLE IN IDENTIFIER THEN statement
    (18) statement -> . IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement
    (19) statement -> . IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement
    (20) statement -> . IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (21) statement -> . IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (22) statement -> . IF NOT FIND CYCLE IN IDENTIFIER THEN statement
    (23) statement -> . CLOSURE closure_type IN IDENTIFIER
    (27) statement -> . FIND BFS FROM IDENTIFIER IN IDENTIFIER
    (28) statement -> . FIND DFS FROM IDENTIFIER IN IDENTIFIER
    (29) statement -> . LOOP NODE IDENTIFIER IN IDENTIFIER block
    (30) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block
    (31) statement -> . LOOP FROM NUMBER TO NUMBER block
    (32) statement -> . LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (33) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (34) statement -> . ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

    NODE            shift and go to state 2
    GRAPH           shift and go to state 3
    EDGE            shift and go to state 4
    VISUALIZE       shift and go to state 5
    FIND            shift and go to state 6
    COLOR           shift and go to state 7
    DELETE1         shift and go to state 8
    SAVE            shift and go to state 9
    LOAD            shift and go to state 10
    IF              shift and go to state 11
    CLOSURE         shift and go to state 12
    LOOP            shift and go to state 13
    ADD             shift and go to state 14

    statement                      shift and go to state 162

state 150

    (35) block -> statement block .

    $end            reduce using rule 35 (block -> statement block .)
    NODE            reduce using rule 35 (block -> statement block .)
    GRAPH           reduce using rule 35 (block -> statement block .)
    EDGE            reduce using rule 35 (block -> statement block .)
    VISUALIZE       reduce using rule 35 (block -> statement block .)
    FIND            reduce using rule 35 (block -> statement block .)
    COLOR           reduce using rule 35 (block -> statement block .)
    DELETE1         reduce using rule 35 (block -> statement block .)
    SAVE            reduce using rule 35 (block -> statement block .)
    LOAD            reduce using rule 35 (block -> statement block .)
    IF              reduce using rule 35 (block -> statement block .)
    CLOSURE         reduce using rule 35 (block -> statement block .)
    LOOP            reduce using rule 35 (block -> statement block .)
    ADD             reduce using rule 35 (block -> statement block .)


state 151

    (32) statement -> LOOP IDENTIFIER FROM NUMBER TO NUMBER IN . IDENTIFIER block

    IDENTIFIER      shift and go to state 163


state 152

    (30) statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER . block
    (35) block -> . statement block
    (36) block -> . statement
    (1) statement -> . NODE IDENTIFIER IN IDENTIFIER
    (2) statement -> . GRAPH IDENTIFIER DIRECTED
    (3) statement -> . GRAPH IDENTIFIER
    (4) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (6) statement -> . VISUALIZE IDENTIFIER
    (7) statement -> . FIND CYCLE IN IDENTIFIER
    (8) statement -> . FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (9) statement -> . COLOR NODE IDENTIFIER STRING
    (10) statement -> . DELETE1 NODE IDENTIFIER FROM IDENTIFIER
    (11) statement -> . SAVE GRAPH IDENTIFIER TO STRING
    (12) statement -> . LOAD GRAPH IDENTIFIER FROM STRING
    (13) statement -> . FIND MST IN IDENTIFIER
    (14) statement -> . IF NODE IDENTIFIER IN IDENTIFIER THEN statement
    (15) statement -> . IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (16) statement -> . IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (17) statement -> . IF FIND CYCLE IN IDENTIFIER THEN statement
    (18) statement -> . IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement
    (19) statement -> . IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement
    (20) statement -> . IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (21) statement -> . IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (22) statement -> . IF NOT FIND CYCLE IN IDENTIFIER THEN statement
    (23) statement -> . CLOSURE closure_type IN IDENTIFIER
    (27) statement -> . FIND BFS FROM IDENTIFIER IN IDENTIFIER
    (28) statement -> . FIND DFS FROM IDENTIFIER IN IDENTIFIER
    (29) statement -> . LOOP NODE IDENTIFIER IN IDENTIFIER block
    (30) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block
    (31) statement -> . LOOP FROM NUMBER TO NUMBER block
    (32) statement -> . LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (33) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (34) statement -> . ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

    NODE            shift and go to state 2
    GRAPH           shift and go to state 3
    EDGE            shift and go to state 4
    VISUALIZE       shift and go to state 5
    FIND            shift and go to state 6
    COLOR           shift and go to state 7
    DELETE1         shift and go to state 8
    SAVE            shift and go to state 9
    LOAD            shift and go to state 10
    IF              shift and go to state 11
    CLOSURE         shift and go to state 12
    LOOP            shift and go to state 13
    ADD             shift and go to state 14

    block                          shift and go to state 164
    statement                      shift and go to state 133

state 153

    (33) statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER . TO NUMBER IN IDENTIFIER block

    TO              shift and go to state 165


state 154

    (34) statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER . ARROW IDENTIFIER IN IDENTIFIER

    ARROW           shift and go to state 166


state 155

    (4) statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER .

    $end            reduce using rule 4 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER .)
    NODE            reduce using rule 4 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER .)
    GRAPH           reduce using rule 4 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER .)
    EDGE            reduce using rule 4 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER .)
    VISUALIZE       reduce using rule 4 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER .)
    FIND            reduce using rule 4 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER .)
    COLOR           reduce using rule 4 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER .)
    DELETE1         reduce using rule 4 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER .)
    SAVE            reduce using rule 4 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER .)
    LOAD            reduce using rule 4 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER .)
    IF              reduce using rule 4 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER .)
    CLOSURE         reduce using rule 4 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER .)
    LOOP            reduce using rule 4 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER .)
    ADD             reduce using rule 4 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER .)


state 156

    (15) statement -> IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN . statement
    (1) statement -> . NODE IDENTIFIER IN IDENTIFIER
    (2) statement -> . GRAPH IDENTIFIER DIRECTED
    (3) statement -> . GRAPH IDENTIFIER
    (4) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (6) statement -> . VISUALIZE IDENTIFIER
    (7) statement -> . FIND CYCLE IN IDENTIFIER
    (8) statement -> . FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (9) statement -> . COLOR NODE IDENTIFIER STRING
    (10) statement -> . DELETE1 NODE IDENTIFIER FROM IDENTIFIER
    (11) statement -> . SAVE GRAPH IDENTIFIER TO STRING
    (12) statement -> . LOAD GRAPH IDENTIFIER FROM STRING
    (13) statement -> . FIND MST IN IDENTIFIER
    (14) statement -> . IF NODE IDENTIFIER IN IDENTIFIER THEN statement
    (15) statement -> . IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (16) statement -> . IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (17) statement -> . IF FIND CYCLE IN IDENTIFIER THEN statement
    (18) statement -> . IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement
    (19) statement -> . IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement
    (20) statement -> . IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (21) statement -> . IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (22) statement -> . IF NOT FIND CYCLE IN IDENTIFIER THEN statement
    (23) statement -> . CLOSURE closure_type IN IDENTIFIER
    (27) statement -> . FIND BFS FROM IDENTIFIER IN IDENTIFIER
    (28) statement -> . FIND DFS FROM IDENTIFIER IN IDENTIFIER
    (29) statement -> . LOOP NODE IDENTIFIER IN IDENTIFIER block
    (30) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block
    (31) statement -> . LOOP FROM NUMBER TO NUMBER block
    (32) statement -> . LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (33) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (34) statement -> . ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

    NODE            shift and go to state 2
    GRAPH           shift and go to state 3
    EDGE            shift and go to state 4
    VISUALIZE       shift and go to state 5
    FIND            shift and go to state 6
    COLOR           shift and go to state 7
    DELETE1         shift and go to state 8
    SAVE            shift and go to state 9
    LOAD            shift and go to state 10
    IF              shift and go to state 11
    CLOSURE         shift and go to state 12
    LOOP            shift and go to state 13
    ADD             shift and go to state 14

    statement                      shift and go to state 167

state 157

    (16) statement -> IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN . statement
    (1) statement -> . NODE IDENTIFIER IN IDENTIFIER
    (2) statement -> . GRAPH IDENTIFIER DIRECTED
    (3) statement -> . GRAPH IDENTIFIER
    (4) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (6) statement -> . VISUALIZE IDENTIFIER
    (7) statement -> . FIND CYCLE IN IDENTIFIER
    (8) statement -> . FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (9) statement -> . COLOR NODE IDENTIFIER STRING
    (10) statement -> . DELETE1 NODE IDENTIFIER FROM IDENTIFIER
    (11) statement -> . SAVE GRAPH IDENTIFIER TO STRING
    (12) statement -> . LOAD GRAPH IDENTIFIER FROM STRING
    (13) statement -> . FIND MST IN IDENTIFIER
    (14) statement -> . IF NODE IDENTIFIER IN IDENTIFIER THEN statement
    (15) statement -> . IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (16) statement -> . IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (17) statement -> . IF FIND CYCLE IN IDENTIFIER THEN statement
    (18) statement -> . IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement
    (19) statement -> . IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement
    (20) statement -> . IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (21) statement -> . IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (22) statement -> . IF NOT FIND CYCLE IN IDENTIFIER THEN statement
    (23) statement -> . CLOSURE closure_type IN IDENTIFIER
    (27) statement -> . FIND BFS FROM IDENTIFIER IN IDENTIFIER
    (28) statement -> . FIND DFS FROM IDENTIFIER IN IDENTIFIER
    (29) statement -> . LOOP NODE IDENTIFIER IN IDENTIFIER block
    (30) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block
    (31) statement -> . LOOP FROM NUMBER TO NUMBER block
    (32) statement -> . LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (33) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (34) statement -> . ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

    NODE            shift and go to state 2
    GRAPH           shift and go to state 3
    EDGE            shift and go to state 4
    VISUALIZE       shift and go to state 5
    FIND            shift and go to state 6
    COLOR           shift and go to state 7
    DELETE1         shift and go to state 8
    SAVE            shift and go to state 9
    LOAD            shift and go to state 10
    IF              shift and go to state 11
    CLOSURE         shift and go to state 12
    LOOP            shift and go to state 13
    ADD             shift and go to state 14

    statement                      shift and go to state 168

state 158

    (18) statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS . GREATER THAN NUMBER IN IDENTIFIER THEN statement

    GREATER         shift and go to state 169


state 159

    (19) statement -> IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement .

    $end            reduce using rule 19 (statement -> IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement .)
    NODE            reduce using rule 19 (statement -> IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement .)
    GRAPH           reduce using rule 19 (statement -> IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement .)
    EDGE            reduce using rule 19 (statement -> IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement .)
    VISUALIZE       reduce using rule 19 (statement -> IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement .)
    FIND            reduce using rule 19 (statement -> IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement .)
    COLOR           reduce using rule 19 (statement -> IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement .)
    DELETE1         reduce using rule 19 (statement -> IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement .)
    SAVE            reduce using rule 19 (statement -> IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement .)
    LOAD            reduce using rule 19 (statement -> IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement .)
    IF              reduce using rule 19 (statement -> IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement .)
    CLOSURE         reduce using rule 19 (statement -> IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement .)
    LOOP            reduce using rule 19 (statement -> IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement .)
    ADD             reduce using rule 19 (statement -> IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement .)


state 160

    (20) statement -> IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER . THEN statement

    THEN            shift and go to state 170


state 161

    (21) statement -> IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER . THEN statement

    THEN            shift and go to state 171


state 162

    (22) statement -> IF NOT FIND CYCLE IN IDENTIFIER THEN statement .

    $end            reduce using rule 22 (statement -> IF NOT FIND CYCLE IN IDENTIFIER THEN statement .)
    NODE            reduce using rule 22 (statement -> IF NOT FIND CYCLE IN IDENTIFIER THEN statement .)
    GRAPH           reduce using rule 22 (statement -> IF NOT FIND CYCLE IN IDENTIFIER THEN statement .)
    EDGE            reduce using rule 22 (statement -> IF NOT FIND CYCLE IN IDENTIFIER THEN statement .)
    VISUALIZE       reduce using rule 22 (statement -> IF NOT FIND CYCLE IN IDENTIFIER THEN statement .)
    FIND            reduce using rule 22 (statement -> IF NOT FIND CYCLE IN IDENTIFIER THEN statement .)
    COLOR           reduce using rule 22 (statement -> IF NOT FIND CYCLE IN IDENTIFIER THEN statement .)
    DELETE1         reduce using rule 22 (statement -> IF NOT FIND CYCLE IN IDENTIFIER THEN statement .)
    SAVE            reduce using rule 22 (statement -> IF NOT FIND CYCLE IN IDENTIFIER THEN statement .)
    LOAD            reduce using rule 22 (statement -> IF NOT FIND CYCLE IN IDENTIFIER THEN statement .)
    IF              reduce using rule 22 (statement -> IF NOT FIND CYCLE IN IDENTIFIER THEN statement .)
    CLOSURE         reduce using rule 22 (statement -> IF NOT FIND CYCLE IN IDENTIFIER THEN statement .)
    LOOP            reduce using rule 22 (statement -> IF NOT FIND CYCLE IN IDENTIFIER THEN statement .)
    ADD             reduce using rule 22 (statement -> IF NOT FIND CYCLE IN IDENTIFIER THEN statement .)


state 163

    (32) statement -> LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER . block
    (35) block -> . statement block
    (36) block -> . statement
    (1) statement -> . NODE IDENTIFIER IN IDENTIFIER
    (2) statement -> . GRAPH IDENTIFIER DIRECTED
    (3) statement -> . GRAPH IDENTIFIER
    (4) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (6) statement -> . VISUALIZE IDENTIFIER
    (7) statement -> . FIND CYCLE IN IDENTIFIER
    (8) statement -> . FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (9) statement -> . COLOR NODE IDENTIFIER STRING
    (10) statement -> . DELETE1 NODE IDENTIFIER FROM IDENTIFIER
    (11) statement -> . SAVE GRAPH IDENTIFIER TO STRING
    (12) statement -> . LOAD GRAPH IDENTIFIER FROM STRING
    (13) statement -> . FIND MST IN IDENTIFIER
    (14) statement -> . IF NODE IDENTIFIER IN IDENTIFIER THEN statement
    (15) statement -> . IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (16) statement -> . IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (17) statement -> . IF FIND CYCLE IN IDENTIFIER THEN statement
    (18) statement -> . IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement
    (19) statement -> . IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement
    (20) statement -> . IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (21) statement -> . IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (22) statement -> . IF NOT FIND CYCLE IN IDENTIFIER THEN statement
    (23) statement -> . CLOSURE closure_type IN IDENTIFIER
    (27) statement -> . FIND BFS FROM IDENTIFIER IN IDENTIFIER
    (28) statement -> . FIND DFS FROM IDENTIFIER IN IDENTIFIER
    (29) statement -> . LOOP NODE IDENTIFIER IN IDENTIFIER block
    (30) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block
    (31) statement -> . LOOP FROM NUMBER TO NUMBER block
    (32) statement -> . LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (33) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (34) statement -> . ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

    NODE            shift and go to state 2
    GRAPH           shift and go to state 3
    EDGE            shift and go to state 4
    VISUALIZE       shift and go to state 5
    FIND            shift and go to state 6
    COLOR           shift and go to state 7
    DELETE1         shift and go to state 8
    SAVE            shift and go to state 9
    LOAD            shift and go to state 10
    IF              shift and go to state 11
    CLOSURE         shift and go to state 12
    LOOP            shift and go to state 13
    ADD             shift and go to state 14

    block                          shift and go to state 172
    statement                      shift and go to state 133

state 164

    (30) statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block .

    $end            reduce using rule 30 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block .)
    NODE            reduce using rule 30 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block .)
    GRAPH           reduce using rule 30 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block .)
    EDGE            reduce using rule 30 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block .)
    VISUALIZE       reduce using rule 30 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block .)
    FIND            reduce using rule 30 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block .)
    COLOR           reduce using rule 30 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block .)
    DELETE1         reduce using rule 30 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block .)
    SAVE            reduce using rule 30 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block .)
    LOAD            reduce using rule 30 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block .)
    IF              reduce using rule 30 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block .)
    CLOSURE         reduce using rule 30 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block .)
    LOOP            reduce using rule 30 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block .)
    ADD             reduce using rule 30 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block .)


state 165

    (33) statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO . NUMBER IN IDENTIFIER block

    NUMBER          shift and go to state 173


state 166

    (34) statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW . IDENTIFIER IN IDENTIFIER

    IDENTIFIER      shift and go to state 174


state 167

    (15) statement -> IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement .

    $end            reduce using rule 15 (statement -> IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement .)
    NODE            reduce using rule 15 (statement -> IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement .)
    GRAPH           reduce using rule 15 (statement -> IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement .)
    EDGE            reduce using rule 15 (statement -> IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement .)
    VISUALIZE       reduce using rule 15 (statement -> IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement .)
    FIND            reduce using rule 15 (statement -> IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement .)
    COLOR           reduce using rule 15 (statement -> IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement .)
    DELETE1         reduce using rule 15 (statement -> IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement .)
    SAVE            reduce using rule 15 (statement -> IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement .)
    LOAD            reduce using rule 15 (statement -> IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement .)
    IF              reduce using rule 15 (statement -> IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement .)
    CLOSURE         reduce using rule 15 (statement -> IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement .)
    LOOP            reduce using rule 15 (statement -> IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement .)
    ADD             reduce using rule 15 (statement -> IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement .)


state 168

    (16) statement -> IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement .

    $end            reduce using rule 16 (statement -> IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement .)
    NODE            reduce using rule 16 (statement -> IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement .)
    GRAPH           reduce using rule 16 (statement -> IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement .)
    EDGE            reduce using rule 16 (statement -> IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement .)
    VISUALIZE       reduce using rule 16 (statement -> IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement .)
    FIND            reduce using rule 16 (statement -> IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement .)
    COLOR           reduce using rule 16 (statement -> IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement .)
    DELETE1         reduce using rule 16 (statement -> IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement .)
    SAVE            reduce using rule 16 (statement -> IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement .)
    LOAD            reduce using rule 16 (statement -> IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement .)
    IF              reduce using rule 16 (statement -> IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement .)
    CLOSURE         reduce using rule 16 (statement -> IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement .)
    LOOP            reduce using rule 16 (statement -> IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement .)
    ADD             reduce using rule 16 (statement -> IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement .)


state 169

    (18) statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER . THAN NUMBER IN IDENTIFIER THEN statement

    THAN            shift and go to state 175


state 170

    (20) statement -> IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN . statement
    (1) statement -> . NODE IDENTIFIER IN IDENTIFIER
    (2) statement -> . GRAPH IDENTIFIER DIRECTED
    (3) statement -> . GRAPH IDENTIFIER
    (4) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (6) statement -> . VISUALIZE IDENTIFIER
    (7) statement -> . FIND CYCLE IN IDENTIFIER
    (8) statement -> . FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (9) statement -> . COLOR NODE IDENTIFIER STRING
    (10) statement -> . DELETE1 NODE IDENTIFIER FROM IDENTIFIER
    (11) statement -> . SAVE GRAPH IDENTIFIER TO STRING
    (12) statement -> . LOAD GRAPH IDENTIFIER FROM STRING
    (13) statement -> . FIND MST IN IDENTIFIER
    (14) statement -> . IF NODE IDENTIFIER IN IDENTIFIER THEN statement
    (15) statement -> . IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (16) statement -> . IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (17) statement -> . IF FIND CYCLE IN IDENTIFIER THEN statement
    (18) statement -> . IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement
    (19) statement -> . IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement
    (20) statement -> . IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (21) statement -> . IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (22) statement -> . IF NOT FIND CYCLE IN IDENTIFIER THEN statement
    (23) statement -> . CLOSURE closure_type IN IDENTIFIER
    (27) statement -> . FIND BFS FROM IDENTIFIER IN IDENTIFIER
    (28) statement -> . FIND DFS FROM IDENTIFIER IN IDENTIFIER
    (29) statement -> . LOOP NODE IDENTIFIER IN IDENTIFIER block
    (30) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block
    (31) statement -> . LOOP FROM NUMBER TO NUMBER block
    (32) statement -> . LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (33) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (34) statement -> . ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

    NODE            shift and go to state 2
    GRAPH           shift and go to state 3
    EDGE            shift and go to state 4
    VISUALIZE       shift and go to state 5
    FIND            shift and go to state 6
    COLOR           shift and go to state 7
    DELETE1         shift and go to state 8
    SAVE            shift and go to state 9
    LOAD            shift and go to state 10
    IF              shift and go to state 11
    CLOSURE         shift and go to state 12
    LOOP            shift and go to state 13
    ADD             shift and go to state 14

    statement                      shift and go to state 176

state 171

    (21) statement -> IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN . statement
    (1) statement -> . NODE IDENTIFIER IN IDENTIFIER
    (2) statement -> . GRAPH IDENTIFIER DIRECTED
    (3) statement -> . GRAPH IDENTIFIER
    (4) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (6) statement -> . VISUALIZE IDENTIFIER
    (7) statement -> . FIND CYCLE IN IDENTIFIER
    (8) statement -> . FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (9) statement -> . COLOR NODE IDENTIFIER STRING
    (10) statement -> . DELETE1 NODE IDENTIFIER FROM IDENTIFIER
    (11) statement -> . SAVE GRAPH IDENTIFIER TO STRING
    (12) statement -> . LOAD GRAPH IDENTIFIER FROM STRING
    (13) statement -> . FIND MST IN IDENTIFIER
    (14) statement -> . IF NODE IDENTIFIER IN IDENTIFIER THEN statement
    (15) statement -> . IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (16) statement -> . IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (17) statement -> . IF FIND CYCLE IN IDENTIFIER THEN statement
    (18) statement -> . IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement
    (19) statement -> . IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement
    (20) statement -> . IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (21) statement -> . IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (22) statement -> . IF NOT FIND CYCLE IN IDENTIFIER THEN statement
    (23) statement -> . CLOSURE closure_type IN IDENTIFIER
    (27) statement -> . FIND BFS FROM IDENTIFIER IN IDENTIFIER
    (28) statement -> . FIND DFS FROM IDENTIFIER IN IDENTIFIER
    (29) statement -> . LOOP NODE IDENTIFIER IN IDENTIFIER block
    (30) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block
    (31) statement -> . LOOP FROM NUMBER TO NUMBER block
    (32) statement -> . LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (33) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (34) statement -> . ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

    NODE            shift and go to state 2
    GRAPH           shift and go to state 3
    EDGE            shift and go to state 4
    VISUALIZE       shift and go to state 5
    FIND            shift and go to state 6
    COLOR           shift and go to state 7
    DELETE1         shift and go to state 8
    SAVE            shift and go to state 9
    LOAD            shift and go to state 10
    IF              shift and go to state 11
    CLOSURE         shift and go to state 12
    LOOP            shift and go to state 13
    ADD             shift and go to state 14

    statement                      shift and go to state 177

state 172

    (32) statement -> LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .

    $end            reduce using rule 32 (statement -> LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    NODE            reduce using rule 32 (statement -> LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    GRAPH           reduce using rule 32 (statement -> LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    EDGE            reduce using rule 32 (statement -> LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    VISUALIZE       reduce using rule 32 (statement -> LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    FIND            reduce using rule 32 (statement -> LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    COLOR           reduce using rule 32 (statement -> LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    DELETE1         reduce using rule 32 (statement -> LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    SAVE            reduce using rule 32 (statement -> LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    LOAD            reduce using rule 32 (statement -> LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    IF              reduce using rule 32 (statement -> LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    CLOSURE         reduce using rule 32 (statement -> LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    LOOP            reduce using rule 32 (statement -> LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    ADD             reduce using rule 32 (statement -> LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)


state 173

    (33) statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER . IN IDENTIFIER block

    IN              shift and go to state 178


state 174

    (34) statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER . IN IDENTIFIER

    IN              shift and go to state 179


state 175

    (18) statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN . NUMBER IN IDENTIFIER THEN statement

    NUMBER          shift and go to state 180


state 176

    (20) statement -> IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement .

    $end            reduce using rule 20 (statement -> IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement .)
    NODE            reduce using rule 20 (statement -> IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement .)
    GRAPH           reduce using rule 20 (statement -> IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement .)
    EDGE            reduce using rule 20 (statement -> IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement .)
    VISUALIZE       reduce using rule 20 (statement -> IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement .)
    FIND            reduce using rule 20 (statement -> IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement .)
    COLOR           reduce using rule 20 (statement -> IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement .)
    DELETE1         reduce using rule 20 (statement -> IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement .)
    SAVE            reduce using rule 20 (statement -> IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement .)
    LOAD            reduce using rule 20 (statement -> IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement .)
    IF              reduce using rule 20 (statement -> IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement .)
    CLOSURE         reduce using rule 20 (statement -> IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement .)
    LOOP            reduce using rule 20 (statement -> IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement .)
    ADD             reduce using rule 20 (statement -> IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement .)


state 177

    (21) statement -> IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement .

    $end            reduce using rule 21 (statement -> IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement .)
    NODE            reduce using rule 21 (statement -> IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement .)
    GRAPH           reduce using rule 21 (statement -> IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement .)
    EDGE            reduce using rule 21 (statement -> IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement .)
    VISUALIZE       reduce using rule 21 (statement -> IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement .)
    FIND            reduce using rule 21 (statement -> IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement .)
    COLOR           reduce using rule 21 (statement -> IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement .)
    DELETE1         reduce using rule 21 (statement -> IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement .)
    SAVE            reduce using rule 21 (statement -> IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement .)
    LOAD            reduce using rule 21 (statement -> IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement .)
    IF              reduce using rule 21 (statement -> IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement .)
    CLOSURE         reduce using rule 21 (statement -> IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement .)
    LOOP            reduce using rule 21 (statement -> IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement .)
    ADD             reduce using rule 21 (statement -> IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement .)


state 178

    (33) statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN . IDENTIFIER block

    IDENTIFIER      shift and go to state 181


state 179

    (34) statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN . IDENTIFIER

    IDENTIFIER      shift and go to state 182


state 180

    (18) statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER . IN IDENTIFIER THEN statement

    IN              shift and go to state 183


state 181

    (33) statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER . block
    (35) block -> . statement block
    (36) block -> . statement
    (1) statement -> . NODE IDENTIFIER IN IDENTIFIER
    (2) statement -> . GRAPH IDENTIFIER DIRECTED
    (3) statement -> . GRAPH IDENTIFIER
    (4) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (6) statement -> . VISUALIZE IDENTIFIER
    (7) statement -> . FIND CYCLE IN IDENTIFIER
    (8) statement -> . FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (9) statement -> . COLOR NODE IDENTIFIER STRING
    (10) statement -> . DELETE1 NODE IDENTIFIER FROM IDENTIFIER
    (11) statement -> . SAVE GRAPH IDENTIFIER TO STRING
    (12) statement -> . LOAD GRAPH IDENTIFIER FROM STRING
    (13) statement -> . FIND MST IN IDENTIFIER
    (14) statement -> . IF NODE IDENTIFIER IN IDENTIFIER THEN statement
    (15) statement -> . IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (16) statement -> . IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (17) statement -> . IF FIND CYCLE IN IDENTIFIER THEN statement
    (18) statement -> . IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement
    (19) statement -> . IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement
    (20) statement -> . IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (21) statement -> . IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (22) statement -> . IF NOT FIND CYCLE IN IDENTIFIER THEN statement
    (23) statement -> . CLOSURE closure_type IN IDENTIFIER
    (27) statement -> . FIND BFS FROM IDENTIFIER IN IDENTIFIER
    (28) statement -> . FIND DFS FROM IDENTIFIER IN IDENTIFIER
    (29) statement -> . LOOP NODE IDENTIFIER IN IDENTIFIER block
    (30) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block
    (31) statement -> . LOOP FROM NUMBER TO NUMBER block
    (32) statement -> . LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (33) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (34) statement -> . ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

    NODE            shift and go to state 2
    GRAPH           shift and go to state 3
    EDGE            shift and go to state 4
    VISUALIZE       shift and go to state 5
    FIND            shift and go to state 6
    COLOR           shift and go to state 7
    DELETE1         shift and go to state 8
    SAVE            shift and go to state 9
    LOAD            shift and go to state 10
    IF              shift and go to state 11
    CLOSURE         shift and go to state 12
    LOOP            shift and go to state 13
    ADD             shift and go to state 14

    block                          shift and go to state 184
    statement                      shift and go to state 133

state 182

    (34) statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .

    $end            reduce using rule 34 (statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    NODE            reduce using rule 34 (statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    GRAPH           reduce using rule 34 (statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    EDGE            reduce using rule 34 (statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    VISUALIZE       reduce using rule 34 (statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    FIND            reduce using rule 34 (statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    COLOR           reduce using rule 34 (statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    DELETE1         reduce using rule 34 (statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    SAVE            reduce using rule 34 (statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    LOAD            reduce using rule 34 (statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    IF              reduce using rule 34 (statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    CLOSURE         reduce using rule 34 (statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    LOOP            reduce using rule 34 (statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)
    ADD             reduce using rule 34 (statement -> ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)


state 183

    (18) statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN . IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 185


state 184

    (33) statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .

    $end            reduce using rule 33 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    NODE            reduce using rule 33 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    GRAPH           reduce using rule 33 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    EDGE            reduce using rule 33 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    VISUALIZE       reduce using rule 33 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    FIND            reduce using rule 33 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    COLOR           reduce using rule 33 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    DELETE1         reduce using rule 33 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    SAVE            reduce using rule 33 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    LOAD            reduce using rule 33 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    IF              reduce using rule 33 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    CLOSURE         reduce using rule 33 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    LOOP            reduce using rule 33 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)
    ADD             reduce using rule 33 (statement -> LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block .)


state 185

    (18) statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER . THEN statement

    THEN            shift and go to state 186


state 186

    (18) statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN . statement
    (1) statement -> . NODE IDENTIFIER IN IDENTIFIER
    (2) statement -> . GRAPH IDENTIFIER DIRECTED
    (3) statement -> . GRAPH IDENTIFIER
    (4) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (6) statement -> . VISUALIZE IDENTIFIER
    (7) statement -> . FIND CYCLE IN IDENTIFIER
    (8) statement -> . FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (9) statement -> . COLOR NODE IDENTIFIER STRING
    (10) statement -> . DELETE1 NODE IDENTIFIER FROM IDENTIFIER
    (11) statement -> . SAVE GRAPH IDENTIFIER TO STRING
    (12) statement -> . LOAD GRAPH IDENTIFIER FROM STRING
    (13) statement -> . FIND MST IN IDENTIFIER
    (14) statement -> . IF NODE IDENTIFIER IN IDENTIFIER THEN statement
    (15) statement -> . IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (16) statement -> . IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (17) statement -> . IF FIND CYCLE IN IDENTIFIER THEN statement
    (18) statement -> . IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement
    (19) statement -> . IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement
    (20) statement -> . IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (21) statement -> . IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (22) statement -> . IF NOT FIND CYCLE IN IDENTIFIER THEN statement
    (23) statement -> . CLOSURE closure_type IN IDENTIFIER
    (27) statement -> . FIND BFS FROM IDENTIFIER IN IDENTIFIER
    (28) statement -> . FIND DFS FROM IDENTIFIER IN IDENTIFIER
    (29) statement -> . LOOP NODE IDENTIFIER IN IDENTIFIER block
    (30) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER block
    (31) statement -> . LOOP FROM NUMBER TO NUMBER block
    (32) statement -> . LOOP IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (33) statement -> . LOOP EDGE IDENTIFIER ARROW IDENTIFIER FROM NUMBER TO NUMBER IN IDENTIFIER block
    (34) statement -> . ADD NUMBER TO WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

    NODE            shift and go to state 2
    GRAPH           shift and go to state 3
    EDGE            shift and go to state 4
    VISUALIZE       shift and go to state 5
    FIND            shift and go to state 6
    COLOR           shift and go to state 7
    DELETE1         shift and go to state 8
    SAVE            shift and go to state 9
    LOAD            shift and go to state 10
    IF              shift and go to state 11
    CLOSURE         shift and go to state 12
    LOOP            shift and go to state 13
    ADD             shift and go to state 14

    statement                      shift and go to state 187

state 187

    (18) statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement .

    $end            reduce using rule 18 (statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement .)
    NODE            reduce using rule 18 (statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement .)
    GRAPH           reduce using rule 18 (statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement .)
    EDGE            reduce using rule 18 (statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement .)
    VISUALIZE       reduce using rule 18 (statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement .)
    FIND            reduce using rule 18 (statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement .)
    COLOR           reduce using rule 18 (statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement .)
    DELETE1         reduce using rule 18 (statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement .)
    SAVE            reduce using rule 18 (statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement .)
    LOAD            reduce using rule 18 (statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement .)
    IF              reduce using rule 18 (statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement .)
    CLOSURE         reduce using rule 18 (statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement .)
    LOOP            reduce using rule 18 (statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement .)
    ADD             reduce using rule 18 (statement -> IF WEIGHT OF EDGE IDENTIFIER ARROW IDENTIFIER IS GREATER THAN NUMBER IN IDENTIFIER THEN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NODE in state 133 resolved as shift
WARNING: shift/reduce conflict for GRAPH in state 133 resolved as shift
WARNING: shift/reduce conflict for EDGE in state 133 resolved as shift
WARNING: shift/reduce conflict for VISUALIZE in state 133 resolved as shift
WARNING: shift/reduce conflict for FIND in state 133 resolved as shift
WARNING: shift/reduce conflict for COLOR in state 133 resolved as shift
WARNING: shift/reduce conflict for DELETE1 in state 133 resolved as shift
WARNING: shift/reduce conflict for SAVE in state 133 resolved as shift
WARNING: shift/reduce conflict for LOAD in state 133 resolved as shift
WARNING: shift/reduce conflict for IF in state 133 resolved as shift
WARNING: shift/reduce conflict for CLOSURE in state 133 resolved as shift
WARNING: shift/reduce conflict for LOOP in state 133 resolved as shift
WARNING: shift/reduce conflict for ADD in state 133 resolved as shift
