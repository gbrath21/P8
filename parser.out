Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    LOOP
    SHORTEST

Grammar

Rule 0     S' -> statement
Rule 1     statement -> NODE IDENTIFIER IN IDENTIFIER
Rule 2     statement -> GRAPH IDENTIFIER DIRECTED
Rule 3     statement -> GRAPH IDENTIFIER
Rule 4     statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
Rule 5     statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
Rule 6     statement -> VISUALIZE IDENTIFIER
Rule 7     statement -> FIND CYCLE IN IDENTIFIER
Rule 8     statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
Rule 9     statement -> COLOR NODE IDENTIFIER STRING
Rule 10    statement -> COLOR EDGE IDENTIFIER ARROW IDENTIFIER STRING
Rule 11    statement -> DELETE1 NODE IDENTIFIER FROM IDENTIFIER
Rule 12    statement -> DELETE1 EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER
Rule 13    statement -> SAVE GRAPH IDENTIFIER TO STRING
Rule 14    statement -> LOAD GRAPH IDENTIFIER FROM STRING
Rule 15    statement -> FIND MST IN IDENTIFIER
Rule 16    statement -> IF NODE IDENTIFIER IN IDENTIFIER THEN statement
Rule 17    statement -> IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
Rule 18    statement -> IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
Rule 19    statement -> IF FIND CYCLE IN IDENTIFIER THEN statement
Rule 20    statement -> IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement
Rule 21    statement -> IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
Rule 22    statement -> IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
Rule 23    statement -> IF NOT FIND CYCLE IN IDENTIFIER THEN statement
Rule 24    statement -> CLOSURE closure_type IN IDENTIFIER
Rule 25    closure_type -> REFLEXIVE
Rule 26    closure_type -> SYMMETRIC
Rule 27    closure_type -> TRANSITIVE

Terminals, with rules where they appear

ARROW                : 4 5 10 12 17 21
CLOSURE              : 24
COLOR                : 9 10
CYCLE                : 7 19 23
DELETE1              : 11 12
DIRECTED             : 2
EDGE                 : 4 5 10 12 17 21
FIND                 : 7 8 15 19 23
FROM                 : 11 12 14
GRAPH                : 2 3 13 14
IDENTIFIER           : 1 1 2 3 4 4 4 5 5 5 6 7 8 8 8 9 10 10 11 11 12 12 12 13 14 15 16 16 17 17 17 18 18 18 19 20 20 21 21 21 22 22 22 23 24
IF                   : 16 17 18 19 20 21 22 23
IN                   : 1 4 5 7 8 15 16 17 18 19 20 21 22 23 24
LOAD                 : 14
LOOP                 : 
MST                  : 15
NODE                 : 1 9 11 16 20
NOT                  : 20 21 22 23
NUMBER               : 4
PATH                 : 8 18 22
REFLEXIVE            : 25
SAVE                 : 13
SHORTEST             : 
STRING               : 9 10 13 14
SYMMETRIC            : 26
THEN                 : 16 17 18 19 20 21 22 23
TO                   : 8 13 18 22
TRANSITIVE           : 27
VISUALIZE            : 6
WEIGHT               : 4
error                : 

Nonterminals, with rules where they appear

closure_type         : 24
statement            : 16 17 18 19 20 21 22 23 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . NODE IDENTIFIER IN IDENTIFIER
    (2) statement -> . GRAPH IDENTIFIER DIRECTED
    (3) statement -> . GRAPH IDENTIFIER
    (4) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (6) statement -> . VISUALIZE IDENTIFIER
    (7) statement -> . FIND CYCLE IN IDENTIFIER
    (8) statement -> . FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (9) statement -> . COLOR NODE IDENTIFIER STRING
    (10) statement -> . COLOR EDGE IDENTIFIER ARROW IDENTIFIER STRING
    (11) statement -> . DELETE1 NODE IDENTIFIER FROM IDENTIFIER
    (12) statement -> . DELETE1 EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER
    (13) statement -> . SAVE GRAPH IDENTIFIER TO STRING
    (14) statement -> . LOAD GRAPH IDENTIFIER FROM STRING
    (15) statement -> . FIND MST IN IDENTIFIER
    (16) statement -> . IF NODE IDENTIFIER IN IDENTIFIER THEN statement
    (17) statement -> . IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (18) statement -> . IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (19) statement -> . IF FIND CYCLE IN IDENTIFIER THEN statement
    (20) statement -> . IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement
    (21) statement -> . IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (22) statement -> . IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (23) statement -> . IF NOT FIND CYCLE IN IDENTIFIER THEN statement
    (24) statement -> . CLOSURE closure_type IN IDENTIFIER

    NODE            shift and go to state 2
    GRAPH           shift and go to state 3
    EDGE            shift and go to state 4
    VISUALIZE       shift and go to state 5
    FIND            shift and go to state 6
    COLOR           shift and go to state 7
    DELETE1         shift and go to state 8
    SAVE            shift and go to state 9
    LOAD            shift and go to state 10
    IF              shift and go to state 11
    CLOSURE         shift and go to state 12

    statement                      shift and go to state 1

state 1

    (0) S' -> statement .



state 2

    (1) statement -> NODE . IDENTIFIER IN IDENTIFIER

    IDENTIFIER      shift and go to state 13


state 3

    (2) statement -> GRAPH . IDENTIFIER DIRECTED
    (3) statement -> GRAPH . IDENTIFIER

    IDENTIFIER      shift and go to state 14


state 4

    (4) statement -> EDGE . IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> EDGE . IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER

    IDENTIFIER      shift and go to state 15


state 5

    (6) statement -> VISUALIZE . IDENTIFIER

    IDENTIFIER      shift and go to state 16


state 6

    (7) statement -> FIND . CYCLE IN IDENTIFIER
    (8) statement -> FIND . PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (15) statement -> FIND . MST IN IDENTIFIER

    CYCLE           shift and go to state 17
    PATH            shift and go to state 18
    MST             shift and go to state 19


state 7

    (9) statement -> COLOR . NODE IDENTIFIER STRING
    (10) statement -> COLOR . EDGE IDENTIFIER ARROW IDENTIFIER STRING

    NODE            shift and go to state 20
    EDGE            shift and go to state 21


state 8

    (11) statement -> DELETE1 . NODE IDENTIFIER FROM IDENTIFIER
    (12) statement -> DELETE1 . EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER

    NODE            shift and go to state 22
    EDGE            shift and go to state 23


state 9

    (13) statement -> SAVE . GRAPH IDENTIFIER TO STRING

    GRAPH           shift and go to state 24


state 10

    (14) statement -> LOAD . GRAPH IDENTIFIER FROM STRING

    GRAPH           shift and go to state 25


state 11

    (16) statement -> IF . NODE IDENTIFIER IN IDENTIFIER THEN statement
    (17) statement -> IF . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (18) statement -> IF . PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (19) statement -> IF . FIND CYCLE IN IDENTIFIER THEN statement
    (20) statement -> IF . NOT NODE IDENTIFIER IN IDENTIFIER THEN statement
    (21) statement -> IF . NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (22) statement -> IF . NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (23) statement -> IF . NOT FIND CYCLE IN IDENTIFIER THEN statement

    NODE            shift and go to state 26
    EDGE            shift and go to state 27
    PATH            shift and go to state 28
    FIND            shift and go to state 29
    NOT             shift and go to state 30


state 12

    (24) statement -> CLOSURE . closure_type IN IDENTIFIER
    (25) closure_type -> . REFLEXIVE
    (26) closure_type -> . SYMMETRIC
    (27) closure_type -> . TRANSITIVE

    REFLEXIVE       shift and go to state 32
    SYMMETRIC       shift and go to state 33
    TRANSITIVE      shift and go to state 34

    closure_type                   shift and go to state 31

state 13

    (1) statement -> NODE IDENTIFIER . IN IDENTIFIER

    IN              shift and go to state 35


state 14

    (2) statement -> GRAPH IDENTIFIER . DIRECTED
    (3) statement -> GRAPH IDENTIFIER .

    DIRECTED        shift and go to state 36
    $end            reduce using rule 3 (statement -> GRAPH IDENTIFIER .)


state 15

    (4) statement -> EDGE IDENTIFIER . ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> EDGE IDENTIFIER . ARROW IDENTIFIER IN IDENTIFIER

    ARROW           shift and go to state 37


state 16

    (6) statement -> VISUALIZE IDENTIFIER .

    $end            reduce using rule 6 (statement -> VISUALIZE IDENTIFIER .)


state 17

    (7) statement -> FIND CYCLE . IN IDENTIFIER

    IN              shift and go to state 38


state 18

    (8) statement -> FIND PATH . IDENTIFIER TO IDENTIFIER IN IDENTIFIER

    IDENTIFIER      shift and go to state 39


state 19

    (15) statement -> FIND MST . IN IDENTIFIER

    IN              shift and go to state 40


state 20

    (9) statement -> COLOR NODE . IDENTIFIER STRING

    IDENTIFIER      shift and go to state 41


state 21

    (10) statement -> COLOR EDGE . IDENTIFIER ARROW IDENTIFIER STRING

    IDENTIFIER      shift and go to state 42


state 22

    (11) statement -> DELETE1 NODE . IDENTIFIER FROM IDENTIFIER

    IDENTIFIER      shift and go to state 43


state 23

    (12) statement -> DELETE1 EDGE . IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER

    IDENTIFIER      shift and go to state 44


state 24

    (13) statement -> SAVE GRAPH . IDENTIFIER TO STRING

    IDENTIFIER      shift and go to state 45


state 25

    (14) statement -> LOAD GRAPH . IDENTIFIER FROM STRING

    IDENTIFIER      shift and go to state 46


state 26

    (16) statement -> IF NODE . IDENTIFIER IN IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 47


state 27

    (17) statement -> IF EDGE . IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 48


state 28

    (18) statement -> IF PATH . IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 49


state 29

    (19) statement -> IF FIND . CYCLE IN IDENTIFIER THEN statement

    CYCLE           shift and go to state 50


state 30

    (20) statement -> IF NOT . NODE IDENTIFIER IN IDENTIFIER THEN statement
    (21) statement -> IF NOT . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (22) statement -> IF NOT . PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (23) statement -> IF NOT . FIND CYCLE IN IDENTIFIER THEN statement

    NODE            shift and go to state 51
    EDGE            shift and go to state 52
    PATH            shift and go to state 53
    FIND            shift and go to state 54


state 31

    (24) statement -> CLOSURE closure_type . IN IDENTIFIER

    IN              shift and go to state 55


state 32

    (25) closure_type -> REFLEXIVE .

    IN              reduce using rule 25 (closure_type -> REFLEXIVE .)


state 33

    (26) closure_type -> SYMMETRIC .

    IN              reduce using rule 26 (closure_type -> SYMMETRIC .)


state 34

    (27) closure_type -> TRANSITIVE .

    IN              reduce using rule 27 (closure_type -> TRANSITIVE .)


state 35

    (1) statement -> NODE IDENTIFIER IN . IDENTIFIER

    IDENTIFIER      shift and go to state 56


state 36

    (2) statement -> GRAPH IDENTIFIER DIRECTED .

    $end            reduce using rule 2 (statement -> GRAPH IDENTIFIER DIRECTED .)


state 37

    (4) statement -> EDGE IDENTIFIER ARROW . IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> EDGE IDENTIFIER ARROW . IDENTIFIER IN IDENTIFIER

    IDENTIFIER      shift and go to state 57


state 38

    (7) statement -> FIND CYCLE IN . IDENTIFIER

    IDENTIFIER      shift and go to state 58


state 39

    (8) statement -> FIND PATH IDENTIFIER . TO IDENTIFIER IN IDENTIFIER

    TO              shift and go to state 59


state 40

    (15) statement -> FIND MST IN . IDENTIFIER

    IDENTIFIER      shift and go to state 60


state 41

    (9) statement -> COLOR NODE IDENTIFIER . STRING

    STRING          shift and go to state 61


state 42

    (10) statement -> COLOR EDGE IDENTIFIER . ARROW IDENTIFIER STRING

    ARROW           shift and go to state 62


state 43

    (11) statement -> DELETE1 NODE IDENTIFIER . FROM IDENTIFIER

    FROM            shift and go to state 63


state 44

    (12) statement -> DELETE1 EDGE IDENTIFIER . ARROW IDENTIFIER FROM IDENTIFIER

    ARROW           shift and go to state 64


state 45

    (13) statement -> SAVE GRAPH IDENTIFIER . TO STRING

    TO              shift and go to state 65


state 46

    (14) statement -> LOAD GRAPH IDENTIFIER . FROM STRING

    FROM            shift and go to state 66


state 47

    (16) statement -> IF NODE IDENTIFIER . IN IDENTIFIER THEN statement

    IN              shift and go to state 67


state 48

    (17) statement -> IF EDGE IDENTIFIER . ARROW IDENTIFIER IN IDENTIFIER THEN statement

    ARROW           shift and go to state 68


state 49

    (18) statement -> IF PATH IDENTIFIER . TO IDENTIFIER IN IDENTIFIER THEN statement

    TO              shift and go to state 69


state 50

    (19) statement -> IF FIND CYCLE . IN IDENTIFIER THEN statement

    IN              shift and go to state 70


state 51

    (20) statement -> IF NOT NODE . IDENTIFIER IN IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 71


state 52

    (21) statement -> IF NOT EDGE . IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 72


state 53

    (22) statement -> IF NOT PATH . IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 73


state 54

    (23) statement -> IF NOT FIND . CYCLE IN IDENTIFIER THEN statement

    CYCLE           shift and go to state 74


state 55

    (24) statement -> CLOSURE closure_type IN . IDENTIFIER

    IDENTIFIER      shift and go to state 75


state 56

    (1) statement -> NODE IDENTIFIER IN IDENTIFIER .

    $end            reduce using rule 1 (statement -> NODE IDENTIFIER IN IDENTIFIER .)


state 57

    (4) statement -> EDGE IDENTIFIER ARROW IDENTIFIER . WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> EDGE IDENTIFIER ARROW IDENTIFIER . IN IDENTIFIER

    WEIGHT          shift and go to state 76
    IN              shift and go to state 77


state 58

    (7) statement -> FIND CYCLE IN IDENTIFIER .

    $end            reduce using rule 7 (statement -> FIND CYCLE IN IDENTIFIER .)


state 59

    (8) statement -> FIND PATH IDENTIFIER TO . IDENTIFIER IN IDENTIFIER

    IDENTIFIER      shift and go to state 78


state 60

    (15) statement -> FIND MST IN IDENTIFIER .

    $end            reduce using rule 15 (statement -> FIND MST IN IDENTIFIER .)


state 61

    (9) statement -> COLOR NODE IDENTIFIER STRING .

    $end            reduce using rule 9 (statement -> COLOR NODE IDENTIFIER STRING .)


state 62

    (10) statement -> COLOR EDGE IDENTIFIER ARROW . IDENTIFIER STRING

    IDENTIFIER      shift and go to state 79


state 63

    (11) statement -> DELETE1 NODE IDENTIFIER FROM . IDENTIFIER

    IDENTIFIER      shift and go to state 80


state 64

    (12) statement -> DELETE1 EDGE IDENTIFIER ARROW . IDENTIFIER FROM IDENTIFIER

    IDENTIFIER      shift and go to state 81


state 65

    (13) statement -> SAVE GRAPH IDENTIFIER TO . STRING

    STRING          shift and go to state 82


state 66

    (14) statement -> LOAD GRAPH IDENTIFIER FROM . STRING

    STRING          shift and go to state 83


state 67

    (16) statement -> IF NODE IDENTIFIER IN . IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 84


state 68

    (17) statement -> IF EDGE IDENTIFIER ARROW . IDENTIFIER IN IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 85


state 69

    (18) statement -> IF PATH IDENTIFIER TO . IDENTIFIER IN IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 86


state 70

    (19) statement -> IF FIND CYCLE IN . IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 87


state 71

    (20) statement -> IF NOT NODE IDENTIFIER . IN IDENTIFIER THEN statement

    IN              shift and go to state 88


state 72

    (21) statement -> IF NOT EDGE IDENTIFIER . ARROW IDENTIFIER IN IDENTIFIER THEN statement

    ARROW           shift and go to state 89


state 73

    (22) statement -> IF NOT PATH IDENTIFIER . TO IDENTIFIER IN IDENTIFIER THEN statement

    TO              shift and go to state 90


state 74

    (23) statement -> IF NOT FIND CYCLE . IN IDENTIFIER THEN statement

    IN              shift and go to state 91


state 75

    (24) statement -> CLOSURE closure_type IN IDENTIFIER .

    $end            reduce using rule 24 (statement -> CLOSURE closure_type IN IDENTIFIER .)


state 76

    (4) statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT . NUMBER IN IDENTIFIER

    NUMBER          shift and go to state 92


state 77

    (5) statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN . IDENTIFIER

    IDENTIFIER      shift and go to state 93


state 78

    (8) statement -> FIND PATH IDENTIFIER TO IDENTIFIER . IN IDENTIFIER

    IN              shift and go to state 94


state 79

    (10) statement -> COLOR EDGE IDENTIFIER ARROW IDENTIFIER . STRING

    STRING          shift and go to state 95


state 80

    (11) statement -> DELETE1 NODE IDENTIFIER FROM IDENTIFIER .

    $end            reduce using rule 11 (statement -> DELETE1 NODE IDENTIFIER FROM IDENTIFIER .)


state 81

    (12) statement -> DELETE1 EDGE IDENTIFIER ARROW IDENTIFIER . FROM IDENTIFIER

    FROM            shift and go to state 96


state 82

    (13) statement -> SAVE GRAPH IDENTIFIER TO STRING .

    $end            reduce using rule 13 (statement -> SAVE GRAPH IDENTIFIER TO STRING .)


state 83

    (14) statement -> LOAD GRAPH IDENTIFIER FROM STRING .

    $end            reduce using rule 14 (statement -> LOAD GRAPH IDENTIFIER FROM STRING .)


state 84

    (16) statement -> IF NODE IDENTIFIER IN IDENTIFIER . THEN statement

    THEN            shift and go to state 97


state 85

    (17) statement -> IF EDGE IDENTIFIER ARROW IDENTIFIER . IN IDENTIFIER THEN statement

    IN              shift and go to state 98


state 86

    (18) statement -> IF PATH IDENTIFIER TO IDENTIFIER . IN IDENTIFIER THEN statement

    IN              shift and go to state 99


state 87

    (19) statement -> IF FIND CYCLE IN IDENTIFIER . THEN statement

    THEN            shift and go to state 100


state 88

    (20) statement -> IF NOT NODE IDENTIFIER IN . IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 101


state 89

    (21) statement -> IF NOT EDGE IDENTIFIER ARROW . IDENTIFIER IN IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 102


state 90

    (22) statement -> IF NOT PATH IDENTIFIER TO . IDENTIFIER IN IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 103


state 91

    (23) statement -> IF NOT FIND CYCLE IN . IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 104


state 92

    (4) statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER . IN IDENTIFIER

    IN              shift and go to state 105


state 93

    (5) statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .

    $end            reduce using rule 5 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER .)


state 94

    (8) statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN . IDENTIFIER

    IDENTIFIER      shift and go to state 106


state 95

    (10) statement -> COLOR EDGE IDENTIFIER ARROW IDENTIFIER STRING .

    $end            reduce using rule 10 (statement -> COLOR EDGE IDENTIFIER ARROW IDENTIFIER STRING .)


state 96

    (12) statement -> DELETE1 EDGE IDENTIFIER ARROW IDENTIFIER FROM . IDENTIFIER

    IDENTIFIER      shift and go to state 107


state 97

    (16) statement -> IF NODE IDENTIFIER IN IDENTIFIER THEN . statement
    (1) statement -> . NODE IDENTIFIER IN IDENTIFIER
    (2) statement -> . GRAPH IDENTIFIER DIRECTED
    (3) statement -> . GRAPH IDENTIFIER
    (4) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (6) statement -> . VISUALIZE IDENTIFIER
    (7) statement -> . FIND CYCLE IN IDENTIFIER
    (8) statement -> . FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (9) statement -> . COLOR NODE IDENTIFIER STRING
    (10) statement -> . COLOR EDGE IDENTIFIER ARROW IDENTIFIER STRING
    (11) statement -> . DELETE1 NODE IDENTIFIER FROM IDENTIFIER
    (12) statement -> . DELETE1 EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER
    (13) statement -> . SAVE GRAPH IDENTIFIER TO STRING
    (14) statement -> . LOAD GRAPH IDENTIFIER FROM STRING
    (15) statement -> . FIND MST IN IDENTIFIER
    (16) statement -> . IF NODE IDENTIFIER IN IDENTIFIER THEN statement
    (17) statement -> . IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (18) statement -> . IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (19) statement -> . IF FIND CYCLE IN IDENTIFIER THEN statement
    (20) statement -> . IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement
    (21) statement -> . IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (22) statement -> . IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (23) statement -> . IF NOT FIND CYCLE IN IDENTIFIER THEN statement
    (24) statement -> . CLOSURE closure_type IN IDENTIFIER

    NODE            shift and go to state 2
    GRAPH           shift and go to state 3
    EDGE            shift and go to state 4
    VISUALIZE       shift and go to state 5
    FIND            shift and go to state 6
    COLOR           shift and go to state 7
    DELETE1         shift and go to state 8
    SAVE            shift and go to state 9
    LOAD            shift and go to state 10
    IF              shift and go to state 11
    CLOSURE         shift and go to state 12

    statement                      shift and go to state 108

state 98

    (17) statement -> IF EDGE IDENTIFIER ARROW IDENTIFIER IN . IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 109


state 99

    (18) statement -> IF PATH IDENTIFIER TO IDENTIFIER IN . IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 110


state 100

    (19) statement -> IF FIND CYCLE IN IDENTIFIER THEN . statement
    (1) statement -> . NODE IDENTIFIER IN IDENTIFIER
    (2) statement -> . GRAPH IDENTIFIER DIRECTED
    (3) statement -> . GRAPH IDENTIFIER
    (4) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (6) statement -> . VISUALIZE IDENTIFIER
    (7) statement -> . FIND CYCLE IN IDENTIFIER
    (8) statement -> . FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (9) statement -> . COLOR NODE IDENTIFIER STRING
    (10) statement -> . COLOR EDGE IDENTIFIER ARROW IDENTIFIER STRING
    (11) statement -> . DELETE1 NODE IDENTIFIER FROM IDENTIFIER
    (12) statement -> . DELETE1 EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER
    (13) statement -> . SAVE GRAPH IDENTIFIER TO STRING
    (14) statement -> . LOAD GRAPH IDENTIFIER FROM STRING
    (15) statement -> . FIND MST IN IDENTIFIER
    (16) statement -> . IF NODE IDENTIFIER IN IDENTIFIER THEN statement
    (17) statement -> . IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (18) statement -> . IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (19) statement -> . IF FIND CYCLE IN IDENTIFIER THEN statement
    (20) statement -> . IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement
    (21) statement -> . IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (22) statement -> . IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (23) statement -> . IF NOT FIND CYCLE IN IDENTIFIER THEN statement
    (24) statement -> . CLOSURE closure_type IN IDENTIFIER

    NODE            shift and go to state 2
    GRAPH           shift and go to state 3
    EDGE            shift and go to state 4
    VISUALIZE       shift and go to state 5
    FIND            shift and go to state 6
    COLOR           shift and go to state 7
    DELETE1         shift and go to state 8
    SAVE            shift and go to state 9
    LOAD            shift and go to state 10
    IF              shift and go to state 11
    CLOSURE         shift and go to state 12

    statement                      shift and go to state 111

state 101

    (20) statement -> IF NOT NODE IDENTIFIER IN IDENTIFIER . THEN statement

    THEN            shift and go to state 112


state 102

    (21) statement -> IF NOT EDGE IDENTIFIER ARROW IDENTIFIER . IN IDENTIFIER THEN statement

    IN              shift and go to state 113


state 103

    (22) statement -> IF NOT PATH IDENTIFIER TO IDENTIFIER . IN IDENTIFIER THEN statement

    IN              shift and go to state 114


state 104

    (23) statement -> IF NOT FIND CYCLE IN IDENTIFIER . THEN statement

    THEN            shift and go to state 115


state 105

    (4) statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN . IDENTIFIER

    IDENTIFIER      shift and go to state 116


state 106

    (8) statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER .

    $end            reduce using rule 8 (statement -> FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER .)


state 107

    (12) statement -> DELETE1 EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER .

    $end            reduce using rule 12 (statement -> DELETE1 EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER .)


state 108

    (16) statement -> IF NODE IDENTIFIER IN IDENTIFIER THEN statement .

    $end            reduce using rule 16 (statement -> IF NODE IDENTIFIER IN IDENTIFIER THEN statement .)


state 109

    (17) statement -> IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER . THEN statement

    THEN            shift and go to state 117


state 110

    (18) statement -> IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER . THEN statement

    THEN            shift and go to state 118


state 111

    (19) statement -> IF FIND CYCLE IN IDENTIFIER THEN statement .

    $end            reduce using rule 19 (statement -> IF FIND CYCLE IN IDENTIFIER THEN statement .)


state 112

    (20) statement -> IF NOT NODE IDENTIFIER IN IDENTIFIER THEN . statement
    (1) statement -> . NODE IDENTIFIER IN IDENTIFIER
    (2) statement -> . GRAPH IDENTIFIER DIRECTED
    (3) statement -> . GRAPH IDENTIFIER
    (4) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (6) statement -> . VISUALIZE IDENTIFIER
    (7) statement -> . FIND CYCLE IN IDENTIFIER
    (8) statement -> . FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (9) statement -> . COLOR NODE IDENTIFIER STRING
    (10) statement -> . COLOR EDGE IDENTIFIER ARROW IDENTIFIER STRING
    (11) statement -> . DELETE1 NODE IDENTIFIER FROM IDENTIFIER
    (12) statement -> . DELETE1 EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER
    (13) statement -> . SAVE GRAPH IDENTIFIER TO STRING
    (14) statement -> . LOAD GRAPH IDENTIFIER FROM STRING
    (15) statement -> . FIND MST IN IDENTIFIER
    (16) statement -> . IF NODE IDENTIFIER IN IDENTIFIER THEN statement
    (17) statement -> . IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (18) statement -> . IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (19) statement -> . IF FIND CYCLE IN IDENTIFIER THEN statement
    (20) statement -> . IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement
    (21) statement -> . IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (22) statement -> . IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (23) statement -> . IF NOT FIND CYCLE IN IDENTIFIER THEN statement
    (24) statement -> . CLOSURE closure_type IN IDENTIFIER

    NODE            shift and go to state 2
    GRAPH           shift and go to state 3
    EDGE            shift and go to state 4
    VISUALIZE       shift and go to state 5
    FIND            shift and go to state 6
    COLOR           shift and go to state 7
    DELETE1         shift and go to state 8
    SAVE            shift and go to state 9
    LOAD            shift and go to state 10
    IF              shift and go to state 11
    CLOSURE         shift and go to state 12

    statement                      shift and go to state 119

state 113

    (21) statement -> IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN . IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 120


state 114

    (22) statement -> IF NOT PATH IDENTIFIER TO IDENTIFIER IN . IDENTIFIER THEN statement

    IDENTIFIER      shift and go to state 121


state 115

    (23) statement -> IF NOT FIND CYCLE IN IDENTIFIER THEN . statement
    (1) statement -> . NODE IDENTIFIER IN IDENTIFIER
    (2) statement -> . GRAPH IDENTIFIER DIRECTED
    (3) statement -> . GRAPH IDENTIFIER
    (4) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (6) statement -> . VISUALIZE IDENTIFIER
    (7) statement -> . FIND CYCLE IN IDENTIFIER
    (8) statement -> . FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (9) statement -> . COLOR NODE IDENTIFIER STRING
    (10) statement -> . COLOR EDGE IDENTIFIER ARROW IDENTIFIER STRING
    (11) statement -> . DELETE1 NODE IDENTIFIER FROM IDENTIFIER
    (12) statement -> . DELETE1 EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER
    (13) statement -> . SAVE GRAPH IDENTIFIER TO STRING
    (14) statement -> . LOAD GRAPH IDENTIFIER FROM STRING
    (15) statement -> . FIND MST IN IDENTIFIER
    (16) statement -> . IF NODE IDENTIFIER IN IDENTIFIER THEN statement
    (17) statement -> . IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (18) statement -> . IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (19) statement -> . IF FIND CYCLE IN IDENTIFIER THEN statement
    (20) statement -> . IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement
    (21) statement -> . IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (22) statement -> . IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (23) statement -> . IF NOT FIND CYCLE IN IDENTIFIER THEN statement
    (24) statement -> . CLOSURE closure_type IN IDENTIFIER

    NODE            shift and go to state 2
    GRAPH           shift and go to state 3
    EDGE            shift and go to state 4
    VISUALIZE       shift and go to state 5
    FIND            shift and go to state 6
    COLOR           shift and go to state 7
    DELETE1         shift and go to state 8
    SAVE            shift and go to state 9
    LOAD            shift and go to state 10
    IF              shift and go to state 11
    CLOSURE         shift and go to state 12

    statement                      shift and go to state 122

state 116

    (4) statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER .

    $end            reduce using rule 4 (statement -> EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER .)


state 117

    (17) statement -> IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN . statement
    (1) statement -> . NODE IDENTIFIER IN IDENTIFIER
    (2) statement -> . GRAPH IDENTIFIER DIRECTED
    (3) statement -> . GRAPH IDENTIFIER
    (4) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (6) statement -> . VISUALIZE IDENTIFIER
    (7) statement -> . FIND CYCLE IN IDENTIFIER
    (8) statement -> . FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (9) statement -> . COLOR NODE IDENTIFIER STRING
    (10) statement -> . COLOR EDGE IDENTIFIER ARROW IDENTIFIER STRING
    (11) statement -> . DELETE1 NODE IDENTIFIER FROM IDENTIFIER
    (12) statement -> . DELETE1 EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER
    (13) statement -> . SAVE GRAPH IDENTIFIER TO STRING
    (14) statement -> . LOAD GRAPH IDENTIFIER FROM STRING
    (15) statement -> . FIND MST IN IDENTIFIER
    (16) statement -> . IF NODE IDENTIFIER IN IDENTIFIER THEN statement
    (17) statement -> . IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (18) statement -> . IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (19) statement -> . IF FIND CYCLE IN IDENTIFIER THEN statement
    (20) statement -> . IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement
    (21) statement -> . IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (22) statement -> . IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (23) statement -> . IF NOT FIND CYCLE IN IDENTIFIER THEN statement
    (24) statement -> . CLOSURE closure_type IN IDENTIFIER

    NODE            shift and go to state 2
    GRAPH           shift and go to state 3
    EDGE            shift and go to state 4
    VISUALIZE       shift and go to state 5
    FIND            shift and go to state 6
    COLOR           shift and go to state 7
    DELETE1         shift and go to state 8
    SAVE            shift and go to state 9
    LOAD            shift and go to state 10
    IF              shift and go to state 11
    CLOSURE         shift and go to state 12

    statement                      shift and go to state 123

state 118

    (18) statement -> IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN . statement
    (1) statement -> . NODE IDENTIFIER IN IDENTIFIER
    (2) statement -> . GRAPH IDENTIFIER DIRECTED
    (3) statement -> . GRAPH IDENTIFIER
    (4) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (6) statement -> . VISUALIZE IDENTIFIER
    (7) statement -> . FIND CYCLE IN IDENTIFIER
    (8) statement -> . FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (9) statement -> . COLOR NODE IDENTIFIER STRING
    (10) statement -> . COLOR EDGE IDENTIFIER ARROW IDENTIFIER STRING
    (11) statement -> . DELETE1 NODE IDENTIFIER FROM IDENTIFIER
    (12) statement -> . DELETE1 EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER
    (13) statement -> . SAVE GRAPH IDENTIFIER TO STRING
    (14) statement -> . LOAD GRAPH IDENTIFIER FROM STRING
    (15) statement -> . FIND MST IN IDENTIFIER
    (16) statement -> . IF NODE IDENTIFIER IN IDENTIFIER THEN statement
    (17) statement -> . IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (18) statement -> . IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (19) statement -> . IF FIND CYCLE IN IDENTIFIER THEN statement
    (20) statement -> . IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement
    (21) statement -> . IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (22) statement -> . IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (23) statement -> . IF NOT FIND CYCLE IN IDENTIFIER THEN statement
    (24) statement -> . CLOSURE closure_type IN IDENTIFIER

    NODE            shift and go to state 2
    GRAPH           shift and go to state 3
    EDGE            shift and go to state 4
    VISUALIZE       shift and go to state 5
    FIND            shift and go to state 6
    COLOR           shift and go to state 7
    DELETE1         shift and go to state 8
    SAVE            shift and go to state 9
    LOAD            shift and go to state 10
    IF              shift and go to state 11
    CLOSURE         shift and go to state 12

    statement                      shift and go to state 124

state 119

    (20) statement -> IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement .

    $end            reduce using rule 20 (statement -> IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement .)


state 120

    (21) statement -> IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER . THEN statement

    THEN            shift and go to state 125


state 121

    (22) statement -> IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER . THEN statement

    THEN            shift and go to state 126


state 122

    (23) statement -> IF NOT FIND CYCLE IN IDENTIFIER THEN statement .

    $end            reduce using rule 23 (statement -> IF NOT FIND CYCLE IN IDENTIFIER THEN statement .)


state 123

    (17) statement -> IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement .

    $end            reduce using rule 17 (statement -> IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement .)


state 124

    (18) statement -> IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement .

    $end            reduce using rule 18 (statement -> IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement .)


state 125

    (21) statement -> IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN . statement
    (1) statement -> . NODE IDENTIFIER IN IDENTIFIER
    (2) statement -> . GRAPH IDENTIFIER DIRECTED
    (3) statement -> . GRAPH IDENTIFIER
    (4) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (6) statement -> . VISUALIZE IDENTIFIER
    (7) statement -> . FIND CYCLE IN IDENTIFIER
    (8) statement -> . FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (9) statement -> . COLOR NODE IDENTIFIER STRING
    (10) statement -> . COLOR EDGE IDENTIFIER ARROW IDENTIFIER STRING
    (11) statement -> . DELETE1 NODE IDENTIFIER FROM IDENTIFIER
    (12) statement -> . DELETE1 EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER
    (13) statement -> . SAVE GRAPH IDENTIFIER TO STRING
    (14) statement -> . LOAD GRAPH IDENTIFIER FROM STRING
    (15) statement -> . FIND MST IN IDENTIFIER
    (16) statement -> . IF NODE IDENTIFIER IN IDENTIFIER THEN statement
    (17) statement -> . IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (18) statement -> . IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (19) statement -> . IF FIND CYCLE IN IDENTIFIER THEN statement
    (20) statement -> . IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement
    (21) statement -> . IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (22) statement -> . IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (23) statement -> . IF NOT FIND CYCLE IN IDENTIFIER THEN statement
    (24) statement -> . CLOSURE closure_type IN IDENTIFIER

    NODE            shift and go to state 2
    GRAPH           shift and go to state 3
    EDGE            shift and go to state 4
    VISUALIZE       shift and go to state 5
    FIND            shift and go to state 6
    COLOR           shift and go to state 7
    DELETE1         shift and go to state 8
    SAVE            shift and go to state 9
    LOAD            shift and go to state 10
    IF              shift and go to state 11
    CLOSURE         shift and go to state 12

    statement                      shift and go to state 127

state 126

    (22) statement -> IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN . statement
    (1) statement -> . NODE IDENTIFIER IN IDENTIFIER
    (2) statement -> . GRAPH IDENTIFIER DIRECTED
    (3) statement -> . GRAPH IDENTIFIER
    (4) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER WEIGHT NUMBER IN IDENTIFIER
    (5) statement -> . EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER
    (6) statement -> . VISUALIZE IDENTIFIER
    (7) statement -> . FIND CYCLE IN IDENTIFIER
    (8) statement -> . FIND PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER
    (9) statement -> . COLOR NODE IDENTIFIER STRING
    (10) statement -> . COLOR EDGE IDENTIFIER ARROW IDENTIFIER STRING
    (11) statement -> . DELETE1 NODE IDENTIFIER FROM IDENTIFIER
    (12) statement -> . DELETE1 EDGE IDENTIFIER ARROW IDENTIFIER FROM IDENTIFIER
    (13) statement -> . SAVE GRAPH IDENTIFIER TO STRING
    (14) statement -> . LOAD GRAPH IDENTIFIER FROM STRING
    (15) statement -> . FIND MST IN IDENTIFIER
    (16) statement -> . IF NODE IDENTIFIER IN IDENTIFIER THEN statement
    (17) statement -> . IF EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (18) statement -> . IF PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (19) statement -> . IF FIND CYCLE IN IDENTIFIER THEN statement
    (20) statement -> . IF NOT NODE IDENTIFIER IN IDENTIFIER THEN statement
    (21) statement -> . IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement
    (22) statement -> . IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement
    (23) statement -> . IF NOT FIND CYCLE IN IDENTIFIER THEN statement
    (24) statement -> . CLOSURE closure_type IN IDENTIFIER

    NODE            shift and go to state 2
    GRAPH           shift and go to state 3
    EDGE            shift and go to state 4
    VISUALIZE       shift and go to state 5
    FIND            shift and go to state 6
    COLOR           shift and go to state 7
    DELETE1         shift and go to state 8
    SAVE            shift and go to state 9
    LOAD            shift and go to state 10
    IF              shift and go to state 11
    CLOSURE         shift and go to state 12

    statement                      shift and go to state 128

state 127

    (21) statement -> IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement .

    $end            reduce using rule 21 (statement -> IF NOT EDGE IDENTIFIER ARROW IDENTIFIER IN IDENTIFIER THEN statement .)


state 128

    (22) statement -> IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement .

    $end            reduce using rule 22 (statement -> IF NOT PATH IDENTIFIER TO IDENTIFIER IN IDENTIFIER THEN statement .)

